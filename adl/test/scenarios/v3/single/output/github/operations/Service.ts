export interface Service {
    /**
     * Get the authenticated GitHub App
     * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations](https://developer.github.com/v3/apps/#list-installations)" endpoint.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @since 9.0.0
     * @http GET /app
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @return 200 - response
     */
    "apps/get-authenticated"(accept: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            installations_count?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        };
    }];
    /**
     * Create a GitHub App from a manifest
     * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     * @since 9.0.0
     * @http POST /app-manifests/{code}/conversions
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param code - code parameter
     * @return 200 - response
     */
    "apps/create-from-manifest"(accept: Header<string>, code: string): [(code: 200, mediaType: "application/json") => {
        body: {
            client_id?: string;
            client_secret?: string;
            created_at?: string;
            description?: string;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            pem?: string;
            updated_at?: string;
            webhook_secret?: string;
        };
    }];
    /**
     * List installations
     * @description You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * The permissions the installation has are included under the `permissions` key.
     * @since 9.0.0
     * @http GET /app/installations
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - The permissions the installation has are included under the `permissions` key.
     */
    "apps/list-installations"(accept: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            access_tokens_url?: string;
            account?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            app_id?: double;
            events?: Array<string>;
            html_url?: string;
            id?: double;
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            repositories_url?: string;
            repository_selection?: string;
            single_file_name?: string;
            target_id?: double;
            target_type?: string;
        }>;
    }];
    /**
     * Get an installation
     * @description You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @since 9.0.0
     * @http GET /app/installations/{installation_id}
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param installation_id - installation_id parameter
     * @return 200 - response
     */
    "apps/get-installation"(accept: Header<string>, installation_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            access_tokens_url?: string;
            account?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            app_id?: double;
            events?: Array<string>;
            html_url?: string;
            id?: double;
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            repositories_url?: string;
            repository_selection?: string;
            single_file_name?: string;
            target_id?: double;
            target_type?: string;
        };
    }];
    /**
     * Delete an installation
     * @description Uninstalls a GitHub App on a user, organization, or business account.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @since 9.0.0
     * @http DELETE /app/installations/{installation_id}
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param installation_id - installation_id parameter
     * @return 204 - Empty response
     */
    "apps/delete-installation"(accept: Header<string>, installation_id: int64): [(code: 204) => {}];
    /**
     * Create a new installation token
     * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * This example grants the token "Read and write" permission to `issues` and "Read" permission to `contents`, and restricts the token's access to the repository with an `id` of 1296269.
     * @since 9.0.0
     * @http POST /app/installations/{installation_id}/access_tokens
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param installation_id - installation_id parameter
     * @return 201 - response
     */
    "apps/create-installation-token"(accept: Header<string>, installation_id: int64, body?: Body<{
        permissions?: {};
        repository_ids?: Array<int64>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            permissions?: {
                contents?: string;
                issues?: string;
            };
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            token?: string;
        };
    }];
    /**
     * List your grants
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /applications/grants
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "oauth-authorizations/list-grants"(accept?: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            id?: double;
            scopes?: Array<string>;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Get a single grant
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /applications/grants/{grant_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param grant_id - grant_id parameter
     * @return 200 - response
     */
    "oauth-authorizations/get-grant"(accept?: Header<string>, grant_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            id?: double;
            scopes?: Array<string>;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a grant
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http DELETE /applications/grants/{grant_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param grant_id - grant_id parameter
     * @return 204 - Empty response
     */
    "oauth-authorizations/delete-grant"(accept?: Header<string>, grant_id: int64): [(code: 204) => {}];
    /**
     * Delete an app authorization
     * @description OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     * @since 9.0.0
     * @http DELETE /applications/{client_id}/grant
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param client_id - client_id parameter
     * @return 204 - Empty response
     */
    "apps/delete-authorization"(accept: Header<string>, client_id: string, body?: Body<{
        access_token?: string;
    }, "application/json">): [(code: 204) => {}];
    /**
     * Revoke a grant for an application
     * @description **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on July 1, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http DELETE /applications/{client_id}/grants/{access_token}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @param access_token - access_token parameter
     * @return 204 - Empty response
     */
    "apps/revoke-grant-for-application"(accept?: Header<string>, client_id: string, access_token: string): [(code: 204) => {}];
    /**
     * Check a token
     * @description OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
     * @since 9.0.0
     * @http POST /applications/{client_id}/token
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param client_id - client_id parameter
     * @return 200 - response
     */
    "apps/check-token"(accept: Header<string>, client_id: string, body?: Body<{
        access_token?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete an app token
     * @description OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     * @since 9.0.0
     * @http DELETE /applications/{client_id}/token
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param client_id - client_id parameter
     * @return 204 - Empty response
     */
    "apps/delete-token"(accept: Header<string>, client_id: string, body?: Body<{
        access_token?: string;
    }, "application/json">): [(code: 204) => {}];
    /**
     * Reset a token
     * @description OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @since 9.0.0
     * @http PATCH /applications/{client_id}/token
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param client_id - client_id parameter
     * @return 200 - response
     */
    "apps/reset-token"(accept: Header<string>, client_id: string, body?: Body<{
        access_token?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Check an authorization
     * @description **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on July 1, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /applications/{client_id}/tokens/{access_token}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @param access_token - access_token parameter
     * @return 200 - response
     */
    "apps/check-authorization"(accept?: Header<string>, client_id: string, access_token: string): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Reset an authorization
     * @description **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on July 1, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http POST /applications/{client_id}/tokens/{access_token}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @param access_token - access_token parameter
     * @return 200 - response
     */
    "apps/reset-authorization"(accept?: Header<string>, client_id: string, access_token: string): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Revoke an authorization for an application
     * @description **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on July 1, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http DELETE /applications/{client_id}/tokens/{access_token}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @param access_token - access_token parameter
     * @return 204 - Empty response
     */
    "apps/revoke-authorization-for-application"(accept?: Header<string>, client_id: string, access_token: string): [(code: 204) => {}];
    /**
     * Get a single GitHub App
     * @description **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     *
     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @since 9.0.0
     * @http GET /apps/{app_slug}
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param app_slug - app_slug parameter
     * @return 200 - response
     */
    "apps/get-by-slug"(accept: Header<string>, app_slug: string): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        };
    }];
    /**
     * List your authorizations
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /authorizations
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "oauth-authorizations/list-authorizations"(accept?: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a new authorization
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates OAuth tokens using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
     *
     * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
     *
     * Organizations that enforce SAML SSO require personal access tokens to be whitelisted. Read more about whitelisting tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http POST /authorizations
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 201 - response
     */
    "oauth-authorizations/create-authorization"(accept?: Header<string>, body?: Body<{
        client_id?: string;
        client_secret?: string;
        fingerprint?: string;
        note: string;
        note_url?: string;
        scopes?: Array<string>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get-or-create an authorization for a specific app
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http PUT /authorizations/clients/{client_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @return 200 - Response if returning an existing token
     * @return 201 - **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    "oauth-authorizations/get-or-create-authorization-for-app"(accept?: Header<string>, client_id: string, body?: Body<{
        client_secret: string;
        fingerprint?: string;
        note?: string;
        note_url?: string;
        scopes?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }, (code: 201, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get-or-create an authorization for a specific app and fingerprint
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http PUT /authorizations/clients/{client_id}/{fingerprint}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param client_id - client_id parameter
     * @param fingerprint - fingerprint parameter
     * @return 200 - Response if returning an existing token
     * @return 201 - Response if returning a new token
     */
    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"(accept?: Header<string>, client_id: string, fingerprint: string, body?: Body<{
        client_secret: string;
        note?: string;
        note_url?: string;
        scopes?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }, (code: 201, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a single authorization
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /authorizations/{authorization_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param authorization_id - authorization_id parameter
     * @return 200 - response
     */
    "oauth-authorizations/get-authorization"(accept?: Header<string>, authorization_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete an authorization
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http DELETE /authorizations/{authorization_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param authorization_id - authorization_id parameter
     * @return 204 - Empty response
     */
    "oauth-authorizations/delete-authorization"(accept?: Header<string>, authorization_id: int64): [(code: 204) => {}];
    /**
     * Update an existing authorization
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * You can only send one of these scope keys at a time.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http PATCH /authorizations/{authorization_id}
     * @tag oauth-authorizations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param authorization_id - authorization_id parameter
     * @return 200 - response
     */
    "oauth-authorizations/update-authorization"(accept?: Header<string>, authorization_id: int64, body?: Body<{
        add_scopes?: Array<string>;
        fingerprint?: string;
        note?: string;
        note_url?: string;
        remove_scopes?: Array<string>;
        scopes?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                client_id?: string;
                name?: string;
                url?: string;
            };
            created_at?: string;
            fingerprint?: string;
            hashed_token?: string;
            id?: double;
            note?: string;
            note_url?: string;
            scopes?: Array<string>;
            token?: string;
            token_last_eight?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List all codes of conduct
     * @since 9.0.0
     * @http GET /codes_of_conduct
     * @tag codes-of-conduct
     * @param accept - This API is under preview and subject to change.
     * @return 200 - response
     */
    "codes-of-conduct/list-conduct-codes"(accept: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            key?: string;
            name?: string;
            url?: string;
        }>;
    }];
    /**
     * Get an individual code of conduct
     * @since 9.0.0
     * @http GET /codes_of_conduct/{key}
     * @tag codes-of-conduct
     * @param accept - This API is under preview and subject to change.
     * @param key - key parameter
     * @return 200 - response
     */
    "codes-of-conduct/get-conduct-code"(accept: Header<string>, key: string): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            key?: string;
            name?: string;
            url?: string;
        };
    }];
    /**
     * Create a content attachment
     * @description Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/v3/activity/events/types/#contentreferenceevent) to create an attachment.
     *
     * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://developer.github.com/apps/using-content-attachments/)" for details about content attachments.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * This example creates a content attachment for the domain `https://errors.ai/`.
     * @since 9.0.0
     * @http POST /content_references/{content_reference_id}/attachments
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param content_reference_id - content_reference_id parameter
     * @return 200 - response
     */
    "apps/create-content-attachment"(accept: Header<string>, content_reference_id: int64, body?: Body<{
        body: string;
        title: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            id?: double;
            title?: string;
        };
    }];
    /**
     * Get
     * @description Lists all the emojis available to use on GitHub.
     *
     *
     * @since 9.0.0
     * @http GET /emojis
     * @tag emojis
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "emojis/get"(accept?: Header<string>): [(code: 200) => {}];
    /**
     * List public events
     * @description We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     * @since 9.0.0
     * @http GET /events
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 418 - Response definition missing
     */
    "activity/list-public-events"(accept?: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 418) => {
        isException: true;
    }];
    /**
     * List feeds
     * @description GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     *
     * *   **Timeline**: The GitHub global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     * @since 9.0.0
     * @http GET /feeds
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "activity/list-feeds"(accept?: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                current_user?: {
                    href?: string;
                    type?: string;
                };
                current_user_actor?: {
                    href?: string;
                    type?: string;
                };
                current_user_organization?: {
                    href?: string;
                    type?: string;
                };
                current_user_organizations?: Array<{
                    href?: string;
                    type?: string;
                }>;
                current_user_public?: {
                    href?: string;
                    type?: string;
                };
                security_advisories?: {
                    href?: string;
                    type?: string;
                };
                timeline?: {
                    href?: string;
                    type?: string;
                };
                user?: {
                    href?: string;
                    type?: string;
                };
            };
            current_user_actor_url?: string;
            current_user_organization_url?: string;
            current_user_organization_urls?: Array<string>;
            current_user_public_url?: string;
            current_user_url?: string;
            security_advisories_url?: string;
            timeline_url?: string;
            user_url?: string;
        };
    }];
    /**
     * List the authenticated user's gists or if called anonymously, this will return all public gists
     * @since 9.0.0
     * @http GET /gists
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list"(accept?: Header<string>, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.rb"?: {
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    type?: string;
                };
            };
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        }>;
    }];
    /**
     * Create a gist
     * @description Allows you to add a new gist with one or more files.
     *
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     * @since 9.0.0
     * @http POST /gists
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 201 - response
     */
    "gists/create"(accept?: Header<string>, body?: Body<{
        description?: string;
        files: {
            content?: string;
        };
        public?: boolean;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.py"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world.rb"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_python.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_ruby.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
            };
            forks?: Array<{
                created_at?: string;
                id?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>;
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            history?: Array<{
                change_status?: {
                    additions?: double;
                    deletions?: double;
                    total?: double;
                };
                committed_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                version?: string;
            }>;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        };
    }];
    /**
     * List all public gists
     * @description List all public gists sorted by most recently updated to least recently updated.
     *
     * Note: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     * @since 9.0.0
     * @http GET /gists/public
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list-public"(accept?: Header<string>, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.rb"?: {
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    type?: string;
                };
            };
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        }>;
    }];
    /**
     * List starred gists
     * @description List the authenticated user's starred gists:
     * @since 9.0.0
     * @http GET /gists/starred
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list-starred"(accept?: Header<string>, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.rb"?: {
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    type?: string;
                };
            };
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        }>;
    }];
    /**
     * Get a single gist
     * @since 9.0.0
     * @http GET /gists/{gist_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 200 - response
     */
    "gists/get"(accept?: Header<string>, gist_id: string): [(code: 200, mediaType: "application/json") => {
        body: {
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.py"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world.rb"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_python.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_ruby.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
            };
            forks?: Array<{
                created_at?: string;
                id?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>;
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            history?: Array<{
                change_status?: {
                    additions?: double;
                    deletions?: double;
                    total?: double;
                };
                committed_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                version?: string;
            }>;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        };
    }];
    /**
     * Delete a gist
     * @since 9.0.0
     * @http DELETE /gists/{gist_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 204 - Empty response
     */
    "gists/delete"(accept?: Header<string>, gist_id: string): [(code: 204) => {}];
    /**
     * Edit a gist
     * @description Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     * @since 9.0.0
     * @http PATCH /gists/{gist_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 200 - response
     */
    "gists/update"(accept?: Header<string>, gist_id: string, body?: Body<{
        description?: string;
        files?: {
            content?: string;
            filename?: string;
        };
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.md"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world.py"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world.rb"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "new_file.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
            };
            forks?: Array<{
                created_at?: string;
                id?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>;
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            history?: Array<{
                change_status?: {
                    additions?: double;
                    deletions?: double;
                    total?: double;
                };
                committed_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                version?: string;
            }>;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        };
    }];
    /**
     * List comments on a gist
     * @since 9.0.0
     * @http GET /gists/{gist_id}/comments
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list-comments"(accept?: Header<string>, gist_id: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a comment
     * @since 9.0.0
     * @http POST /gists/{gist_id}/comments
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 201 - response
     */
    "gists/create-comment"(accept?: Header<string>, gist_id: string, body?: Body<{
        body: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Get a single comment
     * @since 9.0.0
     * @http GET /gists/{gist_id}/comments/{comment_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "gists/get-comment"(accept?: Header<string>, gist_id: string, comment_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a comment
     * @since 9.0.0
     * @http DELETE /gists/{gist_id}/comments/{comment_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param comment_id - comment_id parameter
     * @return 204 - Empty response
     */
    "gists/delete-comment"(accept?: Header<string>, gist_id: string, comment_id: int64): [(code: 204) => {}];
    /**
     * Edit a comment
     * @since 9.0.0
     * @http PATCH /gists/{gist_id}/comments/{comment_id}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "gists/update-comment"(accept?: Header<string>, gist_id: string, comment_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List gist commits
     * @since 9.0.0
     * @http GET /gists/{gist_id}/commits
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list-commits"(accept?: Header<string>, gist_id: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            change_status?: {
                additions?: double;
                deletions?: double;
                total?: double;
            };
            committed_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            version?: string;
        }>;
    }];
    /**
     * List gist forks
     * @since 9.0.0
     * @http GET /gists/{gist_id}/forks
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "gists/list-forks"(accept?: Header<string>, gist_id: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Fork a gist
     * @description **Note**: This was previously `/gists/:gist_id/fork`.
     * @since 9.0.0
     * @http POST /gists/{gist_id}/forks
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 201 - response
     */
    "gists/fork"(accept?: Header<string>, gist_id: string): [(code: 201, mediaType: "application/json") => {
        body: {
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.rb"?: {
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    type?: string;
                };
            };
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        };
    }];
    /**
     * Check if a gist is starred
     * @since 9.0.0
     * @http GET /gists/{gist_id}/star
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 204 - Response if gist is starred
     * @return 404 - Response if gist is not starred
     */
    "gists/check-is-starred"(accept?: Header<string>, gist_id: string): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Star a gist
     * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     * @since 9.0.0
     * @http PUT /gists/{gist_id}/star
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 204 - Empty response
     */
    "gists/star"(accept?: Header<string>, gist_id: string): [(code: 204) => {}];
    /**
     * Unstar a gist
     * @since 9.0.0
     * @http DELETE /gists/{gist_id}/star
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @return 204 - Empty response
     */
    "gists/unstar"(accept?: Header<string>, gist_id: string): [(code: 204) => {}];
    /**
     * Get a specific revision of a gist
     * @since 9.0.0
     * @http GET /gists/{gist_id}/{sha}
     * @tag gists
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param gist_id - gist_id parameter
     * @param sha - sha parameter
     * @return 200 - response
     */
    "gists/get-revision"(accept?: Header<string>, gist_id: string, sha: string): [(code: 200, mediaType: "application/json") => {
        body: {
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.py"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world.rb"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_python.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
                "hello_world_ruby.txt"?: {
                    content?: string;
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    truncated?: boolean;
                    type?: string;
                };
            };
            forks?: Array<{
                created_at?: string;
                id?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>;
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            history?: Array<{
                change_status?: {
                    additions?: double;
                    deletions?: double;
                    total?: double;
                };
                committed_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                version?: string;
            }>;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        };
    }];
    /**
     * Listing available templates
     * @description List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create).
     * @since 9.0.0
     * @http GET /gitignore/templates
     * @tag gitignore
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "gitignore/list-templates"(accept?: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: Array<string>;
    }];
    /**
     * Get a single template
     * @description The API also allows fetching the source of a single template.
     *
     * Use the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.
     *
     *
     * @since 9.0.0
     * @http GET /gitignore/templates/{name}
     * @tag gitignore
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param name - name parameter
     * @return 200 - response
     */
    "gitignore/get-template"(accept?: Header<string>, name: string): [(code: 200, mediaType: "application/json") => {
        body: {
            name?: string;
            source?: string;
        };
    }];
    /**
     * List repositories
     * @description List repositories that an installation can access.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @since 9.0.0
     * @http GET /installation/repositories
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "apps/list-repos"(accept: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Revoke an installation token
     * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     *
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create a new installation token](https://developer.github.com/v3/apps/#create-a-new-installation-token)" endpoint.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @since 9.0.0
     * @http DELETE /installation/token
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @return 204 - Empty response
     */
    "apps/revoke-installation-token"(accept: Header<string>): [(code: 204) => {}];
    /**
     * List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories
     * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     *
     *
     * @since 9.0.0
     * @http GET /issues
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param filter - Indicates which sorts of issues to return. Can be one of:
     * \* `assigned`: Issues assigned to you
     * \* `created`: Issues created by you
     * \* `mentioned`: Issues mentioning you
     * \* `subscribed`: Issues you're subscribed to updates for
     * \* `all`: All issues the authenticated user can see, regardless of participation or creation
     * @param state - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param labels - A list of comma separated label names. Example: `bug,ui,@high`
     * @param sort - What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param direction - The direction of the sort. Can be either `asc` or `desc`.
     * @param since - Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list"(accept?: Header<string>, filter?: Query<"assigned" | "created" | "mentioned" | "subscribed" | "all">, state?: Query<"open" | "closed" | "all">, labels?: Query<string>, sort?: Query<"created" | "updated" | "comments">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Search issues
     * @description Find issues by state and keyword.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /legacy/issues/search/{owner}/{repository}/{state}/{keyword}
     * @tag search
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repository - repository parameter
     * @param state - Indicates the state of the issues to return. Can be either `open` or `closed`.
     * @param keyword - The search term.
     * @return 200 - response
     */
    "search/issues-legacy"(accept?: Header<string>, owner: string, repository: string, state: "open" | "closed", keyword: string): [(code: 200, mediaType: "application/json") => {
        body: {
            issues?: Array<{
                body?: string;
                comments?: double;
                created_at?: string;
                gravatar_id?: string;
                html_url?: string;
                labels?: Array<string>;
                number?: double;
                position?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                user?: string;
                votes?: double;
            }>;
        };
    }];
    /**
     * Search repositories
     * @description Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the `start_page` parameter.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /legacy/repos/search/{keyword}
     * @tag search
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param keyword - The search term.
     * @param language - Filter results by language.
     * @param start_page - The page number to fetch.
     * @param sort - The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.
     * @param order - The sort field. if `sort` param is provided. Can be either `asc` or `desc`.
     * @return 200 - response
     */
    "search/repos-legacy"(accept?: Header<string>, keyword: string, language?: Query<string>, start_page?: Query<string>, sort?: Query<"stars" | "forks" | "updated">, order?: Query<"asc" | "desc">): [(code: 200, mediaType: "application/json") => {
        body: {
            repositories?: Array<{
                created?: string;
                created_at?: string;
                description?: string;
                followers?: double;
                fork?: boolean;
                forks?: double;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                language?: string;
                name?: string;
                open_issues?: double;
                owner?: string;
                private?: boolean;
                pushed?: string;
                pushed_at?: string;
                score?: double;
                size?: double;
                type?: string;
                url?: string;
                username?: string;
                watchers?: double;
            }>;
        };
    }];
    /**
     * Email search
     * @description This API call is added for compatibility reasons only. There's no guarantee that full email searches will always be available. The `@` character in the address must be left unencoded. Searches only against public email addresses (as configured on the user's GitHub profile).
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /legacy/user/email/{email}
     * @tag search
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param email - The email address.
     * @return 200 - response
     */
    "search/email-legacy"(accept?: Header<string>, email: string): [(code: 200, mediaType: "application/json") => {
        body: {
            user?: {
                blog?: string;
                company?: string;
                created?: string;
                created_at?: string;
                email?: string;
                followers_count?: double;
                following_count?: double;
                gravatar_id?: string;
                id?: double;
                location?: string;
                login?: string;
                name?: string;
                public_gist_count?: double;
                public_repo_count?: double;
                type?: string;
            };
        };
    }];
    /**
     * Search users
     * @description Find users by keyword.
     * @since 9.0.0
     * @deprecated 9.0.0
     * @http GET /legacy/user/search/{keyword}
     * @tag search
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param keyword - The search term.
     * @param start_page - The page number to fetch.
     * @param sort - The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.
     * @param order - The sort field. if `sort` param is provided. Can be either `asc` or `desc`.
     * @return 200 - response
     */
    "search/users-legacy"(accept?: Header<string>, keyword: string, start_page?: Query<string>, sort?: Query<"stars" | "forks" | "updated">, order?: Query<"asc" | "desc">): [(code: 200, mediaType: "application/json") => {
        body: {
            users?: Array<{
                created?: string;
                created_at?: string;
                followers?: double;
                followers_count?: double;
                fullname?: string;
                gravatar_id?: string;
                id?: string;
                language?: string;
                location?: string;
                login?: string;
                name?: string;
                public_repo_count?: double;
                repos?: double;
                score?: double;
                type?: string;
                username?: string;
            }>;
        };
    }];
    /**
     * List commonly used licenses
     * @since 9.0.0
     * @http GET /licenses
     * @tag licenses
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "licenses/list-commonly-used"(accept?: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            key?: string;
            name?: string;
            node_id?: string;
            spdx_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Get an individual license
     * @since 9.0.0
     * @http GET /licenses/{license}
     * @tag licenses
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param license - license parameter
     * @return 200 - response
     */
    "licenses/get"(accept?: Header<string>, license: string): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            conditions?: Array<string>;
            description?: string;
            featured?: boolean;
            html_url?: string;
            implementation?: string;
            key?: string;
            limitations?: Array<string>;
            name?: string;
            node_id?: string;
            permissions?: Array<string>;
            spdx_id?: string;
            url?: string;
        };
    }];
    /**
     * Render an arbitrary Markdown document
     * @since 9.0.0
     * @http POST /markdown
     * @tag markdown
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "markdown/render"(accept?: Header<string>, body?: Body<{
        context?: string;
        mode?: "markdown" | "gfm";
        text: string;
    }, "application/json">): [(code: 200) => {}];
    /**
     * Render a Markdown document in raw mode
     * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     *
     *
     * @since 9.0.0
     * @http POST /markdown/raw
     * @tag markdown
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param content_type - Setting content-type header is required for this endpoint
     * @return 200 - response
     */
    "markdown/render-raw"(accept?: Header<string>, content_type?: Header<"text/plain; charset=utf-8", "content-type">, body?: Body<string, "application/json">): [(code: 200) => {}];
    /**
     * Check if a GitHub account is associated with any Marketplace listing
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/accounts/{account_id}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param account_id - account_id parameter
     * @return 200 - response
     */
    "apps/check-account-is-associated-with-any"(accept?: Header<string>, account_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            email?: string;
            id?: double;
            login?: string;
            marketplace_pending_change?: {
                effective_date?: string;
                id?: double;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
            };
            marketplace_purchase?: {
                billing_cycle?: string;
                free_trial_ends_on?: string;
                next_billing_date?: string;
                on_free_trial?: boolean;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
                updated_at?: string;
            };
            organization_billing_email?: string;
            type?: string;
            url?: string;
        };
    }];
    /**
     * List all plans for your Marketplace listing
     * @description GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/plans
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "apps/list-plans"(accept?: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            accounts_url?: string;
            bullets?: Array<string>;
            description?: string;
            has_free_trial?: boolean;
            id?: double;
            monthly_price_in_cents?: double;
            name?: string;
            number?: double;
            price_model?: string;
            state?: string;
            unit_name?: string;
            url?: string;
            yearly_price_in_cents?: double;
        }>;
    }];
    /**
     * List all GitHub accounts (user or organization) on a specific plan
     * @description Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/plans/{plan_id}/accounts
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param plan_id - plan_id parameter
     * @param sort - Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.
     * @param direction - To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "apps/list-accounts-user-or-org-on-plan"(accept?: Header<string>, plan_id: int64, sort?: Query<"created" | "updated">, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            id?: double;
            login?: string;
            marketplace_pending_change?: {
                effective_date?: string;
                id?: double;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
            };
            marketplace_purchase?: {
                billing_cycle?: string;
                free_trial_ends_on?: string;
                next_billing_date?: string;
                on_free_trial?: boolean;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
                updated_at?: string;
            };
            organization_billing_email?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Check if a GitHub account is associated with any Marketplace listing (stubbed)
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/stubbed/accounts/{account_id}
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param account_id - account_id parameter
     * @return 200 - response
     */
    "apps/check-account-is-associated-with-any-stubbed"(accept?: Header<string>, account_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            email?: string;
            id?: double;
            login?: string;
            marketplace_pending_change?: {
                effective_date?: string;
                id?: double;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
            };
            marketplace_purchase?: {
                billing_cycle?: string;
                free_trial_ends_on?: string;
                next_billing_date?: string;
                on_free_trial?: boolean;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
                updated_at?: string;
            };
            organization_billing_email?: string;
            type?: string;
            url?: string;
        };
    }];
    /**
     * List all plans for your Marketplace listing (stubbed)
     * @description GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/stubbed/plans
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "apps/list-plans-stubbed"(accept?: Header<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            accounts_url?: string;
            bullets?: Array<string>;
            description?: string;
            has_free_trial?: boolean;
            id?: double;
            monthly_price_in_cents?: double;
            name?: string;
            number?: double;
            price_model?: string;
            state?: string;
            unit_name?: string;
            url?: string;
            yearly_price_in_cents?: double;
        }>;
    }];
    /**
     * List all GitHub accounts (user or organization) on a specific plan (stubbed)
     * @description Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     * @since 9.0.0
     * @http GET /marketplace_listing/stubbed/plans/{plan_id}/accounts
     * @tag apps
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param plan_id - plan_id parameter
     * @param sort - Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.
     * @param direction - To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "apps/list-accounts-user-or-org-on-plan-stubbed"(accept?: Header<string>, plan_id: int64, sort?: Query<"created" | "updated">, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            id?: double;
            login?: string;
            marketplace_pending_change?: {
                effective_date?: string;
                id?: double;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
            };
            marketplace_purchase?: {
                billing_cycle?: string;
                free_trial_ends_on?: string;
                next_billing_date?: string;
                on_free_trial?: boolean;
                plan?: {
                    accounts_url?: string;
                    bullets?: Array<string>;
                    description?: string;
                    has_free_trial?: boolean;
                    id?: double;
                    monthly_price_in_cents?: double;
                    name?: string;
                    number?: double;
                    price_model?: string;
                    state?: string;
                    unit_name?: string;
                    url?: string;
                    yearly_price_in_cents?: double;
                };
                unit_count?: string;
                updated_at?: string;
            };
            organization_billing_email?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Get
     * @description This endpoint provides a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
     * @since 9.0.0
     * @http GET /meta
     * @tag meta
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "meta/get"(accept?: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            api?: Array<string>;
            git?: Array<string>;
            hooks?: Array<string>;
            importer?: Array<string>;
            pages?: Array<string>;
            ssh_key_fingerprints?: {
                MD5_DSA?: string;
                MD5_RSA?: string;
                SHA256_DSA?: string;
                SHA256_RSA?: string;
            };
            verifiable_password_authentication?: boolean;
            web?: Array<string>;
        };
    }];
    /**
     * List public events for a network of repositories
     * @since 9.0.0
     * @http GET /networks/{owner}/{repo}/events
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 418 - Response definition missing
     */
    "activity/list-public-events-for-repo-network"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 418) => {
        isException: true;
    }];
    /**
     * List your notifications
     * @description List all notifications for the current user, sorted by most recently updated.
     *
     * The following example uses the `since` parameter to list notifications that have been updated after the specified time.
     * @since 9.0.0
     * @http GET /notifications
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param all - If `true`, show notifications marked as read.
     * @param participating - If `true`, only shows notifications in which the user is directly participating or mentioned.
     * @param since - Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param before - Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "activity/list-notifications"(accept?: Header<string>, all?: Query<boolean>, participating?: Query<boolean>, since?: Query<string>, before?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            id?: string;
            last_read_at?: string;
            reason?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            subject?: {
                latest_comment_url?: string;
                title?: string;
                type?: string;
                url?: string;
            };
            unread?: boolean;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Mark as read
     * @description Marks a notification as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List your notifications](https://developer.github.com/v3/activity/notifications/#list-your-notifications) endpoint and pass the query parameter `all=false`.
     * @since 9.0.0
     * @http PUT /notifications
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 205 - response
     */
    "activity/mark-as-read"(accept?: Header<string>, body?: Body<{
        last_read_at?: string;
    }, "application/json">): [(code: 205) => {}];
    /**
     * View a single thread
     * @since 9.0.0
     * @http GET /notifications/threads/{thread_id}
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param thread_id - thread_id parameter
     * @return 200 - response
     */
    "activity/get-thread"(accept?: Header<string>, thread_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            id?: string;
            last_read_at?: string;
            reason?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            subject?: {
                latest_comment_url?: string;
                title?: string;
                type?: string;
                url?: string;
            };
            unread?: boolean;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Mark a thread as read
     * @since 9.0.0
     * @http PATCH /notifications/threads/{thread_id}
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param thread_id - thread_id parameter
     * @return 205 - response
     */
    "activity/mark-thread-as-read"(accept?: Header<string>, thread_id: int64): [(code: 205) => {}];
    /**
     * Get a thread subscription
     * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     * @since 9.0.0
     * @http GET /notifications/threads/{thread_id}/subscription
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param thread_id - thread_id parameter
     * @return 200 - response
     */
    "activity/get-thread-subscription"(accept?: Header<string>, thread_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            ignored?: boolean;
            reason?: string;
            subscribed?: boolean;
            thread_url?: string;
            url?: string;
        };
    }];
    /**
     * Set a thread subscription
     * @description This lets you subscribe or unsubscribe from a conversation.
     * @since 9.0.0
     * @http PUT /notifications/threads/{thread_id}/subscription
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param thread_id - thread_id parameter
     * @return 200 - response
     */
    "activity/set-thread-subscription"(accept?: Header<string>, thread_id: int64, body?: Body<{
        ignored?: boolean;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            ignored?: boolean;
            reason?: string;
            subscribed?: boolean;
            thread_url?: string;
            url?: string;
        };
    }];
    /**
     * Delete a thread subscription
     * @description Mutes all future notifications for a conversation until you comment on the thread or get **@mention**ed.
     * @since 9.0.0
     * @http DELETE /notifications/threads/{thread_id}/subscription
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param thread_id - thread_id parameter
     * @return 204 - Empty response
     */
    "activity/delete-thread-subscription"(accept?: Header<string>, thread_id: int64): [(code: 204) => {}];
    /**
     * List all organizations
     * @description Lists all organizations, in the order that they were created on GitHub.
     *
     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.
     * @since 9.0.0
     * @http GET /organizations
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param since - The integer ID of the last organization that you've seen.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list"(accept?: Header<string>, since?: Query<int64>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            description?: string;
            events_url?: string;
            hooks_url?: string;
            id?: double;
            issues_url?: string;
            login?: string;
            members_url?: string;
            node_id?: string;
            public_members_url?: string;
            repos_url?: string;
            url?: string;
        }>;
    }];
    /**
     * Get an organization
     * @description To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     *
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see "[Response with GitHub plan information](https://developer.github.com/v3/orgs/#response-with-github-plan-information)."
     * @since 9.0.0
     * @http GET /orgs/{org}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 200 - response
     */
    "orgs/get"(accept?: Header<string>, org: string): [(code: 200, mediaType: "application/json") => {
        body: {
            avatar_url?: string;
            billing_email?: string;
            blog?: string;
            collaborators?: double;
            company?: string;
            created_at?: string;
            default_repository_permission?: string;
            description?: string;
            disk_usage?: double;
            email?: string;
            events_url?: string;
            followers?: double;
            following?: double;
            has_organization_projects?: boolean;
            has_repository_projects?: boolean;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_verified?: boolean;
            issues_url?: string;
            location?: string;
            login?: string;
            members_allowed_repository_creation_type?: string;
            members_can_create_internal_repositories?: boolean;
            members_can_create_private_repositories?: boolean;
            members_can_create_public_repositories?: boolean;
            members_can_create_repositories?: boolean;
            members_url?: string;
            name?: string;
            node_id?: string;
            owned_private_repos?: double;
            plan?: {
                name?: string;
                private_repos?: double;
                space?: double;
            };
            private_gists?: double;
            public_gists?: double;
            public_members_url?: string;
            public_repos?: double;
            repos_url?: string;
            total_private_repos?: double;
            two_factor_requirement_enabled?: boolean;
            type?: string;
            url?: string;
        };
    }];
    /**
     * Edit an organization
     * @description
     *
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
     *
     * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
     * @since 9.0.0
     * @http PATCH /orgs/{org}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 200 - response
     */
    "orgs/update"(accept?: Header<string>, org: string, body?: Body<{
        billing_email?: string;
        company?: string;
        default_repository_permission?: "read" | "write" | "admin" | "none";
        description?: string;
        email?: string;
        has_organization_projects?: boolean;
        has_repository_projects?: boolean;
        location?: string;
        members_allowed_repository_creation_type?: "all" | "private" | "none";
        members_can_create_internal_repositories?: boolean;
        members_can_create_private_repositories?: boolean;
        members_can_create_public_repositories?: boolean;
        members_can_create_repositories?: boolean;
        name?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            avatar_url?: string;
            billing_email?: string;
            blog?: string;
            collaborators?: double;
            company?: string;
            created_at?: string;
            default_repository_permission?: string;
            description?: string;
            disk_usage?: double;
            email?: string;
            events_url?: string;
            followers?: double;
            following?: double;
            has_organization_projects?: boolean;
            has_repository_projects?: boolean;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_verified?: boolean;
            issues_url?: string;
            location?: string;
            login?: string;
            members_allowed_repository_creation_type?: string;
            members_can_create_internal_repositories?: boolean;
            members_can_create_private_repositories?: boolean;
            members_can_create_public_repositories?: boolean;
            members_can_create_repositories?: boolean;
            members_url?: string;
            name?: string;
            node_id?: string;
            owned_private_repos?: double;
            plan?: {
                name?: string;
                private_repos?: double;
                space?: double;
            };
            private_gists?: double;
            public_gists?: double;
            public_members_url?: string;
            public_repos?: double;
            repos_url?: string;
            total_private_repos?: double;
            two_factor_requirement_enabled?: boolean;
            type?: string;
            url?: string;
        };
    }];
    /**
     * List blocked users
     * @description List the users blocked by an organization.
     * @since 9.0.0
     * @http GET /orgs/{org}/blocks
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 200 - response
     */
    "orgs/list-blocked-users"(accept?: Header<string>, org: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Check whether a user is blocked from an organization
     * @description If the user is blocked:
     *
     * If the user is not blocked:
     * @since 9.0.0
     * @http GET /orgs/{org}/blocks/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - If the user is blocked:
     * @return 404 - If the user is not blocked:
     */
    "orgs/check-blocked-user"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Block a user
     * @since 9.0.0
     * @http PUT /orgs/{org}/blocks/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/block-user"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * Unblock a user
     * @since 9.0.0
     * @http DELETE /orgs/{org}/blocks/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/unblock-user"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * List credential authorizations for an organization
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
     * @since 9.0.0
     * @http GET /orgs/{org}/credential-authorizations
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 200 - response
     */
    "orgs/list-credential-authorizations"(accept?: Header<string>, org: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            credential_authorized_at?: string;
            credential_id?: string;
            credential_type?: string;
            login?: string;
            scopes?: Array<string>;
            token_last_eight?: string;
        }>;
    }];
    /**
     * Remove a credential authorization for an organization
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/credential-authorizations/{credential_id}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param credential_id - credential_id parameter
     * @return 204 - Empty response
     */
    "orgs/remove-credential-authorization"(accept?: Header<string>, org: string, credential_id: int64): [(code: 204) => {}];
    /**
     * List public events for an organization
     * @since 9.0.0
     * @http GET /orgs/{org}/events
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 418 - Response definition missing
     */
    "activity/list-public-events-for-org"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 418) => {
        isException: true;
    }];
    /**
     * List hooks
     * @since 9.0.0
     * @http GET /orgs/{org}/hooks
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-hooks"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active?: boolean;
            config?: {
                content_type?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            name?: string;
            ping_url?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a hook
     * @description Here's how you can create a hook that posts payloads in JSON format:
     * @since 9.0.0
     * @http POST /orgs/{org}/hooks
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 201 - response
     */
    "orgs/create-hook"(accept?: Header<string>, org: string, body?: Body<{
        active?: boolean;
        config: {
            content_type?: string;
            insecure_ssl?: string;
            secret?: string;
            url: string;
        };
        events?: Array<string>;
        name: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            name?: string;
            ping_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get single hook
     * @since 9.0.0
     * @http GET /orgs/{org}/hooks/{hook_id}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param hook_id - hook_id parameter
     * @return 200 - response
     */
    "orgs/get-hook"(accept?: Header<string>, org: string, hook_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            name?: string;
            ping_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a hook
     * @since 9.0.0
     * @http DELETE /orgs/{org}/hooks/{hook_id}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param hook_id - hook_id parameter
     * @return 204 - Empty response
     */
    "orgs/delete-hook"(accept?: Header<string>, org: string, hook_id: int64): [(code: 204) => {}];
    /**
     * Edit a hook
     * @since 9.0.0
     * @http PATCH /orgs/{org}/hooks/{hook_id}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param hook_id - hook_id parameter
     * @return 200 - response
     */
    "orgs/update-hook"(accept?: Header<string>, org: string, hook_id: int64, body?: Body<{
        active?: boolean;
        config?: {
            content_type?: string;
            insecure_ssl?: string;
            secret?: string;
            url: string;
        };
        events?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            name?: string;
            ping_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Ping a hook
     * @description This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.
     * @since 9.0.0
     * @http POST /orgs/{org}/hooks/{hook_id}/pings
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param hook_id - hook_id parameter
     * @return 204 - Empty response
     */
    "orgs/ping-hook"(accept?: Header<string>, org: string, hook_id: int64): [(code: 204) => {}];
    /**
     * Get an organization installation
     * @description Enables an authenticated GitHub App to find the organization's installation information.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @since 9.0.0
     * @http GET /orgs/{org}/installation
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @return 200 - response
     */
    "apps/get-org-installation"(accept: Header<string>, org: string): [(code: 200, mediaType: "application/json") => {
        body: {
            access_tokens_url?: string;
            account?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            app_id?: double;
            created_at?: string;
            events?: Array<string>;
            html_url?: string;
            id?: double;
            permissions?: {
                checks?: string;
                contents?: string;
                metadata?: string;
            };
            repositories_url?: string;
            repository_selection?: string;
            single_file_name?: string;
            target_id?: double;
            target_type?: string;
            updated_at?: string;
        };
    }];
    /**
     * List installations for an organization
     * @description Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
     * @since 9.0.0
     * @http GET /orgs/{org}/installations
     * @tag orgs
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-installations"(accept: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            installations?: Array<{
                access_tokens_url?: string;
                account?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                app_id?: double;
                created_at?: string;
                events?: Array<string>;
                html_url?: string;
                id?: double;
                permissions?: {
                    deployments?: string;
                    metadata?: string;
                    pull_requests?: string;
                    statuses?: string;
                };
                repositories_url?: string;
                repository_selection?: string;
                single_file_name?: string;
                target_id?: double;
                target_type?: string;
                updated_at?: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Get interaction restrictions for an organization
     * @description Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.
     * @since 9.0.0
     * @http GET /orgs/{org}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @return 200 - response
     */
    "interactions/get-restrictions-for-org"(accept: Header<string>, org: string): [(code: 200, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            limit?: string;
            origin?: string;
        };
    }];
    /**
     * Add or update interaction restrictions for an organization
     * @description Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.
     * @since 9.0.0
     * @http PUT /orgs/{org}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @return 200 - response
     */
    "interactions/add-or-update-restrictions-for-org"(accept: Header<string>, org: string, body?: Body<{
        limit: "existing_users" | "contributors_only" | "collaborators_only";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            limit?: string;
            origin?: string;
        };
    }];
    /**
     * Remove interaction restrictions for an organization
     * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @return 204 - Empty response
     */
    "interactions/remove-restrictions-for-org"(accept: Header<string>, org: string): [(code: 204) => {}];
    /**
     * List pending organization invitations
     * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     * @since 9.0.0
     * @http GET /orgs/{org}/invitations
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-pending-invitations"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            email?: string;
            id?: double;
            invitation_team_url?: string;
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            login?: string;
            role?: string;
            team_count?: double;
        }>;
    }];
    /**
     * Create organization invitation
     * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /orgs/{org}/invitations
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 201 - response
     */
    "orgs/create-invitation"(accept?: Header<string>, org: string, body?: Body<{
        email?: string;
        invitee_id?: int64;
        role?: "admin" | "direct_member" | "billing_manager";
        team_ids?: Array<int64>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            email?: string;
            id?: double;
            invitation_team_url?: string;
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            login?: string;
            role?: string;
            team_count?: double;
        };
    }];
    /**
     * List organization invitation teams
     * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     * @since 9.0.0
     * @http GET /orgs/{org}/invitations/{invitation_id}/teams
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param invitation_id - invitation_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-invitation-teams"(accept?: Header<string>, org: string, invitation_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * List all issues for a given organization assigned to the authenticated user
     * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     *
     *
     * @since 9.0.0
     * @http GET /orgs/{org}/issues
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param filter - Indicates which sorts of issues to return. Can be one of:
     * \* `assigned`: Issues assigned to you
     * \* `created`: Issues created by you
     * \* `mentioned`: Issues mentioning you
     * \* `subscribed`: Issues you're subscribed to updates for
     * \* `all`: All issues the authenticated user can see, regardless of participation or creation
     * @param state - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param labels - A list of comma separated label names. Example: `bug,ui,@high`
     * @param sort - What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param direction - The direction of the sort. Can be either `asc` or `desc`.
     * @param since - Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-for-org"(accept?: Header<string>, org: string, filter?: Query<"assigned" | "created" | "mentioned" | "subscribed" | "all">, state?: Query<"open" | "closed" | "all">, labels?: Query<string>, sort?: Query<"created" | "updated" | "comments">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Members list
     * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     *
     *
     * @since 9.0.0
     * @http GET /orgs/{org}/members
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param filter - Filter members returned in the list. Can be one of:
     * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
     * \* `all` - All members the authenticated user can see.
     * @param role - Filter members returned by their role. Can be one of:
     * \* `all` - All members of the organization, regardless of role.
     * \* `admin` - Organization owners.
     * \* `member` - Non-owner organization members.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     * @return 302 - Response if requester is not an organization member
     */
    "orgs/list-members"(accept?: Header<string>, org: string, filter?: Query<"2fa_disabled" | "all">, role?: Query<"all" | "admin" | "member">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }, (code: 302) => {}];
    /**
     * Check membership
     * @description Check if a user is, publicly or privately, a member of the organization.
     * @since 9.0.0
     * @http GET /orgs/{org}/members/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Response if requester is an organization member and user is a member
     * @return 302 - Response if requester is not an organization member
     * @return 404 - Response if requester is an organization member and user is not a member
     */
    "orgs/check-membership"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}, (code: 302) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Remove a member
     * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/members/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/remove-member"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * Get organization membership
     * @description In order to get a user's membership with an organization, the authenticated user must be an organization member.
     * @since 9.0.0
     * @http GET /orgs/{org}/memberships/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 200 - response
     */
    "orgs/get-membership"(accept?: Header<string>, org: string, username: string): [(code: 200, mediaType: "application/json") => {
        body: {
            organization?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            organization_url?: string;
            role?: string;
            state?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Add or update organization membership
     * @description Only authenticated organization owners can add a member to the organization or update the member's role.
     *
     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://developer.github.com/v3/orgs/members/#get-organization-membership) will be `pending` until they accept the invitation.
     *
     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
     *
     * **Rate limits**
     *
     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     * @since 9.0.0
     * @http PUT /orgs/{org}/memberships/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 200 - response
     */
    "orgs/add-or-update-membership"(accept?: Header<string>, org: string, username: string, body?: Body<{
        role?: "admin" | "member";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            organization?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            organization_url?: string;
            role?: string;
            state?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Remove organization membership
     * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
     *
     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/memberships/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/remove-membership"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * List organization migrations
     * @description Lists the most recent migrations.
     * @since 9.0.0
     * @http GET /orgs/{org}/migrations
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "migrations/list-for-org"(accept: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            exclude_attachments?: boolean;
            guid?: string;
            id?: double;
            lock_repositories?: boolean;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            state?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Start an organization migration
     * @description Initiates the generation of a migration archive.
     * @since 9.0.0
     * @http POST /orgs/{org}/migrations
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 201 - response
     */
    "migrations/start-for-org"(accept?: Header<string>, org: string, body?: Body<{
        exclude_attachments?: boolean;
        lock_repositories?: boolean;
        repositories: Array<string>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            exclude_attachments?: boolean;
            guid?: string;
            id?: double;
            lock_repositories?: boolean;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get the status of an organization migration
     * @description Fetches the status of a migration.
     *
     * The `state` of a migration can be one of the following values:
     *
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     * @since 9.0.0
     * @http GET /orgs/{org}/migrations/{migration_id}
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param migration_id - migration_id parameter
     * @return 200 - *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     */
    "migrations/get-status-for-org"(accept: Header<string>, org: string, migration_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            exclude_attachments?: boolean;
            guid?: string;
            id?: double;
            lock_repositories?: boolean;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Download an organization migration archive
     * @description Fetches the URL to a migration archive.
     *
     *
     * @since 9.0.0
     * @http GET /orgs/{org}/migrations/{migration_id}/archive
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param migration_id - migration_id parameter
     * @return 302 - response
     */
    "migrations/download-archive-for-org"(accept: Header<string>, org: string, migration_id: int64): [(code: 302) => {}];
    /**
     * Delete an organization migration archive
     * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/migrations/{migration_id}/archive
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param migration_id - migration_id parameter
     * @return 204 - Empty response
     */
    "migrations/delete-archive-for-org"(accept: Header<string>, org: string, migration_id: int64): [(code: 204) => {}];
    /**
     * Unlock an organization repository
     * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param migration_id - migration_id parameter
     * @param repo_name - repo_name parameter
     * @return 204 - Empty response
     */
    "migrations/unlock-repo-for-org"(accept: Header<string>, org: string, migration_id: int64, repo_name: string): [(code: 204) => {}];
    /**
     * List repositories in an organization migration
     * @description List all the repositories for this organization migration.
     * @since 9.0.0
     * @http GET /orgs/{org}/migrations/{migration_id}/repositories
     * @tag migrations
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param migration_id - migration_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "migrations/list-repos-for-org"(accept: Header<string>, org: string, migration_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>;
    }];
    /**
     * List outside collaborators
     * @description List all users who are outside collaborators of an organization.
     *
     *
     * @since 9.0.0
     * @http GET /orgs/{org}/outside_collaborators
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param filter - Filter the list of outside collaborators. Can be one of:
     * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
     * \* `all`: All outside collaborators.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-outside-collaborators"(accept?: Header<string>, org: string, filter?: Query<"2fa_disabled" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Convert member to outside collaborator
     * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
     * @since 9.0.0
     * @http PUT /orgs/{org}/outside_collaborators/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     * @return 403 - response
     */
    "orgs/convert-member-to-outside-collaborator"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}, (code: 403, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }];
    /**
     * Remove outside collaborator
     * @description Removing a user from this list will remove them from all the organization's repositories.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/outside_collaborators/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     * @return 422 - Response if user is a member of the organization
     */
    "orgs/remove-outside-collaborator"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}, (code: 422, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }];
    /**
     * List organization projects
     * @description Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     *
     * s
     * @since 9.0.0
     * @http GET /orgs/{org}/projects
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param state - Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "projects/list-for-org"(accept: Header<string>, org: string, state?: Query<"open" | "closed" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create an organization project
     * @description Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @since 9.0.0
     * @http POST /orgs/{org}/projects
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @return 201 - response
     */
    "projects/create-for-org"(accept: Header<string>, org: string, body?: Body<{
        body?: string;
        name: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Public members list
     * @description Members of an organization can choose to have their membership publicized or not.
     * @since 9.0.0
     * @http GET /orgs/{org}/public_members
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "orgs/list-public-members"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Check public membership
     * @since 9.0.0
     * @http GET /orgs/{org}/public_members/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Response if user is a public member
     * @return 404 - Response if user is not a public member
     */
    "orgs/check-public-membership"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Publicize a user's membership
     * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.)
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     * @since 9.0.0
     * @http PUT /orgs/{org}/public_members/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/publicize-membership"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * Conceal a user's membership
     * @since 9.0.0
     * @http DELETE /orgs/{org}/public_members/{username}
     * @tag orgs
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "orgs/conceal-membership"(accept?: Header<string>, org: string, username: string): [(code: 204) => {}];
    /**
     * List organization repositories
     * @description Lists repositories for the specified organization.
     * @since 9.0.0
     * @http GET /orgs/{org}/repos
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param type - Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.
     * @param sort - Can be one of `created`, `updated`, `pushed`, `full_name`.
     * @param direction - Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-for-org"(accept?: Header<string>, org: string, type?: Query<"all" | "public" | "private" | "forks" | "sources" | "member" | "internal">, sort?: Query<"created" | "updated" | "pushed" | "full_name">, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>;
    }];
    /**
     * Creates a new repository in the specified organization
     * @description Creates a new repository for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     * @since 9.0.0
     * @http POST /orgs/{org}/repos
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 201 - response
     */
    "repos/create-in-org"(accept?: Header<string>, org: string, body?: Body<{
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        auto_init?: boolean;
        delete_branch_on_merge?: boolean;
        description?: string;
        gitignore_template?: string;
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string;
        is_template?: boolean;
        license_template?: string;
        name: string;
        private?: boolean;
        team_id?: int64;
        visibility?: "public" | "private" | "visibility" | "internal";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            allow_merge_commit?: boolean;
            allow_rebase_merge?: boolean;
            allow_squash_merge?: boolean;
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        };
    }];
    /**
     * List IdP groups in an organization
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     *
     * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
     * @since 9.0.0
     * @http GET /orgs/{org}/team-sync/groups
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-id-p-groups-for-org"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            groups?: Array<{
                group_description: string;
                group_id: string;
                group_name: string;
            }>;
        };
    }];
    /**
     * List teams
     * @description Lists all teams in an organization that are visible to the authenticated user.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list"(accept?: Header<string>, org: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Create team
     * @description To create a team, the authenticated user must be a member or owner of `:org`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
     *
     * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)" in the GitHub Help documentation.
     * @since 9.0.0
     * @http POST /orgs/{org}/teams
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @return 201 - response
     */
    "teams/create"(accept?: Header<string>, org: string, body?: Body<{
        description?: string;
        maintainers?: Array<string>;
        name: string;
        parent_team_id?: int64;
        permission?: "pull" | "push" | "admin";
        privacy?: "secret" | "closed";
        repo_names?: Array<string>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            description?: string;
            html_url?: string;
            id?: double;
            members_count?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            organization?: {
                avatar_url?: string;
                blog?: string;
                company?: string;
                created_at?: string;
                description?: string;
                email?: string;
                events_url?: string;
                followers?: double;
                following?: double;
                has_organization_projects?: boolean;
                has_repository_projects?: boolean;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_verified?: boolean;
                issues_url?: string;
                location?: string;
                login?: string;
                members_url?: string;
                name?: string;
                node_id?: string;
                public_gists?: double;
                public_members_url?: string;
                public_repos?: double;
                repos_url?: string;
                type?: string;
                url?: string;
            };
            parent?: string;
            permission?: string;
            privacy?: string;
            repos_count?: double;
            repositories_url?: string;
            slug?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get team by name
     * @description Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 200 - response
     */
    "teams/get-by-name"(accept?: Header<string>, org: string, team_slug: string): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            description?: string;
            html_url?: string;
            id?: double;
            members_count?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            organization?: {
                avatar_url?: string;
                blog?: string;
                company?: string;
                created_at?: string;
                description?: string;
                email?: string;
                events_url?: string;
                followers?: double;
                following?: double;
                has_organization_projects?: boolean;
                has_repository_projects?: boolean;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_verified?: boolean;
                issues_url?: string;
                location?: string;
                login?: string;
                members_url?: string;
                name?: string;
                node_id?: string;
                public_gists?: double;
                public_members_url?: string;
                public_repos?: double;
                repos_url?: string;
                type?: string;
                url?: string;
            };
            parent?: string;
            permission?: string;
            privacy?: string;
            repos_count?: double;
            repositories_url?: string;
            slug?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete team
     * @description To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id`.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 204 - Empty response
     */
    "teams/delete-in-org"(accept?: Header<string>, org: string, team_slug: string): [(code: 204) => {}];
    /**
     * Edit team
     * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/:org_id/team/:team_id`.
     * @since 9.0.0
     * @http PATCH /orgs/{org}/teams/{team_slug}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 201 - response
     */
    "teams/update-in-org"(accept?: Header<string>, org: string, team_slug: string, body?: Body<{
        description?: string;
        name: string;
        parent_team_id?: int64;
        permission?: "pull" | "push" | "admin";
        privacy?: "secret" | "closed";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            description?: string;
            html_url?: string;
            id?: double;
            members_count?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            organization?: {
                avatar_url?: string;
                blog?: string;
                company?: string;
                created_at?: string;
                description?: string;
                email?: string;
                events_url?: string;
                followers?: double;
                following?: double;
                has_organization_projects?: boolean;
                has_repository_projects?: boolean;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_verified?: boolean;
                issues_url?: string;
                location?: string;
                login?: string;
                members_url?: string;
                name?: string;
                node_id?: string;
                public_gists?: double;
                public_members_url?: string;
                public_repos?: double;
                repos_url?: string;
                type?: string;
                url?: string;
            };
            parent?: string;
            permission?: string;
            privacy?: string;
            repos_count?: double;
            repositories_url?: string;
            slug?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List discussions
     * @description List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param direction - Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-discussions-in-org"(accept?: Header<string>, org: string, team_slug: string, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            comments_count?: double;
            comments_url?: string;
            created_at?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            pinned?: boolean;
            private?: boolean;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            team_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a discussion
     * @description Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions`.
     * @since 9.0.0
     * @http POST /orgs/{org}/teams/{team_slug}/discussions
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 201 - response
     */
    "teams/create-discussion-in-org"(accept?: Header<string>, org: string, team_slug: string, body?: Body<{
        body: string;
        private?: boolean;
        title: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            comments_count?: double;
            comments_url?: string;
            created_at?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            pinned?: boolean;
            private?: boolean;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            team_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a single discussion
     * @description Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @return 200 - response
     */
    "teams/get-discussion-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            comments_count?: double;
            comments_url?: string;
            created_at?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            pinned?: boolean;
            private?: boolean;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            team_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a discussion
     * @description Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number`.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @return 204 - Empty response
     */
    "teams/delete-discussion-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64): [(code: 204) => {}];
    /**
     * Edit a discussion
     * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/:org_id/team/:team_id/discussions/:discussion_number`.
     * @since 9.0.0
     * @http PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @return 200 - response
     */
    "teams/update-discussion-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, body?: Body<{
        body?: string;
        title?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            comments_count?: double;
            comments_url?: string;
            created_at?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            pinned?: boolean;
            private?: boolean;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            team_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List comments
     * @description List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param direction - Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-discussion-comments-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            created_at?: string;
            discussion_url?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a comment
     * @description Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments`.
     * @since 9.0.0
     * @http POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @return 201 - response
     */
    "teams/create-discussion-comment-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            created_at?: string;
            discussion_url?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a single comment
     * @description Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param comment_number - comment_number parameter
     * @return 200 - response
     */
    "teams/get-discussion-comment-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, comment_number: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            created_at?: string;
            discussion_url?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a comment
     * @description Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number`.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param comment_number - comment_number parameter
     * @return 204 - Empty response
     */
    "teams/delete-discussion-comment-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, comment_number: int64): [(code: 204) => {}];
    /**
     * Edit a comment
     * @description Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number`.
     * @since 9.0.0
     * @http PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param comment_number - comment_number parameter
     * @return 200 - response
     */
    "teams/update-discussion-comment-in-org"(accept?: Header<string>, org: string, team_slug: string, discussion_number: int64, comment_number: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            created_at?: string;
            discussion_url?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List reactions for a team discussion comment
     * @description List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param comment_number - comment_number parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-team-discussion-comment-in-org"(accept: Header<string>, org: string, team_slug: string, discussion_number: int64, comment_number: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for a team discussion comment
     * @description Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @since 9.0.0
     * @http POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param comment_number - comment_number parameter
     * @return 201 - response
     */
    "reactions/create-for-team-discussion-comment-in-org"(accept: Header<string>, org: string, team_slug: string, discussion_number: int64, comment_number: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List reactions for a team discussion
     * @description List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-team-discussion-in-org"(accept: Header<string>, org: string, team_slug: string, discussion_number: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for a team discussion
     * @description Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @since 9.0.0
     * @http POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param discussion_number - discussion_number parameter
     * @return 201 - response
     */
    "reactions/create-for-team-discussion-in-org"(accept: Header<string>, org: string, team_slug: string, discussion_number: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List pending team invitations
     * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/invitations`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/invitations
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-pending-invitations-in-org"(accept?: Header<string>, org: string, team_slug: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            email?: string;
            id?: double;
            invitation_team_url?: string;
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            login?: string;
            role?: string;
            team_count?: double;
        }>;
    }];
    /**
     * List team members
     * @description Team members will include the members of child teams.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/members
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param role - Filters members returned by their role in the team. Can be one of:
     * \* `member` - normal members of the team.
     * \* `maintainer` - team maintainers.
     * \* `all` - all members of the team.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-members-in-org"(accept?: Header<string>, org: string, team_slug: string, role?: Query<"member" | "maintainer" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Get team membership
     * @description Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/memberships/:username`.
     *
     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create team](https://developer.github.com/v3/teams#create-team).
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/memberships/{username}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param username - username parameter
     * @return 200 - response
     * @return 404 - Response if user has no team membership
     */
    "teams/get-membership-in-org"(accept?: Header<string>, org: string, team_slug: string, username: string): [(code: 200, mediaType: "application/json") => {
        body: {
            role?: string;
            state?: string;
            url?: string;
        };
    }, (code: 404) => {
        isException: true;
    }];
    /**
     * Add or update team membership
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/:org_id/team/:team_id/memberships/:username`.
     * @since 9.0.0
     * @http PUT /orgs/{org}/teams/{team_slug}/memberships/{username}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param username - username parameter
     * @return 200 - response
     * @return 403 - Response if team synchronization is set up
     * @return 422 - Response if you attempt to add an organization to a team
     */
    "teams/add-or-update-membership-in-org"(accept?: Header<string>, org: string, team_slug: string, username: string, body?: Body<{
        role?: "member" | "maintainer";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            role?: string;
            state?: string;
            url?: string;
        };
    }, (code: 403) => {
        isException: true;
    }, (code: 422, mediaType: "application/json") => {
        body: {
            errors?: Array<{
                code?: string;
                field?: string;
                resource?: string;
            }>;
            message?: string;
        };
        isException: true;
    }];
    /**
     * Remove team membership
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id/memberships/:username`.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param username - username parameter
     * @return 204 - Empty response
     * @return 403 - Response if team synchronization is set up
     */
    "teams/remove-membership-in-org"(accept?: Header<string>, org: string, team_slug: string, username: string): [(code: 204) => {}, (code: 403) => {
        isException: true;
    }];
    /**
     * List team projects
     * @description Lists the organization projects for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/projects`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/projects
     * @tag teams
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-projects-in-org"(accept: Header<string>, org: string, team_slug: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            organization_permission?: string;
            owner_url?: string;
            permissions?: {
                admin?: boolean;
                read?: boolean;
                write?: boolean;
            };
            private?: boolean;
            state?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Review a team project
     * @description Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/projects/:project_id`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @tag teams
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param project_id - project_id parameter
     * @return 200 - response
     * @return 404 - Response if project is not managed by this team
     */
    "teams/review-project-in-org"(accept: Header<string>, org: string, team_slug: string, project_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            organization_permission?: string;
            owner_url?: string;
            permissions?: {
                admin?: boolean;
                read?: boolean;
                write?: boolean;
            };
            private?: boolean;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }, (code: 404) => {
        isException: true;
    }];
    /**
     * Add or update team project
     * @description Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/:org_id/team/:team_id/projects/:project_id`.
     * @since 9.0.0
     * @http PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @tag teams
     * @param accept - This API is under preview and subject to change.
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param project_id - project_id parameter
     * @return 204 - Empty response
     * @return 403 - Response if the project is not owned by the organization
     */
    "teams/add-or-update-project-in-org"(accept: Header<string>, org: string, team_slug: string, project_id: int64, body?: Body<{
        permission?: "read" | "write" | "admin";
    }, "application/json">): [(code: 204) => {}, (code: 403, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }];
    /**
     * Remove team project
     * @description Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id/projects/:project_id`.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param project_id - project_id parameter
     * @return 204 - Empty response
     */
    "teams/remove-project-in-org"(accept?: Header<string>, org: string, team_slug: string, project_id: int64): [(code: 204) => {}];
    /**
     * List team repos
     * @description Lists a team's repositories visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/repos`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/repos
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "teams/list-repos-in-org"(accept?: Header<string>, org: string, team_slug: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>;
    }];
    /**
     * Check if a team manages a repository
     * @description Checks whether a team has `admin`, `push`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/repos/:owner/:repo`.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - Alternative response with repository permissions
     * @return 204 - Response if team has permission for the repository
     * @return 404 - Response if team does not have permission for the repository
     */
    "teams/check-manages-repo-in-org"(accept?: Header<string>, org: string, team_slug: string, owner: string, repo: string): [(code: 200, mediaType: "application/vnd.github.v3.repository+json") => {
        body: {
            allow_merge_commit?: boolean;
            allow_rebase_merge?: boolean;
            allow_squash_merge?: boolean;
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        };
    }, (code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Add or update team repository
     * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/:org_id/team/:team_id/repos/:owner/:repo`.
     * @since 9.0.0
     * @http PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "teams/add-or-update-repo-in-org"(accept?: Header<string>, org: string, team_slug: string, owner: string, repo: string, body?: Body<{
        permission?: "pull" | "push" | "admin";
    }, "application/json">): [(code: 204) => {}];
    /**
     * Remove team repository
     * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/:org_id/team/:team_id/repos/:owner/:repo`.
     * @since 9.0.0
     * @http DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "teams/remove-repo-in-org"(accept?: Header<string>, org: string, team_slug: string, owner: string, repo: string): [(code: 204) => {}];
    /**
     * List IdP groups for a team
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/team-sync/group-mappings`.
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 200 - response
     */
    "teams/list-id-p-groups-in-org"(accept?: Header<string>, org: string, team_slug: string): [(code: 200, mediaType: "application/json") => {
        body: {
            groups?: Array<{
                group_description: string;
                group_id: string;
                group_name: string;
            }>;
        };
    }];
    /**
     * Create or update IdP group connections
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/:org_id/team/:team_id/team-sync/group-mappings`.
     * @since 9.0.0
     * @http PATCH /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @return 200 - response
     */
    "teams/create-or-update-id-p-group-connections-in-org"(accept?: Header<string>, org: string, team_slug: string, body?: Body<{
        groups: Array<{
            group_description: string;
            group_id: string;
            group_name: string;
        }>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            groups?: {
                group_description?: string;
                group_id?: string;
                group_name?: string;
            };
        };
    }];
    /**
     * List child teams
     * @description Lists the child teams of the team requested by `:team_slug`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/teams`.
     *
     *
     * @since 9.0.0
     * @http GET /orgs/{org}/teams/{team_slug}/teams
     * @tag teams
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param org - org parameter
     * @param team_slug - team_slug parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - Response if child teams exist
     */
    "teams/list-child-in-org"(accept?: Header<string>, org: string, team_slug: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: {
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            };
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Get a project card
     * @since 9.0.0
     * @http GET /projects/columns/cards/{card_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param card_id - card_id parameter
     * @return 200 - response
     */
    "projects/get-card"(accept: Header<string>, card_id: int64): [(code: 200, mediaType: "application/vnd.github.inertia-preview+json") => {
        body: {
            archived?: boolean;
            column_url?: string;
            content_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            id?: double;
            node_id?: string;
            note?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a project card
     * @since 9.0.0
     * @http DELETE /projects/columns/cards/{card_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param card_id - card_id parameter
     * @return 204 - Empty response
     */
    "projects/delete-card"(accept: Header<string>, card_id: int64): [(code: 204) => {}];
    /**
     * Update a project card
     * @since 9.0.0
     * @http PATCH /projects/columns/cards/{card_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param card_id - card_id parameter
     * @return 200 - response
     */
    "projects/update-card"(accept: Header<string>, card_id: int64, body?: Body<{
        archived?: boolean;
        note?: string;
    }, "application/json">): [(code: 200, mediaType: "application/vnd.github.inertia-preview+json") => {
        body: {
            archived?: boolean;
            column_url?: string;
            content_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            id?: double;
            node_id?: string;
            note?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Move a project card
     * @since 9.0.0
     * @http POST /projects/columns/cards/{card_id}/moves
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param card_id - card_id parameter
     * @return 201 - response
     */
    "projects/move-card"(accept: Header<string>, card_id: int64, body?: Body<{
        column_id?: int64;
        position: string & RegularExpression<"^(top|bottom|after:\\d+)$">;
    }, "application/json">): [(code: 201) => {}];
    /**
     * Get a project column
     * @since 9.0.0
     * @http GET /projects/columns/{column_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @return 200 - response
     */
    "projects/get-column"(accept: Header<string>, column_id: int64): [(code: 200, mediaType: "application/vnd.github.inertia-preview+json") => {
        body: {
            cards_url?: string;
            created_at?: string;
            id?: double;
            name?: string;
            node_id?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a project column
     * @since 9.0.0
     * @http DELETE /projects/columns/{column_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @return 204 - Empty response
     */
    "projects/delete-column"(accept: Header<string>, column_id: int64): [(code: 204) => {}];
    /**
     * Update a project column
     * @since 9.0.0
     * @http PATCH /projects/columns/{column_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @return 200 - response
     */
    "projects/update-column"(accept: Header<string>, column_id: int64, body?: Body<{
        name: string;
    }, "application/json">): [(code: 200, mediaType: "application/vnd.github.inertia-preview+json") => {
        body: {
            cards_url?: string;
            created_at?: string;
            id?: double;
            name?: string;
            node_id?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List project cards
     * @since 9.0.0
     * @http GET /projects/columns/{column_id}/cards
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @param archived_state - Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "projects/list-cards"(accept: Header<string>, column_id: int64, archived_state?: Query<"all" | "archived" | "not_archived">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archived?: boolean;
            column_url?: string;
            content_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            id?: double;
            node_id?: string;
            note?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a project card
     * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     * @since 9.0.0
     * @http POST /projects/columns/{column_id}/cards
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @return 201 - response
     */
    "projects/create-card"(accept: Header<string>, column_id: int64, body?: Body<{
        content_id?: int64;
        content_type?: string;
        note?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            archived?: boolean;
            column_url?: string;
            content_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            id?: double;
            node_id?: string;
            note?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Move a project column
     * @since 9.0.0
     * @http POST /projects/columns/{column_id}/moves
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param column_id - column_id parameter
     * @return 201 - response
     */
    "projects/move-column"(accept: Header<string>, column_id: int64, body?: Body<{
        position: string & RegularExpression<"^(first|last|after:\\d+)$">;
    }, "application/json">): [(code: 201) => {}];
    /**
     * Get a project
     * @description Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @since 9.0.0
     * @http GET /projects/{project_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @return 200 - response
     */
    "projects/get"(accept: Header<string>, project_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a project
     * @description Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     * @since 9.0.0
     * @http DELETE /projects/{project_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @return 418 - Response definition missing
     */
    "projects/delete"(accept: Header<string>, project_id: int64): [(code: 418) => {
        isException: true;
    }];
    /**
     * Update a project
     * @description Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @since 9.0.0
     * @http PATCH /projects/{project_id}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @return 200 - response
     * @return 404 - Response if the authenticated user does not have access to the project
     */
    "projects/update"(accept: Header<string>, project_id: int64, body?: Body<{
        body?: string;
        name?: string;
        organization_permission?: string;
        private?: boolean;
        state?: "open" | "closed";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }, (code: 404) => {
        isException: true;
    }];
    /**
     * List collaborators
     * @description Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
     * @since 9.0.0
     * @http GET /projects/{project_id}/collaborators
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @param affiliation - Filters the collaborators by their affiliation. Can be one of:
     * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
     * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
     * \* `all`: All collaborators the authenticated user can see.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "projects/list-collaborators"(accept: Header<string>, project_id: int64, affiliation?: Query<"outside" | "direct" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Add user as a collaborator
     * @description Adds a collaborator to a an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
     * @since 9.0.0
     * @http PUT /projects/{project_id}/collaborators/{username}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "projects/add-collaborator"(accept: Header<string>, project_id: int64, username: string, body?: Body<{
        permission?: "read" | "write" | "admin";
    }, "application/json">): [(code: 204) => {}];
    /**
     * Remove user as a collaborator
     * @description Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
     * @since 9.0.0
     * @http DELETE /projects/{project_id}/collaborators/{username}
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "projects/remove-collaborator"(accept: Header<string>, project_id: int64, username: string): [(code: 204) => {}];
    /**
     * Review a user's permission level
     * @description Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
     * @since 9.0.0
     * @http GET /projects/{project_id}/collaborators/{username}/permission
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @param username - username parameter
     * @return 200 - response
     */
    "projects/review-user-permission-level"(accept: Header<string>, project_id: int64, username: string): [(code: 200, mediaType: "application/json") => {
        body: {
            permission?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List project columns
     * @since 9.0.0
     * @http GET /projects/{project_id}/columns
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "projects/list-columns"(accept: Header<string>, project_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            cards_url?: string;
            created_at?: string;
            id?: double;
            name?: string;
            node_id?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a project column
     * @since 9.0.0
     * @http POST /projects/{project_id}/columns
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param project_id - project_id parameter
     * @return 200 - response
     */
    "projects/create-column"(accept: Header<string>, project_id: int64, body?: Body<{
        name: string;
    }, "application/json">): [(code: 200, mediaType: "application/vnd.github.inertia-preview+json") => {
        body: {
            cards_url?: string;
            created_at?: string;
            id?: double;
            name?: string;
            node_id?: string;
            project_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get your current rate limit status
     * @description **Note:** Accessing this endpoint does not count against your REST API rate limit.
     *
     * **Understanding your rate limit status**
     *
     * The Search API has a [custom rate limit](https://developer.github.com/v3/search/#rate-limit), separate from the rate limit governing the rest of the REST API. The GraphQL API also has a [custom rate limit](https://developer.github.com/v4/guides/resource-limitations/#rate-limit) that is separate from and calculated differently than rate limits in the REST API.
     *
     * For these reasons, the Rate Limit API response categorizes your rate limit. Under `resources`, you'll see four objects:
     *
     * *   The `core` object provides your rate limit status for all non-search-related resources in the REST API.
     * *   The `search` object provides your rate limit status for the [Search API](https://developer.github.com/v3/search/).
     * *   The `graphql` object provides your rate limit status for the [GraphQL API](https://developer.github.com/v4/).
     * *   The `integration_manifest` object provides your rate limit status for the [GitHub App Manifest code conversion](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration) endpoint.
     *
     * For more information on the headers and values in the rate limit response, see "[Rate limiting](https://developer.github.com/v3/#rate-limiting)."
     *
     * The `rate` object (shown at the bottom of the response above) is deprecated.
     *
     * If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
     * @since 9.0.0
     * @http GET /rate_limit
     * @tag rate-limit
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @return 200 - response
     */
    "rate-limit/get"(accept?: Header<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            rate?: {
                limit?: double;
                remaining?: double;
                reset?: double;
            };
            resources?: {
                core?: {
                    limit?: double;
                    remaining?: double;
                    reset?: double;
                };
                graphql?: {
                    limit?: double;
                    remaining?: double;
                    reset?: double;
                };
                integration_manifest?: {
                    limit?: double;
                    remaining?: double;
                    reset?: double;
                };
                search?: {
                    limit?: double;
                    remaining?: double;
                    reset?: double;
                };
            };
        };
    }];
    /**
     * Delete a reaction
     * @description OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).
     * @since 9.0.0
     * @http DELETE /reactions/{reaction_id}
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param reaction_id - reaction_id parameter
     * @return 204 - Empty response
     */
    "reactions/delete"(accept: Header<string>, reaction_id: int64): [(code: 204) => {}];
    /**
     * Get
     * @description The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
     */
    "repos/get"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            allow_merge_commit?: boolean;
            allow_rebase_merge?: boolean;
            allow_squash_merge?: boolean;
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            organization?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            parent?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            source?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        };
    }];
    /**
     * Delete a repository
     * @description Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
     *
     * If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     * @return 403 - If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
     */
    "repos/delete"(accept?: Header<string>, owner: string, repo: string): [(code: 204) => {}, (code: 403, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }];
    /**
     * Edit
     * @description **Note**: To edit a repository's topics, use the [`topics` endpoint](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository).
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/update"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        archived?: boolean;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        description?: string;
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string;
        is_template?: boolean;
        name?: string;
        private?: boolean;
        visibility?: "public" | "private" | "visibility" | "internal";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            allow_merge_commit?: boolean;
            allow_rebase_merge?: boolean;
            allow_squash_merge?: boolean;
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            organization?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            parent?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            source?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        };
    }];
    /**
     * Get an artifact
     * @description Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param artifact_id - artifact_id parameter
     * @return 200 - response
     */
    "actions/get-artifact"(accept?: Header<string>, owner: string, repo: string, artifact_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            archive_download_url?: string;
            created_at?: string;
            expired?: string;
            expires_at?: string;
            id?: double;
            name?: string;
            node_id?: string;
            size_in_bytes?: double;
        };
    }];
    /**
     * Delete an artifact
     * @description Deletes an artifact for a workflow run. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param artifact_id - artifact_id parameter
     * @return 204 - Empty response
     */
    "actions/delete-artifact"(accept?: Header<string>, owner: string, repo: string, artifact_id: int64): [(code: 204) => {}];
    /**
     * Download an artifact
     * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     *
     * Call this endpoint using the `-v` flag, which enables verbose output and allows you to see the download URL in the header. To download the file into the current working directory, specify the filename using the `-o` flag.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param artifact_id - artifact_id parameter
     * @param archive_format - archive_format parameter
     * @return 302 - response
     */
    "actions/download-artifact"(accept?: Header<string>, owner: string, repo: string, artifact_id: int64, archive_format: string): [(code: 302) => {}];
    /**
     * Get a workflow job
     * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/jobs/{job_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param job_id - job_id parameter
     * @return 202 - response
     */
    "actions/get-workflow-job"(accept?: Header<string>, owner: string, repo: string, job_id: int64): [(code: 202, mediaType: "application/json") => {
        body: {
            check_run_url?: string;
            completed_at?: string;
            conclusion?: string;
            head_sha?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            run_id?: double;
            run_url?: string;
            started_at?: string;
            status?: string;
            steps?: Array<{
                completed_at: string;
                conclusion: string;
                name: string;
                number: double;
                started_at: string;
                status: string;
            }>;
            url?: string;
        };
    }];
    /**
     * List workflow job logs
     * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     *
     * Call this endpoint using the `-v` flag, which enables verbose output and allows you to see the download URL in the header. To download the file into the current working directory, specify the filename using the `-o` flag.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param job_id - job_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 302 - response
     */
    "actions/list-workflow-job-logs"(accept?: Header<string>, owner: string, repo: string, job_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 302) => {}];
    /**
     * List self-hosted runners for a repository
     * @description Lists all self-hosted runners for a repository. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runners
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-self-hosted-runners-for-repo"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<Array<{
            id?: double;
            name?: string;
            os?: string;
            status?: string;
        }>>;
    }];
    /**
     * List downloads for the self-hosted runner application
     * @description Lists binaries for the self-hosted runner application that you can download and run. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runners/downloads
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "actions/list-downloads-for-self-hosted-runner-application"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            architecture?: string;
            download_url?: string;
            filename?: string;
            os?: string;
        }>;
    }];
    /**
     * Create a registration token
     * @description Returns a token that you can pass to the `config` script. The token expires after one hour. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     *
     * Configure your self-hosted runner, replacing TOKEN with the registration token provided by this endpoint.
     *
     *
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/actions/runners/registration-token
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "actions/create-registration-token"(accept?: Header<string>, owner: string, repo: string): [(code: 201, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            token?: string;
        };
    }];
    /**
     * Create a remove token
     * @description Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     *
     * Remove your self-hosted runner from a repository, replacing TOKEN with the remove token provided by this endpoint.
     *
     *
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/actions/runners/remove-token
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "actions/create-remove-token"(accept?: Header<string>, owner: string, repo: string): [(code: 201, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            token?: string;
        };
    }];
    /**
     * Get a self-hosted runner
     * @description Gets a specific self-hosted runner. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runners/{runner_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param runner_id - runner_id parameter
     * @return 200 - response
     */
    "actions/get-self-hosted-runner"(accept?: Header<string>, owner: string, repo: string, runner_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            id?: double;
            name?: string;
            os?: string;
            status?: string;
        };
    }];
    /**
     * Remove a self-hosted runner
     * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. Anyone with admin access to the repository can use this endpoint. GitHub Apps must have the `administration` permission to use this endpoint.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param runner_id - runner_id parameter
     * @return 204 - Empty response
     */
    "actions/remove-self-hosted-runner"(accept?: Header<string>, owner: string, repo: string, runner_id: int64): [(code: 204) => {}];
    /**
     * List repository workflow runs
     * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runs
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param actor - Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param branch - Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param event - Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)" in the GitHub Help documentation.
     * @param status - Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in "[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-repo-workflow-runs"(accept?: Header<string>, owner: string, repo: string, actor?: Query<string>, branch?: Query<string>, event?: Query<string>, status?: Query<"completed" | "status" | "conclusion">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            total_count?: double;
            workflow_runs?: Array<{
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_url?: string;
                conclusion?: string;
                created_at?: string;
                event?: string;
                head_branch?: string;
                head_commit?: {
                    author?: {
                        email?: string;
                        name?: string;
                    };
                    committer?: {
                        email?: string;
                        name?: string;
                    };
                    id?: string;
                    message?: string;
                    timestamp?: string;
                    tree_id?: string;
                };
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha?: string;
                html_url?: string;
                id?: double;
                jobs_url?: string;
                logs_url?: string;
                node_id?: string;
                pull_requests?: Array<any>;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    ssh_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_number?: double;
                status?: string;
                updated_at?: string;
                url?: string;
                workflow_url?: string;
            }>;
        };
    }];
    /**
     * Get a workflow run
     * @description Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runs/{run_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @return 200 - response
     */
    "actions/get-workflow-run"(accept?: Header<string>, owner: string, repo: string, run_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            artifacts_url?: string;
            cancel_url?: string;
            check_suite_url?: string;
            conclusion?: string;
            created_at?: string;
            event?: string;
            head_branch?: string;
            head_commit?: {
                author?: {
                    email?: string;
                    name?: string;
                };
                committer?: {
                    email?: string;
                    name?: string;
                };
                id?: string;
                message?: string;
                timestamp?: string;
                tree_id?: string;
            };
            head_repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            head_sha?: string;
            html_url?: string;
            id?: double;
            jobs_url?: string;
            logs_url?: string;
            node_id?: string;
            pull_requests?: Array<any>;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            rerun_url?: string;
            run_number?: double;
            status?: string;
            updated_at?: string;
            url?: string;
            workflow_url?: string;
        };
    }];
    /**
     * List workflow run artifacts
     * @description Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-workflow-run-artifacts"(accept?: Header<string>, owner: string, repo: string, run_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            artifacts?: Array<{
                archive_download_url: string;
                created_at: string;
                expired: string;
                expires_at: string;
                id: double;
                name: string;
                node_id: string;
                size_in_bytes: double;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Cancel a workflow run
     * @description Cancels a workflow run using its `id`. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @return 202 - response
     */
    "actions/cancel-workflow-run"(accept?: Header<string>, owner: string, repo: string, run_id: int64): [(code: 202) => {}];
    /**
     * List jobs for a workflow run
     * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-jobs-for-workflow-run"(accept?: Header<string>, owner: string, repo: string, run_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            jobs?: Array<{
                check_run_url?: string;
                completed_at?: string;
                conclusion?: string;
                head_sha?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                run_id?: double;
                run_url?: string;
                started_at?: string;
                status?: string;
                steps?: Array<{
                    completed_at: string;
                    conclusion: string;
                    name: string;
                    number: double;
                    started_at: string;
                    status: string;
                }>;
                url?: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * List workflow run logs
     * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     *
     * Call this endpoint using the `-v` flag, which enables verbose output and allows you to see the download URL in the header. To download the file into the current working directory, specify the filename using the `-o` flag.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 302 - response
     */
    "actions/list-workflow-run-logs"(accept?: Header<string>, owner: string, repo: string, run_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 302) => {}];
    /**
     * Re-run a workflow
     * @description Re-runs your workflow run using its `id`. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param run_id - run_id parameter
     * @return 201 - response
     */
    "actions/re-run-workflow"(accept?: Header<string>, owner: string, repo: string, run_id: int64): [(code: 201) => {}];
    /**
     * List secrets for a repository
     * @description Lists all secrets available in a repository without revealing their encrypted values. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `secrets` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/secrets
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-secrets-for-repo"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            secrets?: Array<{
                created_at: string;
                name: string;
                updated_at: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Get your public key
     * @description Gets your public key, which you must store. You need your public key to use other secrets endpoints. Use the returned `key` to encrypt your secrets. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `secrets` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/secrets/public-key
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "actions/get-public-key"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            key?: string;
            key_id?: string;
        };
    }];
    /**
     * Get a secret
     * @description Gets a single secret without revealing its encrypted value. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `secrets` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/secrets/{name}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/get-secret"(accept?: Header<string>, owner: string, repo: string, name: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            name?: string;
            updated_at?: string;
        };
    }];
    /**
     * Create or update a secret for a repository
     * @description Creates or updates a secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `secrets` permission to use this endpoint.
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/mastahyeti/tweetsodium) library.
     *
     *
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     *
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     *
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     *
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/actions/secrets/{name}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @return 418 - Response definition missing
     */
    "actions/create-or-update-secret-for-repo"(accept?: Header<string>, owner: string, repo: string, name: string, body?: Body<{
        encrypted_value?: string;
        key_id?: string;
    }, "application/json">): [(code: 418) => {
        isException: true;
    }];
    /**
     * Delete a secret from a repository
     * @description Deletes a secret in a repository using the secret name. Anyone with write access to the repository can use this endpoint. GitHub Apps must have the `secrets` permission to use this endpoint.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/actions/secrets/{name}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @return 204 - Empty response
     */
    "actions/delete-secret-from-repo"(accept?: Header<string>, owner: string, repo: string, name: string): [(code: 204) => {}];
    /**
     * List repository workflows
     * @description Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/workflows
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-repo-workflows"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            total_count?: double;
            workflows?: Array<{
                badge_url: string;
                created_at: string;
                html_url: string;
                id: double;
                name: string;
                node_id: string;
                path: string;
                state: string;
                updated_at: string;
                url: string;
            }>;
        };
    }];
    /**
     * Get a workflow
     * @description Gets a specific workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. Anyone with read access to the repository can use this endpoint. GitHub Apps must have the `actions` permission to use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param workflow_id - workflow_id parameter
     * @return 200 - response
     */
    "actions/get-workflow"(accept?: Header<string>, owner: string, repo: string, workflow_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            badge_url?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            path?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List workflow runs
     * @description List all workflow runs for a workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).
     *
     * Anyone with read access to the repository can use this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
     * @tag actions
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param workflow_id - workflow_id parameter
     * @param actor - Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param branch - Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param event - Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)" in the GitHub Help documentation.
     * @param status - Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in "[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "actions/list-workflow-runs"(accept?: Header<string>, owner: string, repo: string, workflow_id: int64, actor?: Query<string>, branch?: Query<string>, event?: Query<string>, status?: Query<"completed" | "status" | "conclusion">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            total_count?: double;
            workflow_runs?: Array<{
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_url?: string;
                conclusion?: string;
                created_at?: string;
                event?: string;
                head_branch?: string;
                head_commit?: {
                    author?: {
                        email?: string;
                        name?: string;
                    };
                    committer?: {
                        email?: string;
                        name?: string;
                    };
                    id?: string;
                    message?: string;
                    timestamp?: string;
                    tree_id?: string;
                };
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha?: string;
                html_url?: string;
                id?: double;
                jobs_url?: string;
                logs_url?: string;
                node_id?: string;
                pull_requests?: Array<any>;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    ssh_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_number?: double;
                status?: string;
                updated_at?: string;
                url?: string;
                workflow_url?: string;
            }>;
        };
    }];
    /**
     * List assignees
     * @description Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/assignees
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-assignees"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Check assignee
     * @description Checks if a user has permission to be assigned to an issue in this repository.
     *
     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     *
     * Otherwise a `404` status code is returned.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/assignees/{assignee}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param assignee - assignee parameter
     * @return 204 - If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     * @return 404 - Otherwise a `404` status code is returned.
     */
    "issues/check-assignee"(accept?: Header<string>, owner: string, repo: string, assignee: string): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Enable automated security fixes
     * @description Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)" in the GitHub Help documentation.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/automated-security-fixes
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "repos/enable-automated-security-fixes"(accept: Header<string>, owner: string, repo: string): [(code: 204) => {}];
    /**
     * Disable automated security fixes
     * @description Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)" in the GitHub Help documentation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/automated-security-fixes
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "repos/disable-automated-security-fixes"(accept: Header<string>, owner: string, repo: string): [(code: 204) => {}];
    /**
     * List branches
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param protected - Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-branches"(accept?: Header<string>, owner: string, repo: string, protected?: Query<boolean>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            commit?: {
                sha?: string;
                url?: string;
            };
            name?: string;
            protected?: boolean;
            protection?: {
                enabled?: boolean;
                required_status_checks?: {
                    contexts?: Array<string>;
                    enforcement_level?: string;
                };
            };
            protection_url?: string;
        }>;
    }];
    /**
     * Get branch
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-branch"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: string;
                self?: string;
            };
            commit?: {
                author?: {
                    avatar_url?: string;
                    gravatar_id?: string;
                    id?: double;
                    login?: string;
                    url?: string;
                };
                commit?: {
                    author?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    committer?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    message?: string;
                    tree?: {
                        sha?: string;
                        url?: string;
                    };
                    url?: string;
                    verification?: {
                        payload?: string;
                        reason?: string;
                        signature?: string;
                        verified?: boolean;
                    };
                };
                committer?: {
                    avatar_url?: string;
                    gravatar_id?: string;
                    id?: double;
                    login?: string;
                    url?: string;
                };
                node_id?: string;
                parents?: Array<{
                    sha: string;
                    url: string;
                }>;
                sha?: string;
                url?: string;
            };
            name?: string;
            protected?: boolean;
            protection?: {
                enabled?: boolean;
                required_status_checks?: {
                    contexts?: Array<string>;
                    enforcement_level?: string;
                };
            };
            protection_url?: string;
        };
    }];
    /**
     * Get branch protection
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-branch-protection"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            allow_deletions?: {
                enabled?: boolean;
            };
            allow_force_pushes?: {
                enabled?: boolean;
            };
            enforce_admins?: {
                enabled?: boolean;
                url?: string;
            };
            required_linear_history?: {
                enabled?: boolean;
            };
            required_pull_request_reviews?: {
                dismiss_stale_reviews?: boolean;
                dismissal_restrictions?: {
                    teams?: Array<{
                        description?: string;
                        html_url?: string;
                        id?: double;
                        members_url?: string;
                        name?: string;
                        node_id?: string;
                        parent?: string;
                        permission?: string;
                        privacy?: string;
                        repositories_url?: string;
                        slug?: string;
                        url?: string;
                    }>;
                    teams_url?: string;
                    url?: string;
                    users?: Array<{
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    }>;
                    users_url?: string;
                };
                require_code_owner_reviews?: boolean;
                required_approving_review_count?: double;
                url?: string;
            };
            required_status_checks?: {
                contexts?: Array<string>;
                contexts_url?: string;
                strict?: boolean;
                url?: string;
            };
            restrictions?: {
                apps?: Array<{
                    created_at?: string;
                    description?: string;
                    events?: Array<string>;
                    external_url?: string;
                    html_url?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    owner?: {
                        avatar_url?: string;
                        description?: string;
                        events_url?: string;
                        hooks_url?: string;
                        id?: double;
                        issues_url?: string;
                        login?: string;
                        members_url?: string;
                        node_id?: string;
                        public_members_url?: string;
                        repos_url?: string;
                        url?: string;
                    };
                    permissions?: {
                        contents?: string;
                        issues?: string;
                        metadata?: string;
                        single_file?: string;
                    };
                    slug?: string;
                    updated_at?: string;
                }>;
                apps_url?: string;
                teams?: Array<{
                    description?: string;
                    html_url?: string;
                    id?: double;
                    members_url?: string;
                    name?: string;
                    node_id?: string;
                    parent?: string;
                    permission?: string;
                    privacy?: string;
                    repositories_url?: string;
                    slug?: string;
                    url?: string;
                }>;
                teams_url?: string;
                url?: string;
                users?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                users_url?: string;
            };
            url?: string;
        };
    }];
    /**
     * Update branch protection
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Protecting a branch requires admin or owner permissions to the repository.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     *
     * **Note**: The list of users, apps, and teams in total is limited to 100 items.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/branches/{branch}/protection
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/update-branch-protection"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<{
        allow_deletions?: boolean;
        allow_force_pushes?: boolean | null;
        enforce_admins: boolean | null;
        required_linear_history?: boolean;
        required_pull_request_reviews: {
            dismiss_stale_reviews?: boolean;
            dismissal_restrictions?: {
                teams?: Array<string>;
                users?: Array<string>;
            };
            require_code_owner_reviews?: boolean;
            required_approving_review_count?: int64;
        } | null;
        required_status_checks: {
            contexts: Array<string>;
            strict: boolean;
        } | null;
        restrictions: {
            apps?: Array<string>;
            teams: Array<string>;
            users: Array<string>;
        } | null;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            allow_deletions?: {
                enabled?: boolean;
            };
            allow_force_pushes?: {
                enabled?: boolean;
            };
            enforce_admins?: {
                enabled?: boolean;
                url?: string;
            };
            required_linear_history?: {
                enabled?: boolean;
            };
            required_pull_request_reviews?: {
                dismiss_stale_reviews?: boolean;
                dismissal_restrictions?: {
                    teams?: Array<{
                        description?: string;
                        html_url?: string;
                        id?: double;
                        members_url?: string;
                        name?: string;
                        node_id?: string;
                        parent?: string;
                        permission?: string;
                        privacy?: string;
                        repositories_url?: string;
                        slug?: string;
                        url?: string;
                    }>;
                    teams_url?: string;
                    url?: string;
                    users?: Array<{
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    }>;
                    users_url?: string;
                };
                require_code_owner_reviews?: boolean;
                required_approving_review_count?: double;
                url?: string;
            };
            required_status_checks?: {
                contexts?: Array<string>;
                contexts_url?: string;
                strict?: boolean;
                url?: string;
            };
            restrictions?: {
                apps?: Array<{
                    created_at?: string;
                    description?: string;
                    events?: Array<string>;
                    external_url?: string;
                    html_url?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    owner?: {
                        avatar_url?: string;
                        description?: string;
                        events_url?: string;
                        hooks_url?: string;
                        id?: double;
                        issues_url?: string;
                        login?: string;
                        members_url?: string;
                        node_id?: string;
                        public_members_url?: string;
                        repos_url?: string;
                        url?: string;
                    };
                    permissions?: {
                        contents?: string;
                        issues?: string;
                        metadata?: string;
                        single_file?: string;
                    };
                    slug?: string;
                    updated_at?: string;
                }>;
                apps_url?: string;
                teams?: Array<{
                    description?: string;
                    html_url?: string;
                    id?: double;
                    members_url?: string;
                    name?: string;
                    node_id?: string;
                    parent?: string;
                    permission?: string;
                    privacy?: string;
                    repositories_url?: string;
                    slug?: string;
                    url?: string;
                }>;
                teams_url?: string;
                url?: string;
                users?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                users_url?: string;
            };
            url?: string;
        };
    }];
    /**
     * Remove branch protection
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 204 - Empty response
     */
    "repos/remove-branch-protection"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 204) => {}];
    /**
     * Get admin enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-protected-branch-admin-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            enabled?: boolean;
            url?: string;
        };
    }];
    /**
     * Add admin enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-admin-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            enabled?: boolean;
            url?: string;
        };
    }];
    /**
     * Remove admin enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 418 - Response definition missing
     */
    "repos/remove-protected-branch-admin-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 418) => {
        isException: true;
    }];
    /**
     * Get pull request review enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-protected-branch-pull-request-review-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/vnd.github.luke-cage-preview+json") => {
        body: {
            dismiss_stale_reviews?: boolean;
            dismissal_restrictions?: {
                teams?: Array<{
                    description?: string;
                    html_url?: string;
                    id?: double;
                    members_url?: string;
                    name?: string;
                    node_id?: string;
                    parent?: string;
                    permission?: string;
                    privacy?: string;
                    repositories_url?: string;
                    slug?: string;
                    url?: string;
                }>;
                teams_url?: string;
                url?: string;
                users?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                users_url?: string;
            };
            require_code_owner_reviews?: boolean;
            required_approving_review_count?: double;
            url?: string;
        };
    }];
    /**
     * Remove pull request review enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 418 - Response definition missing
     */
    "repos/remove-protected-branch-pull-request-review-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 418) => {
        isException: true;
    }];
    /**
     * Update pull request review enforcement of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/update-protected-branch-pull-request-review-enforcement"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<{
        dismiss_stale_reviews?: boolean;
        dismissal_restrictions?: {
            teams?: Array<string>;
            users?: Array<string>;
        };
        require_code_owner_reviews?: boolean;
        required_approving_review_count?: int64;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            dismiss_stale_reviews?: boolean;
            dismissal_restrictions?: {
                teams?: Array<{
                    description?: string;
                    html_url?: string;
                    id?: double;
                    members_url?: string;
                    name?: string;
                    node_id?: string;
                    parent?: string;
                    permission?: string;
                    privacy?: string;
                    repositories_url?: string;
                    slug?: string;
                    url?: string;
                }>;
                teams_url?: string;
                url?: string;
                users?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                users_url?: string;
            };
            require_code_owner_reviews?: boolean;
            required_approving_review_count?: double;
            url?: string;
        };
    }];
    /**
     * Get required signatures of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
     *
     * **Note**: You must enable branch protection to require signed commits.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-protected-branch-required-signatures"(accept: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            enabled?: boolean;
            url?: string;
        };
    }];
    /**
     * Add required signatures of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-required-signatures"(accept: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            enabled?: boolean;
            url?: string;
        };
    }];
    /**
     * Remove required signatures of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 418 - Response definition missing
     */
    "repos/remove-protected-branch-required-signatures"(accept: Header<string>, owner: string, repo: string, branch: string): [(code: 418) => {
        isException: true;
    }];
    /**
     * Get required status checks of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-protected-branch-required-status-checks"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            contexts?: Array<string>;
            contexts_url?: string;
            strict?: boolean;
            url?: string;
        };
    }];
    /**
     * Remove required status checks of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 418 - Response definition missing
     */
    "repos/remove-protected-branch-required-status-checks"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 418) => {
        isException: true;
    }];
    /**
     * Update required status checks of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/update-protected-branch-required-status-checks"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<{
        contexts?: Array<string>;
        strict?: boolean;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            contexts?: Array<string>;
            contexts_url?: string;
            strict?: boolean;
            url?: string;
        };
    }];
    /**
     * List required status checks contexts of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/list-protected-branch-required-status-checks-contexts"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: Array<string>;
    }];
    /**
     * Replace required status checks contexts of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/replace-protected-branch-required-status-checks-contexts"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<string>;
    }];
    /**
     * Add required status checks contexts of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-required-status-checks-contexts"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<string>;
    }];
    /**
     * Remove required status checks contexts of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/remove-protected-branch-required-status-checks-contexts"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<string>;
    }];
    /**
     * Get restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists who has access to this protected branch. {{#note}}
     *
     * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-protected-branch-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: {
            apps?: Array<{
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            }>;
            apps_url?: string;
            teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            teams_url?: string;
            url?: string;
            users?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            users_url?: string;
        };
    }];
    /**
     * Remove restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Disables the ability to restrict who can push to this branch.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 418 - Response definition missing
     */
    "repos/remove-protected-branch-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 418) => {
        isException: true;
    }];
    /**
     * Get apps with access to protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-apps-with-access-to-protected-branch"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        }>;
    }];
    /**
     * Replace app restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/replace-protected-branch-app-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        }>;
    }];
    /**
     * Add app restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-app-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        }>;
    }];
    /**
     * Remove app restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/remove-protected-branch-app-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            description?: string;
            events?: Array<string>;
            external_url?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            permissions?: {
                contents?: string;
                issues?: string;
                metadata?: string;
                single_file?: string;
            };
            slug?: string;
            updated_at?: string;
        }>;
    }];
    /**
     * Get teams with access to protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the teams who have push access to this branch. The list includes child teams.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-teams-with-access-to-protected-branch"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Replace team restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/replace-protected-branch-team-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Add team restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified teams push access for this branch. You can also give push access to child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-team-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Remove team restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
     *
     * | Type    | Description                                                                                                                                         |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/remove-protected-branch-team-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>;
    }];
    /**
     * Get users with access to protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the people who have push access to this branch.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/get-users-with-access-to-protected-branch"(accept?: Header<string>, owner: string, repo: string, branch: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Replace user restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/replace-protected-branch-user-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Add user restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified people push access for this branch.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/add-protected-branch-user-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Remove user restrictions of protected branch
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a user to push to this branch.
     *
     * | Type    | Description                                                                                                                                   |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param branch - branch parameter
     * @return 200 - response
     */
    "repos/remove-protected-branch-user-restrictions"(accept?: Header<string>, owner: string, repo: string, branch: string, body?: Body<Array<string>, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a check run
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/check-runs
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "checks/create"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        actions?: Array<{
            description: string;
            identifier: string;
            label: string;
        }>;
        completed_at?: string;
        conclusion?: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required";
        details_url?: string;
        external_id?: string;
        head_sha: string;
        name: string;
        output?: {
            annotations?: Array<{
                annotation_level: "notice" | "warning" | "failure";
                end_column?: int64;
                end_line: int64;
                message: string;
                path: string;
                raw_details?: string;
                start_column?: int64;
                start_line: int64;
                title?: string;
            }>;
            images?: Array<{
                alt: string;
                caption?: string;
                image_url: string;
            }>;
            summary: string;
            text?: string;
            title: string;
        };
        started_at?: string;
        status?: "queued" | "in_progress" | "completed";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            app?: {
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            };
            check_suite?: {
                id?: double;
            };
            completed_at?: string;
            conclusion?: string;
            details_url?: string;
            external_id?: string;
            head_sha?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            output?: {
                summary?: string;
                text?: string;
                title?: string;
            };
            pull_requests?: Array<{
                base?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                head?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                id?: double;
                number?: double;
                url?: string;
            }>;
            started_at?: string;
            status?: string;
            url?: string;
        };
    }];
    /**
     * Get a single check run
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/check-runs/{check_run_id}
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_run_id - check_run_id parameter
     * @return 200 - response
     */
    "checks/get"(accept: Header<string>, owner: string, repo: string, check_run_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            };
            check_suite?: {
                id?: double;
            };
            completed_at?: string;
            conclusion?: string;
            details_url?: string;
            external_id?: string;
            head_sha?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            output?: {
                annotations_count?: double;
                annotations_url?: string;
                summary?: string;
                text?: string;
                title?: string;
            };
            pull_requests?: Array<{
                base?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                head?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                id?: double;
                number?: double;
                url?: string;
            }>;
            started_at?: string;
            status?: string;
            url?: string;
        };
    }];
    /**
     * Update a check run
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_run_id - check_run_id parameter
     * @return 200 - response
     */
    "checks/update"(accept: Header<string>, owner: string, repo: string, check_run_id: int64, body?: Body<{
        actions?: Array<{
            description: string;
            identifier: string;
            label: string;
        }>;
        completed_at?: string;
        conclusion?: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required";
        details_url?: string;
        external_id?: string;
        name?: string;
        output?: {
            annotations?: Array<{
                annotation_level: "notice" | "warning" | "failure";
                end_column?: int64;
                end_line: int64;
                message: string;
                path: string;
                raw_details?: string;
                start_column?: int64;
                start_line: int64;
                title?: string;
            }>;
            images?: Array<{
                alt: string;
                caption?: string;
                image_url: string;
            }>;
            summary: string;
            text?: string;
            title?: string;
        };
        started_at?: string;
        status?: "queued" | "in_progress" | "completed";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            app?: {
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            };
            check_suite?: {
                id?: double;
            };
            completed_at?: string;
            conclusion?: string;
            details_url?: string;
            external_id?: string;
            head_sha?: string;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            output?: {
                annotations_count?: double;
                annotations_url?: string;
                summary?: string;
                text?: string;
                title?: string;
            };
            pull_requests?: Array<{
                base?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                head?: {
                    ref?: string;
                    repo?: {
                        id?: double;
                        name?: string;
                        url?: string;
                    };
                    sha?: string;
                };
                id?: double;
                number?: double;
                url?: string;
            }>;
            started_at?: string;
            status?: string;
            url?: string;
        };
    }];
    /**
     * List annotations for a check run
     * @description Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_run_id - check_run_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "checks/list-annotations"(accept: Header<string>, owner: string, repo: string, check_run_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            annotation_level?: string;
            end_column?: double;
            end_line?: double;
            message?: string;
            path?: string;
            raw_details?: string;
            start_column?: double;
            start_line?: double;
            title?: string;
        }>;
    }];
    /**
     * Create a check suite
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * By default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Set preferences for check suites on a repository](https://developer.github.com/v3/checks/suites/#set-preferences-for-check-suites-on-a-repository)". Your GitHub App must have the `checks:write` permission to create check suites.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/check-suites
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "checks/create-suite"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        head_sha: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            after?: string;
            app?: {
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            };
            before?: string;
            conclusion?: string;
            head_branch?: string;
            head_sha?: string;
            id?: double;
            node_id?: string;
            pull_requests?: Array<any>;
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            status?: string;
            url?: string;
        };
    }];
    /**
     * Set preferences for check suites on a repository
     * @description Changes the default automatic flow when creating check suites. By default, the CheckSuiteEvent is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/check-suites/preferences
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "checks/set-suites-preferences"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        auto_trigger_checks?: Array<{
            app_id: int64;
            setting: boolean;
        }>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            preferences?: {
                auto_trigger_checks?: Array<{
                    app_id: double;
                    setting: boolean;
                }>;
            };
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
        };
    }];
    /**
     * Get a single check suite
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/check-suites/{check_suite_id}
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_suite_id - check_suite_id parameter
     * @return 200 - response
     */
    "checks/get-suite"(accept: Header<string>, owner: string, repo: string, check_suite_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            after?: string;
            app?: {
                created_at?: string;
                description?: string;
                events?: Array<string>;
                external_url?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                owner?: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    hooks_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    public_members_url?: string;
                    repos_url?: string;
                    url?: string;
                };
                permissions?: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                slug?: string;
                updated_at?: string;
            };
            before?: string;
            conclusion?: string;
            head_branch?: string;
            head_sha?: string;
            id?: double;
            node_id?: string;
            pull_requests?: Array<any>;
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            status?: string;
            url?: string;
        };
    }];
    /**
     * List check runs in a check suite
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_suite_id - check_suite_id parameter
     * @param check_name - Returns check runs with the specified `name`.
     * @param status - Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
     * @param filter - Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "checks/list-for-suite"(accept: Header<string>, owner: string, repo: string, check_suite_id: int64, check_name?: Query<string>, status?: Query<"queued" | "in_progress" | "completed">, filter?: Query<"latest" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            check_runs?: Array<{
                app?: {
                    created_at?: string;
                    description?: string;
                    events?: Array<string>;
                    external_url?: string;
                    html_url?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    owner?: {
                        avatar_url?: string;
                        description?: string;
                        events_url?: string;
                        hooks_url?: string;
                        id?: double;
                        issues_url?: string;
                        login?: string;
                        members_url?: string;
                        node_id?: string;
                        public_members_url?: string;
                        repos_url?: string;
                        url?: string;
                    };
                    permissions?: {
                        contents?: string;
                        issues?: string;
                        metadata?: string;
                        single_file?: string;
                    };
                    slug?: string;
                    updated_at?: string;
                };
                check_suite?: {
                    id?: double;
                };
                completed_at?: string;
                conclusion?: string;
                details_url?: string;
                external_id?: string;
                head_sha?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                output?: {
                    annotations_count?: double;
                    annotations_url?: string;
                    summary?: string;
                    text?: string;
                    title?: string;
                };
                pull_requests?: Array<{
                    base?: {
                        ref?: string;
                        repo?: {
                            id?: double;
                            name?: string;
                            url?: string;
                        };
                        sha?: string;
                    };
                    head?: {
                        ref?: string;
                        repo?: {
                            id?: double;
                            name?: string;
                            url?: string;
                        };
                        sha?: string;
                    };
                    id?: double;
                    number?: double;
                    url?: string;
                }>;
                started_at?: string;
                status?: string;
                url?: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Rerequest check suite
     * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://developer.github.com/v3/activity/events/types/#checksuiteevent) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param check_suite_id - check_suite_id parameter
     * @return 201 - response
     */
    "checks/rerequest-suite"(accept: Header<string>, owner: string, repo: string, check_suite_id: int64): [(code: 201) => {}];
    /**
     * List collaborators
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/collaborators
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param affiliation - Filter collaborators returned by their affiliation. Can be one of:
     * \* `outside`: All outside collaborators of an organization-owned repository.
     * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
     * \* `all`: All collaborators the authenticated user can see.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-collaborators"(accept?: Header<string>, owner: string, repo: string, affiliation?: Query<"outside" | "direct" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }];
    /**
     * Check if a user is a collaborator
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/collaborators/{username}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param username - username parameter
     * @return 204 - Response if user is a collaborator
     * @return 404 - Response if user is not a collaborator
     */
    "repos/check-collaborator"(accept?: Header<string>, owner: string, repo: string, username: string): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Add user as a collaborator
     * @description This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     *
     * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).
     *
     * **Rate limits**
     *
     * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/collaborators/{username}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param username - username parameter
     * @return 201 - Response when a new invitation is created
     */
    "repos/add-collaborator"(accept?: Header<string>, owner: string, repo: string, username: string, body?: Body<{
        permission?: "pull" | "push" | "admin";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            html_url?: string;
            id?: double;
            invitee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            url?: string;
        };
    }];
    /**
     * Remove user as a collaborator
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/collaborators/{username}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param username - username parameter
     * @return 204 - Empty response
     */
    "repos/remove-collaborator"(accept?: Header<string>, owner: string, repo: string, username: string): [(code: 204) => {}];
    /**
     * Review a user's permission level
     * @description Possible values for the `permission` key: `admin`, `write`, `read`, `none`.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/collaborators/{username}/permission
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param username - username parameter
     * @return 200 - Response if user has admin permissions
     */
    "repos/get-collaborator-permission-level"(accept?: Header<string>, owner: string, repo: string, username: string): [(code: 200, mediaType: "application/json") => {
        body: {
            permission?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List commit comments for a repository
     * @description Commit Comments use [these custom media types](https://developer.github.com/v3/repos/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).
     *
     * Comments are ordered by ascending ID.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/comments
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-commit-comments"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            commit_id?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            line?: double;
            node_id?: string;
            path?: string;
            position?: double;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Get a single commit comment
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/comments/{comment_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "repos/get-commit-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            commit_id?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            line?: double;
            node_id?: string;
            path?: string;
            position?: double;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a commit comment
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/comments/{comment_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-commit-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 204) => {}];
    /**
     * Update a commit comment
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/comments/{comment_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "repos/update-commit-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            commit_id?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            line?: double;
            node_id?: string;
            path?: string;
            position?: double;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List reactions for a commit comment
     * @description List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-commit-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for a commit comment
     * @description Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 201 - response
     */
    "reactions/create-for-commit-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List commits on a repository
     * @description **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param sha - SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
     * @param path - Only commits containing this file path will be returned.
     * @param author - GitHub login or email address by which to filter by commit author.
     * @param since - Only commits after this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param until - Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-commits"(accept?: Header<string>, owner: string, repo: string, sha?: Query<string>, path?: Query<string>, author?: Query<string>, since?: Query<string>, until?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments_url?: string;
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                comment_count?: double;
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                message?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            committer?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            node_id?: string;
            parents?: Array<{
                sha?: string;
                url?: string;
            }>;
            sha?: string;
            url?: string;
        }>;
    }];
    /**
     * List branches for HEAD commit
     * @description Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param commit_sha - commit_sha parameter
     * @return 200 - response
     */
    "repos/list-branches-for-head-commit"(accept: Header<string>, owner: string, repo: string, commit_sha: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            commit?: {
                sha?: string;
                url?: string;
            };
            name?: string;
            protected?: string;
        }>;
    }];
    /**
     * List comments for a single commit
     * @description Use the `:commit_sha` to specify the commit that will have its comments listed.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{commit_sha}/comments
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param commit_sha - commit_sha parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-comments-for-commit"(accept?: Header<string>, owner: string, repo: string, commit_sha: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            commit_id?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            line?: double;
            node_id?: string;
            path?: string;
            position?: double;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a commit comment
     * @description Create a comment for a commit using its `:commit_sha`.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/commits/{commit_sha}/comments
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param commit_sha - commit_sha parameter
     * @return 201 - response
     */
    "repos/create-commit-comment"(accept?: Header<string>, owner: string, repo: string, commit_sha: string, body?: Body<{
        body: string;
        line?: int64;
        path?: string;
        position?: int64;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            body?: string;
            commit_id?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            line?: double;
            node_id?: string;
            path?: string;
            position?: double;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List pull requests associated with commit
     * @description Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param commit_sha - commit_sha parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-pull-requests-associated-with-commit"(accept: Header<string>, owner: string, repo: string, commit_sha: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            closed_at?: string;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            merge_commit_sha?: string;
            merged_at?: string;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            requested_reviewers?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Get a single commit
     * @description Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
     *
     * You can pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
     *
     * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{ref}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @return 200 - response
     */
    "repos/get-commit"(accept?: Header<string>, owner: string, repo: string, ref: string): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments_url?: string;
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                comment_count?: double;
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                message?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            committer?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            files?: Array<{
                additions?: double;
                blob_url?: string;
                changes?: double;
                deletions?: double;
                filename?: string;
                patch?: string;
                raw_url?: string;
                status?: string;
            }>;
            html_url?: string;
            node_id?: string;
            parents?: Array<{
                sha?: string;
                url?: string;
            }>;
            sha?: string;
            stats?: {
                additions?: double;
                deletions?: double;
                total?: double;
            };
            url?: string;
        };
    }];
    /**
     * List check runs for a specific ref
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{ref}/check-runs
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @param check_name - Returns check runs with the specified `name`.
     * @param status - Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
     * @param filter - Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "checks/list-for-ref"(accept: Header<string>, owner: string, repo: string, ref: string, check_name?: Query<string>, status?: Query<"queued" | "in_progress" | "completed">, filter?: Query<"latest" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            check_runs?: Array<{
                app?: {
                    created_at?: string;
                    description?: string;
                    events?: Array<string>;
                    external_url?: string;
                    html_url?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    owner?: {
                        avatar_url?: string;
                        description?: string;
                        events_url?: string;
                        hooks_url?: string;
                        id?: double;
                        issues_url?: string;
                        login?: string;
                        members_url?: string;
                        node_id?: string;
                        public_members_url?: string;
                        repos_url?: string;
                        url?: string;
                    };
                    permissions?: {
                        contents?: string;
                        issues?: string;
                        metadata?: string;
                        single_file?: string;
                    };
                    slug?: string;
                    updated_at?: string;
                };
                check_suite?: {
                    id?: double;
                };
                completed_at?: string;
                conclusion?: string;
                details_url?: string;
                external_id?: string;
                head_sha?: string;
                html_url?: string;
                id?: double;
                name?: string;
                node_id?: string;
                output?: {
                    annotations_count?: double;
                    annotations_url?: string;
                    summary?: string;
                    text?: string;
                    title?: string;
                };
                pull_requests?: Array<{
                    base?: {
                        ref?: string;
                        repo?: {
                            id?: double;
                            name?: string;
                            url?: string;
                        };
                        sha?: string;
                    };
                    head?: {
                        ref?: string;
                        repo?: {
                            id?: double;
                            name?: string;
                            url?: string;
                        };
                        sha?: string;
                    };
                    id?: double;
                    number?: double;
                    url?: string;
                }>;
                started_at?: string;
                status?: string;
                url?: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * List check suites for a specific ref
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{ref}/check-suites
     * @tag checks
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @param app_id - Filters check suites by GitHub App `id`.
     * @param check_name - Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "checks/list-suites-for-ref"(accept: Header<string>, owner: string, repo: string, ref: string, app_id?: Query<int64>, check_name?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            check_suites?: Array<{
                after?: string;
                app?: {
                    created_at?: string;
                    description?: string;
                    events?: Array<string>;
                    external_url?: string;
                    html_url?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    owner?: {
                        avatar_url?: string;
                        description?: string;
                        events_url?: string;
                        hooks_url?: string;
                        id?: double;
                        issues_url?: string;
                        login?: string;
                        members_url?: string;
                        node_id?: string;
                        public_members_url?: string;
                        repos_url?: string;
                        url?: string;
                    };
                    permissions?: {
                        contents?: string;
                        issues?: string;
                        metadata?: string;
                        single_file?: string;
                    };
                    slug?: string;
                    updated_at?: string;
                };
                before?: string;
                conclusion?: string;
                head_branch?: string;
                head_sha?: string;
                id?: double;
                node_id?: string;
                pull_requests?: Array<any>;
                repository?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                status?: string;
                url?: string;
            }>;
            total_count?: double;
        };
    }];
    /**
     * Get the combined status for a specific ref
     * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
     *
     * The most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.
     *
     * Additionally, a combined `state` is returned. The `state` is one of:
     *
     * *   **failure** if any of the contexts report as `error` or `failure`
     * *   **pending** if there are no statuses or a context is `pending`
     * *   **success** if the latest status for all contexts is `success`
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{ref}/status
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @return 200 - response
     */
    "repos/get-combined-status-for-ref"(accept?: Header<string>, owner: string, repo: string, ref: string): [(code: 200, mediaType: "application/json") => {
        body: {
            commit_url?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            sha?: string;
            state?: string;
            statuses?: Array<{
                avatar_url: string;
                context: string;
                created_at: string;
                description: string;
                id: double;
                node_id: string;
                state: string;
                target_url: string;
                updated_at: string;
                url: string;
            }>;
            total_count?: double;
            url?: string;
        };
    }];
    /**
     * List statuses for a specific ref
     * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
     *
     * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/commits/{ref}/statuses
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-statuses-for-ref"(accept?: Header<string>, owner: string, repo: string, ref: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            context?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            id?: double;
            node_id?: string;
            state?: string;
            target_url?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Get the contents of a repository's code of conduct
     * @description This method returns the contents of the repository's code of conduct file, if one is detected.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/community/code_of_conduct
     * @tag codes-of-conduct
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "codes-of-conduct/get-for-repo"(accept: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            key?: string;
            name?: string;
            url?: string;
        };
    }];
    /**
     * Retrieve community profile metrics
     * @description This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE, README, and CONTRIBUTING files.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/community/profile
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/retrieve-community-profile-metrics"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            description?: string;
            documentation?: boolean;
            files?: {
                code_of_conduct?: {
                    html_url?: string;
                    key?: string;
                    name?: string;
                    url?: string;
                };
                contributing?: {
                    html_url?: string;
                    url?: string;
                };
                issue_template?: {
                    html_url?: string;
                    url?: string;
                };
                license?: {
                    html_url?: string;
                    key?: string;
                    name?: string;
                    spdx_id?: string;
                    url?: string;
                };
                pull_request_template?: {
                    html_url?: string;
                    url?: string;
                };
                readme?: {
                    html_url?: string;
                    url?: string;
                };
            };
            health_percentage?: double;
            updated_at?: string;
        };
    }];
    /**
     * Compare two commits
     * @description Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
     *
     * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     *
     * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
     *
     * **Working with large comparisons**
     *
     * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) to enumerate all commits in the range.
     *
     * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/compare/{base}...{head}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param base - base parameter
     * @param head - head parameter
     * @return 200 - response
     */
    "repos/compare-commits"(accept?: Header<string>, owner: string, repo: string, base: string, head: string): [(code: 200, mediaType: "application/json") => {
        body: {
            ahead_by?: double;
            base_commit?: {
                author?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                comments_url?: string;
                commit?: {
                    author?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    comment_count?: double;
                    committer?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    message?: string;
                    tree?: {
                        sha?: string;
                        url?: string;
                    };
                    url?: string;
                    verification?: {
                        payload?: string;
                        reason?: string;
                        signature?: string;
                        verified?: boolean;
                    };
                };
                committer?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                html_url?: string;
                node_id?: string;
                parents?: Array<{
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                url?: string;
            };
            behind_by?: double;
            commits?: Array<{
                author?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                comments_url?: string;
                commit?: {
                    author?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    comment_count?: double;
                    committer?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    message?: string;
                    tree?: {
                        sha?: string;
                        url?: string;
                    };
                    url?: string;
                    verification?: {
                        payload?: string;
                        reason?: string;
                        signature?: string;
                        verified?: boolean;
                    };
                };
                committer?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                html_url?: string;
                node_id?: string;
                parents?: Array<{
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                url?: string;
            }>;
            diff_url?: string;
            files?: Array<{
                additions?: double;
                blob_url?: string;
                changes?: double;
                contents_url?: string;
                deletions?: double;
                filename?: string;
                patch?: string;
                raw_url?: string;
                sha?: string;
                status?: string;
            }>;
            html_url?: string;
            merge_base_commit?: {
                author?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                comments_url?: string;
                commit?: {
                    author?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    comment_count?: double;
                    committer?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    message?: string;
                    tree?: {
                        sha?: string;
                        url?: string;
                    };
                    url?: string;
                    verification?: {
                        payload?: string;
                        reason?: string;
                        signature?: string;
                        verified?: boolean;
                    };
                };
                committer?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                html_url?: string;
                node_id?: string;
                parents?: Array<{
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                url?: string;
            };
            patch_url?: string;
            permalink_url?: string;
            status?: string;
            total_commits?: double;
            url?: string;
        };
    }];
    /**
     * Get contents
     * @description Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit `:path`, you will receive the contents of all files in the repository.
     *
     * Files and symlinks support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) to ensure the content is returned in a consistent object format.
     *
     * **Note**:
     *
     * *   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).
     * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://developer.github.com/v3/git/trees/#get-a-tree).
     * *   This API supports files up to 1 megabyte in size.
     *
     * The response will be an array of objects, one object for each item in the directory.
     *
     * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
     *
     * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the [format shown above](https://developer.github.com/v3/repos/contents/#response-if-content-is-a-file)).
     *
     * Otherwise, the API responds with an object describing the symlink itself:
     *
     * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.
     *
     * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/contents/{path}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param path - path parameter
     * @param ref - The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
     * @return 200 - response
     */
    "repos/get-contents"(accept?: Header<string>, owner: string, repo: string, path: string, ref?: Query<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                git?: string;
                html?: string;
                self?: string;
            };
            content?: string;
            download_url?: string;
            encoding?: string;
            git_url?: string;
            html_url?: string;
            name?: string;
            path?: string;
            sha?: string;
            size?: double;
            type?: string;
            url?: string;
        };
    }];
    /**
     * Create or update a file
     * @description Creates a new file or updates an existing file in a repository.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/contents/{path}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param path - path parameter
     * @return 200 - response
     * @return 201 - response
     */
    "repos/create-or-update-file"(accept?: Header<string>, owner: string, repo: string, path: string, body?: Body<{
        author?: {
            email: string;
            name: string;
        };
        branch?: string;
        committer?: {
            email: string;
            name: string;
        };
        content: string;
        message: string;
        sha?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                html_url?: string;
                message?: string;
                node_id?: string;
                parents?: Array<{
                    html_url?: string;
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            content?: {
                _links?: {
                    git?: string;
                    html?: string;
                    self?: string;
                };
                download_url?: string;
                git_url?: string;
                html_url?: string;
                name?: string;
                path?: string;
                sha?: string;
                size?: double;
                type?: string;
                url?: string;
            };
        };
    }, (code: 201, mediaType: "application/json") => {
        body: {
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                html_url?: string;
                message?: string;
                node_id?: string;
                parents?: Array<{
                    html_url?: string;
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            content?: {
                _links?: {
                    git?: string;
                    html?: string;
                    self?: string;
                };
                download_url?: string;
                git_url?: string;
                html_url?: string;
                name?: string;
                path?: string;
                sha?: string;
                size?: double;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a file
     * @description Deletes a file in a repository.
     *
     * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
     *
     * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
     *
     * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/contents/{path}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param path - path parameter
     * @return 200 - response
     */
    "repos/delete-file"(accept?: Header<string>, owner: string, repo: string, path: string, body?: Body<{
        author?: {
            email?: string;
            name?: string;
        };
        branch?: string;
        committer?: {
            email?: string;
            name?: string;
        };
        message: string;
        sha: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                html_url?: string;
                message?: string;
                node_id?: string;
                parents?: Array<{
                    html_url?: string;
                    sha?: string;
                    url?: string;
                }>;
                sha?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            content?: string;
        };
    }];
    /**
     * List contributors
     * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
     *
     * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/contributors
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param anon - Set to `1` or `true` to include anonymous contributors in results.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - Response if repository contains content
     * @return 204 - Response if repository is empty
     */
    "repos/list-contributors"(accept?: Header<string>, owner: string, repo: string, anon?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            contributions?: double;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>;
    }, (code: 204) => {}];
    /**
     * List deployments
     * @description Simple filtering of deployments is available via query parameters:
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/deployments
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param sha - The SHA recorded at creation time.
     * @param ref - The name of the ref. This can be a branch, tag, or SHA.
     * @param task - The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
     * @param environment - The name of the environment that was deployed to (e.g., `staging` or `production`).
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-deployments"(accept?: Header<string>, owner: string, repo: string, sha?: Query<string>, ref?: Query<string>, task?: Query<string>, environment?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            environment?: string;
            id?: double;
            node_id?: string;
            original_environment?: string;
            payload?: {
                deploy?: string;
            };
            production_environment?: boolean;
            ref?: string;
            repository_url?: string;
            sha?: string;
            statuses_url?: string;
            task?: string;
            transient_environment?: boolean;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a deployment
     * @description Deployments offer a few configurable parameters with sane defaults.
     *
     * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.
     *
     * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter makes it easier to track which environments have requested deployments. The default environment is `production`.
     *
     * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.
     *
     * By default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.
     *
     * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.
     *
     * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.
     *
     * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref:
     *
     * A simple example putting the user and room into the payload to notify back to chat networks.
     *
     * A more advanced example specifying required commit statuses and bypassing auto-merging.
     *
     * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when:
     *
     * *   Auto-merge option is enabled in the repository
     * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
     * *   There are no merge conflicts
     *
     * If there are no new commits in the base branch, a new request to create a deployment should give a successful response.
     *
     * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
     *
     * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/deployments
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     * @return 202 - Merged branch response
     * @return 409 - response
     */
    "repos/create-deployment"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        auto_merge?: boolean;
        description?: string;
        environment?: string;
        payload?: string;
        production_environment?: boolean;
        ref: string;
        required_contexts?: Array<string>;
        task?: string;
        transient_environment?: boolean;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            environment?: string;
            id?: double;
            node_id?: string;
            original_environment?: string;
            payload?: {
                deploy?: string;
            };
            production_environment?: boolean;
            ref?: string;
            repository_url?: string;
            sha?: string;
            statuses_url?: string;
            task?: string;
            transient_environment?: boolean;
            updated_at?: string;
            url?: string;
        };
    }, (code: 202, mediaType: "application/json") => {
        body: {
            message?: string;
        };
    }, (code: 409, mediaType: "application/json") => {
        body: {
            message?: string;
        };
        isException: true;
    }];
    /**
     * Get a single deployment
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/deployments/{deployment_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param deployment_id - deployment_id parameter
     * @return 200 - response
     */
    "repos/get-deployment"(accept?: Header<string>, owner: string, repo: string, deployment_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            environment?: string;
            id?: double;
            node_id?: string;
            original_environment?: string;
            payload?: {
                deploy?: string;
            };
            production_environment?: boolean;
            ref?: string;
            repository_url?: string;
            sha?: string;
            statuses_url?: string;
            task?: string;
            transient_environment?: boolean;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a deployment
     * @description To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
     *
     * To set a deployment as inactive, you must:
     *
     * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
     * *   Mark the active deployment as inactive by adding any non-successful deployment status.
     *
     * For more information, see "[Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)" and "[Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)."
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/deployments/{deployment_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param deployment_id - deployment_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-deployment"(accept?: Header<string>, owner: string, repo: string, deployment_id: int64): [(code: 204) => {}];
    /**
     * List deployment statuses
     * @description Users with pull access can view deployment statuses for a deployment:
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param deployment_id - deployment_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-deployment-statuses"(accept?: Header<string>, owner: string, repo: string, deployment_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            deployment_url?: string;
            description?: string;
            environment?: string;
            environment_url?: string;
            id?: double;
            log_url?: string;
            node_id?: string;
            repository_url?: string;
            state?: string;
            target_url?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a deployment status
     * @description Users with `push` access can create deployment statuses for a given deployment.
     *
     * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param deployment_id - deployment_id parameter
     * @return 201 - response
     */
    "repos/create-deployment-status"(accept?: Header<string>, owner: string, repo: string, deployment_id: int64, body?: Body<{
        auto_inactive?: boolean;
        description?: string;
        environment?: "production" | "staging" | "qa";
        environment_url?: string;
        log_url?: string;
        state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
        target_url?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            deployment_url?: string;
            description?: string;
            environment?: string;
            environment_url?: string;
            id?: double;
            log_url?: string;
            node_id?: string;
            repository_url?: string;
            state?: string;
            target_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a single deployment status
     * @description Users with pull access can view a deployment status for a deployment:
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param deployment_id - deployment_id parameter
     * @param status_id - status_id parameter
     * @return 200 - response
     */
    "repos/get-deployment-status"(accept?: Header<string>, owner: string, repo: string, deployment_id: int64, status_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            deployment_url?: string;
            description?: string;
            environment?: string;
            environment_url?: string;
            id?: double;
            log_url?: string;
            node_id?: string;
            repository_url?: string;
            state?: string;
            target_url?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Create a repository dispatch event
     * @description You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://developer.github.com/v3/activity/events/types/#repositorydispatchevent)."
     *
     * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow. For a test example, see the [input example](https://developer.github.com/v3/repos/#example-4).
     *
     * To give you write access to the repository, you must use a personal access token with the `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
     *
     * This input example shows how you can use the `client_payload` as a test to debug your workflow.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/dispatches
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "repos/create-dispatch-event"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        client_payload?: {};
        event_type?: string;
    }, "application/json">): [(code: 204) => {}];
    /**
     * List downloads for a repository
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/downloads
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-downloads"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content_type?: string;
            description?: string;
            download_count?: double;
            html_url?: string;
            id?: double;
            name?: string;
            size?: double;
            url?: string;
        }>;
    }];
    /**
     * Get a single download
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/downloads/{download_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param download_id - download_id parameter
     * @return 200 - response
     */
    "repos/get-download"(accept?: Header<string>, owner: string, repo: string, download_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            content_type?: string;
            description?: string;
            download_count?: double;
            html_url?: string;
            id?: double;
            name?: string;
            size?: double;
            url?: string;
        };
    }];
    /**
     * Delete a download
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/downloads/{download_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param download_id - download_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-download"(accept?: Header<string>, owner: string, repo: string, download_id: int64): [(code: 204) => {}];
    /**
     * List repository events
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/events
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 418 - Response definition missing
     */
    "activity/list-repo-events"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 418) => {
        isException: true;
    }];
    /**
     * List forks
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/forks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param sort - The sort order. Can be either `newest`, `oldest`, or `stargazers`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-forks"(accept?: Header<string>, owner: string, repo: string, sort?: Query<"newest" | "oldest" | "stargazers">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>;
    }];
    /**
     * Create a fork
     * @description Create a fork for the authenticated user.
     *
     * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/forks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 202 - response
     */
    "repos/create-fork"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        organization?: string;
    }, "application/json">): [(code: 202, mediaType: "application/json") => {
        body: {
            allow_merge_commit?: boolean;
            allow_rebase_merge?: boolean;
            allow_squash_merge?: boolean;
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        };
    }];
    /**
     * Create a blob
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/git/blobs
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "git/create-blob"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        content: string;
        encoding?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            sha?: string;
            url?: string;
        };
    }];
    /**
     * Get a blob
     * @description The `content` in the response will always be Base64 encoded.
     *
     * _Note_: This API supports blobs up to 100 megabytes in size.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/blobs/{file_sha}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param file_sha - file_sha parameter
     * @return 200 - response
     */
    "git/get-blob"(accept?: Header<string>, owner: string, repo: string, file_sha: string): [(code: 200, mediaType: "application/json") => {
        body: {
            content?: string;
            encoding?: string;
            sha?: string;
            size?: double;
            url?: string;
        };
    }];
    /**
     * Create a commit
     * @description Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * In this example, the payload of the signature would be:
     *
     *
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/git/commits
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "git/create-commit"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        author?: {
            date?: string;
            email?: string;
            name?: string;
        };
        committer?: {
            date?: string;
            email?: string;
            name?: string;
        };
        message: string;
        parents: Array<string>;
        signature?: string;
        tree: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            author?: {
                date?: string;
                email?: string;
                name?: string;
            };
            committer?: {
                date?: string;
                email?: string;
                name?: string;
            };
            message?: string;
            node_id?: string;
            parents?: Array<{
                sha?: string;
                url?: string;
            }>;
            sha?: string;
            tree?: {
                sha?: string;
                url?: string;
            };
            url?: string;
            verification?: {
                payload?: string;
                reason?: string;
                signature?: string;
                verified?: boolean;
            };
        };
    }];
    /**
     * Get a commit
     * @description Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/commits/{commit_sha}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param commit_sha - commit_sha parameter
     * @return 200 - response
     */
    "git/get-commit"(accept?: Header<string>, owner: string, repo: string, commit_sha: string): [(code: 200, mediaType: "application/json") => {
        body: {
            author?: {
                date?: string;
                email?: string;
                name?: string;
            };
            committer?: {
                date?: string;
                email?: string;
                name?: string;
            };
            message?: string;
            parents?: Array<{
                sha?: string;
                url?: string;
            }>;
            sha?: string;
            tree?: {
                sha?: string;
                url?: string;
            };
            url?: string;
            verification?: {
                payload?: string;
                reason?: string;
                signature?: string;
                verified?: boolean;
            };
        };
    }];
    /**
     * List matching references
     * @description Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
     *
     * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
     *
     * **Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     *
     * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/matching-refs/{ref}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "git/list-matching-refs"(accept?: Header<string>, owner: string, repo: string, ref: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            ref?: string;
            url?: string;
        }>;
    }];
    /**
     * Get a single reference
     * @description Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
     *
     * **Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     *
     * To get the reference for a branch named `skunkworkz/featureA`, the endpoint route is:
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/ref/{ref}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @return 200 - response
     */
    "git/get-ref"(accept?: Header<string>, owner: string, repo: string, ref: string): [(code: 200, mediaType: "application/json") => {
        body: {
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            ref?: string;
            url?: string;
        };
    }];
    /**
     * Create a reference
     * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/git/refs
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "git/create-ref"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        ref: string;
        sha: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            ref?: string;
            url?: string;
        };
    }];
    /**
     * Delete a reference
     * @description ```
     * DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a
     * ```
     *
     * ```
     * DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0
     * ```
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/git/refs/{ref}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @return 204 - Empty response
     */
    "git/delete-ref"(accept?: Header<string>, owner: string, repo: string, ref: string): [(code: 204) => {}];
    /**
     * Update a reference
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/git/refs/{ref}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - ref parameter
     * @return 200 - response
     */
    "git/update-ref"(accept?: Header<string>, owner: string, repo: string, ref: string, body?: Body<{
        force?: boolean;
        sha: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            ref?: string;
            url?: string;
        };
    }];
    /**
     * Create a tag object
     * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/git/tags
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "git/create-tag"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        message: string;
        object: string;
        tag: string;
        tagger?: {
            date?: string;
            email?: string;
            name?: string;
        };
        type: "commit" | "tree" | "blob";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            message?: string;
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            sha?: string;
            tag?: string;
            tagger?: {
                date?: string;
                email?: string;
                name?: string;
            };
            url?: string;
            verification?: {
                payload?: string;
                reason?: string;
                signature?: string;
                verified?: boolean;
            };
        };
    }];
    /**
     * Get a tag
     * @description **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value                    | Description                                                                                                                       |
     * | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
     * | `expired_key`            | The key that made the signature is expired.                                                                                       |
     * | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
     * | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
     * | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
     * | `unsigned`               | The object does not include a signature.                                                                                          |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
     * | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
     * | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
     * | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
     * | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
     * | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
     * | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/tags/{tag_sha}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param tag_sha - tag_sha parameter
     * @return 200 - response
     */
    "git/get-tag"(accept?: Header<string>, owner: string, repo: string, tag_sha: string): [(code: 200, mediaType: "application/json") => {
        body: {
            message?: string;
            node_id?: string;
            object?: {
                sha?: string;
                type?: string;
                url?: string;
            };
            sha?: string;
            tag?: string;
            tagger?: {
                date?: string;
                email?: string;
                name?: string;
            };
            url?: string;
            verification?: {
                payload?: string;
                reason?: string;
                signature?: string;
                verified?: boolean;
            };
        };
    }];
    /**
     * Create a tree
     * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
     *
     * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)" and "[Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)."
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/git/trees
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "git/create-tree"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        base_tree?: string;
        tree: Array<{
            content?: string;
            mode?: "100644" | "100755" | "040000" | "160000" | "120000";
            path?: string;
            sha?: string | null;
            type?: "blob" | "tree" | "commit";
        }>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            sha?: string;
            tree?: Array<{
                mode?: string;
                path?: string;
                sha?: string;
                size?: double;
                type?: string;
                url?: string;
            }>;
            url?: string;
        };
    }];
    /**
     * Get a tree
     * @description Returns a single tree using the SHA1 value for that tree.
     *
     * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, you can clone the repository and iterate over the Git data locally.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/git/trees/{tree_sha}
     * @tag git
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param tree_sha - tree_sha parameter
     * @param recursive - recursive parameter
     * @return 200 - If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, you can clone the repository and iterate over the Git data locally.
     */
    "git/get-tree"(accept?: Header<string>, owner: string, repo: string, tree_sha: string, recursive?: Query<1>): [(code: 200, mediaType: "application/json") => {
        body: {
            sha?: string;
            tree?: Array<{
                mode: string;
                path: string;
                sha: string;
                size: double;
                type: string;
                url: string;
            }>;
            truncated?: boolean;
            url?: string;
        };
    }];
    /**
     * List hooks
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/hooks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-hooks"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active?: boolean;
            config?: {
                content_type?: string;
                insecure_ssl?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            last_response?: {
                code?: string;
                message?: string;
                status?: string;
            };
            name?: string;
            ping_url?: string;
            test_url?: string;
            type?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a hook
     * @description Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.
     *
     * Here's how you can create a hook that posts payloads in JSON format:
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/hooks
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "repos/create-hook"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        active?: boolean;
        config: {
            content_type?: string;
            insecure_ssl?: string;
            secret?: string;
            url: string;
        };
        events?: Array<string>;
        name?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                insecure_ssl?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            last_response?: {
                code?: string;
                message?: string;
                status?: string;
            };
            name?: string;
            ping_url?: string;
            test_url?: string;
            type?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get single hook
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/hooks/{hook_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param hook_id - hook_id parameter
     * @return 200 - response
     */
    "repos/get-hook"(accept?: Header<string>, owner: string, repo: string, hook_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                insecure_ssl?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            last_response?: {
                code?: string;
                message?: string;
                status?: string;
            };
            name?: string;
            ping_url?: string;
            test_url?: string;
            type?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a hook
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/hooks/{hook_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param hook_id - hook_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-hook"(accept?: Header<string>, owner: string, repo: string, hook_id: int64): [(code: 204) => {}];
    /**
     * Edit a hook
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/hooks/{hook_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param hook_id - hook_id parameter
     * @return 200 - response
     */
    "repos/update-hook"(accept?: Header<string>, owner: string, repo: string, hook_id: int64, body?: Body<{
        active?: boolean;
        add_events?: Array<string>;
        config?: {
            content_type?: string;
            insecure_ssl?: string;
            secret?: string;
            url: string;
        };
        events?: Array<string>;
        remove_events?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            active?: boolean;
            config?: {
                content_type?: string;
                insecure_ssl?: string;
                url?: string;
            };
            created_at?: string;
            events?: Array<string>;
            id?: double;
            last_response?: {
                code?: string;
                message?: string;
                status?: string;
            };
            name?: string;
            ping_url?: string;
            test_url?: string;
            type?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Ping a hook
     * @description This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/hooks/{hook_id}/pings
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param hook_id - hook_id parameter
     * @return 204 - Empty response
     */
    "repos/ping-hook"(accept?: Header<string>, owner: string, repo: string, hook_id: int64): [(code: 204) => {}];
    /**
     * Test a push hook
     * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
     *
     * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/hooks/{hook_id}/tests
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param hook_id - hook_id parameter
     * @return 204 - Empty response
     */
    "repos/test-push-hook"(accept?: Header<string>, owner: string, repo: string, hook_id: int64): [(code: 204) => {}];
    /**
     * Get import progress
     * @description View the progress of an import.
     *
     * **Import status**
     *
     * This section includes details about the possible values of the `status` field of the Import Progress response.
     *
     * An import that does not have errors will progress through these steps:
     *
     * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
     * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
     * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
     * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
     * *   `complete` - the import is complete, and the repository is ready on GitHub.
     *
     * If there are problems, you will see one of these in the `status` field:
     *
     * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update Existing Import](https://developer.github.com/v3/migrations/source_imports/#update-existing-import) section.
     * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
     * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update Existing Import](https://developer.github.com/v3/migrations/source_imports/#update-existing-import) section.
     * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://developer.github.com/v3/migrations/source_imports/#cancel-an-import) and [retry](https://developer.github.com/v3/migrations/source_imports/#start-an-import) with the correct URL.
     * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update Existing Import](https://developer.github.com/v3/migrations/source_imports/#update-existing-import) section.
     *
     * **The project_choices field**
     *
     * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
     *
     * **Git LFS related fields**
     *
     * This section includes details about Git LFS related fields that may be present in the Import Progress response.
     *
     * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
     * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
     * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
     * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/import
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "migrations/get-import-progress"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            authors_count?: double;
            authors_url?: string;
            has_large_files?: boolean;
            html_url?: string;
            large_files_count?: double;
            large_files_size?: double;
            repository_url?: string;
            status?: string;
            status_text?: string;
            url?: string;
            use_lfs?: string;
            vcs?: string;
            vcs_url?: string;
        };
    }];
    /**
     * Start an import
     * @description Start a source import to a GitHub repository using GitHub Importer.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/import
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "migrations/start-import"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        tfvc_project?: string;
        vcs?: "subversion" | "git" | "mercurial" | "tfvc";
        vcs_password?: string;
        vcs_url: string;
        vcs_username?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            authors_count?: double;
            authors_url?: string;
            commit_count?: double;
            has_large_files?: boolean;
            html_url?: string;
            large_files_count?: double;
            large_files_size?: double;
            percent?: double;
            repository_url?: string;
            status?: string;
            status_text?: string;
            url?: string;
            use_lfs?: string;
            vcs?: string;
            vcs_url?: string;
        };
    }];
    /**
     * Cancel an import
     * @description Stop an import for a repository.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/import
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "migrations/cancel-import"(accept?: Header<string>, owner: string, repo: string): [(code: 204) => {}];
    /**
     * Update existing import
     * @description An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.
     *
     * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
     *
     * The following example demonstrates the workflow for updating an import with "project1" as the project choice. Given a `project_choices` array like such:
     *
     * To restart an import, no parameters are provided in the update request.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/import
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "migrations/update-import"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        vcs_password?: string;
        vcs_username?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            authors_url?: string;
            html_url?: string;
            repository_url?: string;
            status?: string;
            url?: string;
            use_lfs?: string;
            vcs?: string;
            vcs_url?: string;
        };
    }];
    /**
     * Get commit authors
     * @description Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
     *
     * This API method and the "Map a commit author" method allow you to provide correct Git author information.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/import/authors
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param since - Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.
     * @return 200 - response
     */
    "migrations/get-commit-authors"(accept?: Header<string>, owner: string, repo: string, since?: Query<string>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            id?: double;
            import_url?: string;
            name?: string;
            remote_id?: string;
            remote_name?: string;
            url?: string;
        }>;
    }];
    /**
     * Map a commit author
     * @description Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/import/authors/{author_id}
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param author_id - author_id parameter
     * @return 200 - response
     */
    "migrations/map-commit-author"(accept?: Header<string>, owner: string, repo: string, author_id: int64, body?: Body<{
        email?: string;
        name?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            email?: string;
            id?: double;
            import_url?: string;
            name?: string;
            remote_id?: string;
            remote_name?: string;
            url?: string;
        };
    }];
    /**
     * Get large files
     * @description List files larger than 100MB found during the import
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/import/large_files
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "migrations/get-large-files"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            oid?: string;
            path?: string;
            ref_name?: string;
            size?: double;
        }>;
    }];
    /**
     * Set Git LFS preference
     * @description You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/import/lfs
     * @tag migrations
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "migrations/set-lfs-preference"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        use_lfs: "opt_in" | "opt_out";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            authors_count?: double;
            authors_url?: string;
            has_large_files?: boolean;
            html_url?: string;
            large_files_count?: double;
            large_files_size?: double;
            repository_url?: string;
            status?: string;
            status_text?: string;
            url?: string;
            use_lfs?: string;
            vcs?: string;
            vcs_url?: string;
        };
    }];
    /**
     * Get a repository installation
     * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/installation
     * @tag apps
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "apps/get-repo-installation"(accept: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            access_tokens_url?: string;
            account?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            app_id?: double;
            created_at?: string;
            events?: Array<string>;
            html_url?: string;
            id?: double;
            permissions?: {
                checks?: string;
                contents?: string;
                metadata?: string;
            };
            repositories_url?: string;
            repository_selection?: string;
            single_file_name?: string;
            target_id?: double;
            target_type?: string;
            updated_at?: string;
        };
    }];
    /**
     * Get interaction restrictions for a repository
     * @description Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "interactions/get-restrictions-for-repo"(accept: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            limit?: string;
            origin?: string;
        };
    }];
    /**
     * Add or update interaction restrictions for a repository
     * @description Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "interactions/add-or-update-restrictions-for-repo"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        limit: "existing_users" | "contributors_only" | "collaborators_only";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            expires_at?: string;
            limit?: string;
            origin?: string;
        };
    }];
    /**
     * Remove interaction restrictions for a repository
     * @description Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/interaction-limits
     * @tag interactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "interactions/remove-restrictions-for-repo"(accept: Header<string>, owner: string, repo: string): [(code: 204) => {}];
    /**
     * List invitations for a repository
     * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/invitations
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-invitations"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            html_url?: string;
            id?: double;
            invitee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            url?: string;
        }>;
    }];
    /**
     * Delete a repository invitation
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/invitations/{invitation_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param invitation_id - invitation_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-invitation"(accept?: Header<string>, owner: string, repo: string, invitation_id: int64): [(code: 204) => {}];
    /**
     * Update a repository invitation
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/invitations/{invitation_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param invitation_id - invitation_id parameter
     * @return 200 - response
     */
    "repos/update-invitation"(accept?: Header<string>, owner: string, repo: string, invitation_id: int64, body?: Body<{
        permissions?: "read" | "write" | "admin";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            html_url?: string;
            id?: double;
            invitee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            url?: string;
        };
    }];
    /**
     * List issues for a repository
     * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param milestone - If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
     * @param state - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param assignee - Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
     * @param creator - The user that created the issue.
     * @param mentioned - A user that's mentioned in the issue.
     * @param labels - A list of comma separated label names. Example: `bug,ui,@high`
     * @param sort - What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param direction - The direction of the sort. Can be either `asc` or `desc`.
     * @param since - Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-for-repo"(accept?: Header<string>, owner: string, repo: string, milestone?: Query<string>, state?: Query<"open" | "closed" | "all">, assignee?: Query<string>, creator?: Query<string>, mentioned?: Query<string>, labels?: Query<string>, sort?: Query<"created" | "updated" | "comments">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create an issue
     * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "issues/create"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        assignee?: string;
        assignees?: Array<string>;
        body?: string;
        labels?: Array<string>;
        milestone?: int64;
        title: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            closed_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List comments in a repository
     * @description By default, Issue Comments are ordered by ascending ID.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/comments
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param sort - Either `created` or `updated`.
     * @param direction - Either `asc` or `desc`. Ignored without the `sort` parameter.
     * @param since - Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-comments-for-repo"(accept?: Header<string>, owner: string, repo: string, sort?: Query<"created" | "updated">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Get a single comment
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/comments/{comment_id}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "issues/get-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a comment
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 204 - Empty response
     */
    "issues/delete-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 204) => {}];
    /**
     * Edit a comment
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "issues/update-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List reactions for an issue comment
     * @description List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-issue-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for an issue comment
     * @description Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 201 - response
     */
    "reactions/create-for-issue-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List events for a repository
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/events
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-events-for-repo"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            actor?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            commit_id?: string;
            commit_url?: string;
            created_at?: string;
            event?: string;
            id?: double;
            issue?: {
                active_lock_reason?: string;
                assignee?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                assignees?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                body?: string;
                closed_at?: string;
                comments?: double;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: double;
                labels?: Array<{
                    color?: string;
                    default?: boolean;
                    description?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    url?: string;
                }>;
                labels_url?: string;
                locked?: boolean;
                milestone?: {
                    closed_at?: string;
                    closed_issues?: double;
                    created_at?: string;
                    creator?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    description?: string;
                    due_on?: string;
                    html_url?: string;
                    id?: double;
                    labels_url?: string;
                    node_id?: string;
                    number?: double;
                    open_issues?: double;
                    state?: string;
                    title?: string;
                    updated_at?: string;
                    url?: string;
                };
                node_id?: string;
                number?: double;
                pull_request?: {
                    diff_url?: string;
                    html_url?: string;
                    patch_url?: string;
                    url?: string;
                };
                repository_url?: string;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Get a single event
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/events/{event_id}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param event_id - event_id parameter
     * @return 200 - response
     */
    "issues/get-event"(accept?: Header<string>, owner: string, repo: string, event_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            actor?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            commit_id?: string;
            commit_url?: string;
            created_at?: string;
            event?: string;
            id?: double;
            issue?: {
                active_lock_reason?: string;
                assignee?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                assignees?: Array<{
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                }>;
                body?: string;
                closed_at?: string;
                comments?: double;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: double;
                labels?: Array<{
                    color?: string;
                    default?: boolean;
                    description?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    url?: string;
                }>;
                labels_url?: string;
                locked?: boolean;
                milestone?: {
                    closed_at?: string;
                    closed_issues?: double;
                    created_at?: string;
                    creator?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    description?: string;
                    due_on?: string;
                    html_url?: string;
                    id?: double;
                    labels_url?: string;
                    node_id?: string;
                    number?: double;
                    open_issues?: double;
                    state?: string;
                    title?: string;
                    updated_at?: string;
                    url?: string;
                };
                node_id?: string;
                number?: double;
                pull_request?: {
                    diff_url?: string;
                    html_url?: string;
                    patch_url?: string;
                    url?: string;
                };
                repository_url?: string;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            node_id?: string;
            url?: string;
        };
    }];
    /**
     * Get a single issue
     * @description The API returns a [`301 Moved Permanently` status](https://developer.github.com/v3/#http-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://developer.github.com/v3/activity/events/types/#issuesevent) webhook.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 200 - response
     */
    "issues/get"(accept?: Header<string>, owner: string, repo: string, issue_number: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            closed_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Edit an issue
     * @description Issue owners and users with push access can edit an issue.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/issues/{issue_number}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 200 - response
     */
    "issues/update"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        assignee?: string;
        assignees?: Array<string>;
        body?: string;
        labels?: Array<string>;
        milestone?: int64 | null;
        state?: "open" | "closed";
        title?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            closed_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Add assignees to an issue
     * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     *
     * This example adds two assignees to the existing `octocat` assignee.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues/{issue_number}/assignees
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 201 - response
     */
    "issues/add-assignees"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        assignees?: Array<string>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Remove assignees from an issue
     * @description Removes one or more assignees from an issue.
     *
     * This example removes two of three assignees, leaving the `octocat` assignee.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 200 - response
     */
    "issues/remove-assignees"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        assignees?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List comments on an issue
     * @description Issue Comments are ordered by ascending ID.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}/comments
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param since - Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-comments"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a comment
     * @description This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues/{issue_number}/comments
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 201 - response
     */
    "issues/create-comment"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            body?: string;
            created_at?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List events for an issue
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}/events
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-events"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            actor?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            commit_id?: string;
            commit_url?: string;
            created_at?: string;
            event?: string;
            id?: double;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * List labels on an issue
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-labels-on-issue"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Replace all labels for an issue
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/issues/{issue_number}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 200 - response
     */
    "issues/replace-labels"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        labels?: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Add labels to an issue
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues/{issue_number}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 200 - response
     */
    "issues/add-labels"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        labels: Array<string>;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Remove all labels from an issue
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 204 - Empty response
     */
    "issues/remove-labels"(accept?: Header<string>, owner: string, repo: string, issue_number: int64): [(code: 204) => {}];
    /**
     * Remove a label from an issue
     * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param name - name parameter
     * @return 200 - response
     */
    "issues/remove-label"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, name: string): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Lock an issue
     * @description Users with push access can lock an issue or pull request's conversation.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/issues/{issue_number}/lock
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 204 - Empty response
     */
    "issues/lock"(accept?: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
    }, "application/json">): [(code: 204) => {}];
    /**
     * Unlock an issue
     * @description Users with push access can unlock an issue's conversation.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 204 - Empty response
     */
    "issues/unlock"(accept?: Header<string>, owner: string, repo: string, issue_number: int64): [(code: 204) => {}];
    /**
     * List reactions for an issue
     * @description List the reactions to an [issue](https://developer.github.com/v3/issues/).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-issue"(accept: Header<string>, owner: string, repo: string, issue_number: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for an issue
     * @description Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/issues/{issue_number}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @return 201 - response
     */
    "reactions/create-for-issue"(accept: Header<string>, owner: string, repo: string, issue_number: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List events for an issue
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/issues/{issue_number}/timeline
     * @tag issues
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param issue_number - issue_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-events-for-timeline"(accept: Header<string>, owner: string, repo: string, issue_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            actor?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            commit_id?: string;
            commit_url?: string;
            created_at?: string;
            event?: string;
            id?: double;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * List deploy keys
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/keys
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-deploy-keys"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            id?: double;
            key?: string;
            read_only?: boolean;
            title?: string;
            url?: string;
            verified?: boolean;
        }>;
    }];
    /**
     * Add a new deploy key
     * @description Here's how you can create a read-only deploy key:
     *
     *
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/keys
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "repos/add-deploy-key"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        key: string;
        read_only?: boolean;
        title?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            created_at?: string;
            id?: double;
            key?: string;
            read_only?: boolean;
            title?: string;
            url?: string;
            verified?: boolean;
        };
    }];
    /**
     * Get a deploy key
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/keys/{key_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param key_id - key_id parameter
     * @return 200 - response
     */
    "repos/get-deploy-key"(accept?: Header<string>, owner: string, repo: string, key_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            created_at?: string;
            id?: double;
            key?: string;
            read_only?: boolean;
            title?: string;
            url?: string;
            verified?: boolean;
        };
    }];
    /**
     * Remove a deploy key
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/keys/{key_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param key_id - key_id parameter
     * @return 204 - Empty response
     */
    "repos/remove-deploy-key"(accept?: Header<string>, owner: string, repo: string, key_id: int64): [(code: 204) => {}];
    /**
     * List all labels for this repository
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-labels-for-repo"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a label
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "issues/create-label"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        color: string;
        description?: string;
        name: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        };
    }];
    /**
     * Get a single label
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/labels/{name}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @return 200 - response
     */
    "issues/get-label"(accept?: Header<string>, owner: string, repo: string, name: string): [(code: 200, mediaType: "application/json") => {
        body: {
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        };
    }];
    /**
     * Delete a label
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/labels/{name}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @return 204 - Empty response
     */
    "issues/delete-label"(accept?: Header<string>, owner: string, repo: string, name: string): [(code: 204) => {}];
    /**
     * Update a label
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/labels/{name}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param name - name parameter
     * @return 200 - response
     */
    "issues/update-label"(accept?: Header<string>, owner: string, repo: string, name: string, body?: Body<{
        color?: string;
        description?: string;
        new_name?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        };
    }];
    /**
     * List languages
     * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/languages
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/list-languages"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            C?: double;
            Python?: double;
        };
    }];
    /**
     * Get the contents of a repository's license
     * @description This method returns the contents of the repository's license file, if one is detected.
     *
     * Similar to [the repository contents API](https://developer.github.com/v3/repos/contents/#get-contents), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/license
     * @tag licenses
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "licenses/get-for-repo"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                git?: string;
                html?: string;
                self?: string;
            };
            content?: string;
            download_url?: string;
            encoding?: string;
            git_url?: string;
            html_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            name?: string;
            path?: string;
            sha?: string;
            size?: double;
            type?: string;
            url?: string;
        };
    }];
    /**
     * Perform a merge
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/merges
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - Successful Response (The resulting merge commit)
     * @return 404 - response
     * @return 409 - Merge conflict response
     */
    "repos/merge"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        base: string;
        commit_message?: string;
        head: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments_url?: string;
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                comment_count?: double;
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                message?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            committer?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            node_id?: string;
            parents?: Array<{
                sha: string;
                url: string;
            }>;
            sha?: string;
            url?: string;
        };
    }, (code: 404, mediaType: "application/json") => {
        body: {
            message?: string;
        };
        isException: true;
    }, (code: 409, mediaType: "application/json") => {
        body: {
            message?: string;
        };
        isException: true;
    }];
    /**
     * List milestones for a repository
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/milestones
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param state - The state of the milestone. Either `open`, `closed`, or `all`.
     * @param sort - What to sort results by. Either `due_on` or `completeness`.
     * @param direction - The direction of the sort. Either `asc` or `desc`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-milestones-for-repo"(accept?: Header<string>, owner: string, repo: string, state?: Query<"open" | "closed" | "all">, sort?: Query<"due_on" | "completeness">, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            closed_at?: string;
            closed_issues?: double;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            due_on?: string;
            html_url?: string;
            id?: double;
            labels_url?: string;
            node_id?: string;
            number?: double;
            open_issues?: double;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a milestone
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/milestones
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "issues/create-milestone"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        description?: string;
        due_on?: string;
        state?: "open" | "closed";
        title: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            closed_at?: string;
            closed_issues?: double;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            due_on?: string;
            html_url?: string;
            id?: double;
            labels_url?: string;
            node_id?: string;
            number?: double;
            open_issues?: double;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a single milestone
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/milestones/{milestone_number}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param milestone_number - milestone_number parameter
     * @return 200 - response
     */
    "issues/get-milestone"(accept?: Header<string>, owner: string, repo: string, milestone_number: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            closed_at?: string;
            closed_issues?: double;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            due_on?: string;
            html_url?: string;
            id?: double;
            labels_url?: string;
            node_id?: string;
            number?: double;
            open_issues?: double;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Delete a milestone
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/milestones/{milestone_number}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param milestone_number - milestone_number parameter
     * @return 204 - Empty response
     */
    "issues/delete-milestone"(accept?: Header<string>, owner: string, repo: string, milestone_number: int64): [(code: 204) => {}];
    /**
     * Update a milestone
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/milestones/{milestone_number}
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param milestone_number - milestone_number parameter
     * @return 200 - response
     */
    "issues/update-milestone"(accept?: Header<string>, owner: string, repo: string, milestone_number: int64, body?: Body<{
        description?: string;
        due_on?: string;
        state?: "open" | "closed";
        title?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            closed_at?: string;
            closed_issues?: double;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            description?: string;
            due_on?: string;
            html_url?: string;
            id?: double;
            labels_url?: string;
            node_id?: string;
            number?: double;
            open_issues?: double;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get labels for every issue in a milestone
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels
     * @tag issues
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param milestone_number - milestone_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "issues/list-labels-for-milestone"(accept?: Header<string>, owner: string, repo: string, milestone_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            color?: string;
            default?: boolean;
            description?: string;
            id?: double;
            name?: string;
            node_id?: string;
            url?: string;
        }>;
    }];
    /**
     * List your notifications in a repository
     * @description List all notifications for the current user.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/notifications
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param all - If `true`, show notifications marked as read.
     * @param participating - If `true`, only shows notifications in which the user is directly participating or mentioned.
     * @param since - Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param before - Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "activity/list-notifications-for-repo"(accept?: Header<string>, owner: string, repo: string, all?: Query<boolean>, participating?: Query<boolean>, since?: Query<string>, before?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            id?: string;
            last_read_at?: string;
            reason?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            subject?: {
                latest_comment_url?: string;
                title?: string;
                type?: string;
                url?: string;
            };
            unread?: boolean;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Mark notifications as read in a repository
     * @description Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List your notifications in a repository](https://developer.github.com/v3/activity/notifications/#list-your-notifications-in-a-repository) endpoint and pass the query parameter `all=false`.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/notifications
     * @tag activity
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 205 - response
     */
    "activity/mark-notifications-as-read-for-repo"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        last_read_at?: string;
    }, "application/json">): [(code: 205) => {}];
    /**
     * Get information about a Pages site
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pages
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/get-pages"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            cname?: string;
            custom_404?: boolean;
            html_url?: string;
            source?: {
                branch?: string;
                directory?: string;
            };
            status?: string;
            url?: string;
        };
    }];
    /**
     * Update information about a Pages site
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/pages
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "repos/update-information-about-pages-site"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        cname?: string;
        source?: "\"gh-pages\"" | "\"master\"" | "\"master /docs\"";
    }, "application/json">): [(code: 204) => {}];
    /**
     * Enable a Pages site
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pages
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "repos/enable-pages-site"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        source?: {
            branch?: "master" | "gh-pages";
            path?: string;
        };
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            cname?: string;
            custom_404?: boolean;
            html_url?: string;
            source?: {
                branch?: string;
                directory?: string;
            };
            status?: string;
            url?: string;
        };
    }];
    /**
     * Disable a Pages site
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/pages
     * @tag repos
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 204 - Empty response
     */
    "repos/disable-pages-site"(accept: Header<string>, owner: string, repo: string): [(code: 204) => {}];
    /**
     * List Pages builds
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pages/builds
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-pages-builds"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            commit?: string;
            created_at?: string;
            duration?: double;
            error?: {
                message?: string;
            };
            pusher?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            status?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Request a page build
     * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
     *
     * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pages/builds
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/request-page-build"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            status?: string;
            url?: string;
        };
    }];
    /**
     * Get latest Pages build
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pages/builds/latest
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/get-latest-pages-build"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            commit?: string;
            created_at?: string;
            duration?: double;
            error?: {
                message?: string;
            };
            pusher?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            status?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * Get a specific Pages build
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pages/builds/{build_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param build_id - build_id parameter
     * @return 200 - response
     */
    "repos/get-pages-build"(accept?: Header<string>, owner: string, repo: string, build_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            commit?: string;
            created_at?: string;
            duration?: double;
            error?: {
                message?: string;
            };
            pusher?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            status?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List repository projects
     * @description Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/projects
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param state - Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "projects/list-for-repo"(accept: Header<string>, owner: string, repo: string, state?: Query<"open" | "closed" | "all">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        }>;
    }];
    /**
     * Create a repository project
     * @description Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/projects
     * @tag projects
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "projects/create-for-repo"(accept: Header<string>, owner: string, repo: string, body?: Body<{
        body?: string;
        name: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        };
    }];
    /**
     * List pull requests
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Pro, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param state - Either `open`, `closed`, or `all` to filter by state.
     * @param head - Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
     * @param base - Filter pulls by base branch name. Example: `gh-pages`.
     * @param sort - What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
     * @param direction - The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list"(accept?: Header<string>, owner: string, repo: string, state?: Query<"open" | "closed" | "all">, head?: Query<string>, base?: Query<string>, sort?: Query<"created" | "updated" | "popularity" | "long-running">, direction?: Query<"asc" | "desc">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            closed_at?: string;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            merge_commit_sha?: string;
            merged_at?: string;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            requested_reviewers?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a pull request
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Pro, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * You can create a new pull request.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "pulls/create"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        base: string;
        body?: string;
        draft?: boolean;
        head: string;
        maintainer_can_modify?: boolean;
        title: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            additions?: double;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            changed_files?: double;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            commits?: double;
            commits_url?: string;
            created_at?: string;
            deletions?: double;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            maintainer_can_modify?: boolean;
            merge_commit_sha?: string;
            mergeable?: boolean;
            mergeable_state?: string;
            merged?: boolean;
            merged_at?: string;
            merged_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            rebaseable?: boolean;
            requested_reviewers?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments?: double;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List comments in a repository
     * @description **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/comments
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param sort - Can be either `created` or `updated` comments.
     * @param direction - Can be either `asc` or `desc`. Ignored without `sort` parameter.
     * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list-comments-for-repo"(accept?: Header<string>, owner: string, repo: string, sort?: Query<"created" | "updated">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            line?: double;
            node_id?: string;
            original_commit_id?: string;
            original_line?: double;
            original_position?: double;
            original_start_line?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            side?: string;
            start_line?: double;
            start_side?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Get a single comment
     * @description **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Provides details for a review comment.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/comments/{comment_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "pulls/get-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            line?: double;
            node_id?: string;
            original_commit_id?: string;
            original_line?: double;
            original_position?: double;
            original_start_line?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            side?: string;
            start_line?: double;
            start_side?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a comment
     * @description Deletes a review comment.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 204 - Empty response
     */
    "pulls/delete-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64): [(code: 204) => {}];
    /**
     * Edit a comment
     * @description **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Enables you to edit a review comment.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 200 - response
     */
    "pulls/update-comment"(accept?: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            line?: double;
            node_id?: string;
            original_commit_id?: string;
            original_line?: double;
            original_position?: double;
            original_start_line?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            side?: string;
            start_line?: double;
            start_side?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List reactions for a pull request review comment
     * @description List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "reactions/list-for-pull-request-review-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, content?: Query<"+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes">, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create reaction for a pull request review comment
     * @description Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     * @tag reactions
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param comment_id - comment_id parameter
     * @return 201 - response
     */
    "reactions/create-for-pull-request-review-comment"(accept: Header<string>, owner: string, repo: string, comment_id: int64, body?: Body<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Get a single pull request
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Pro, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists details of a pull request by providing its number.
     *
     * When you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     *
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
     *
     * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
     *
     * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
     * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
     * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
     *
     * Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 200 - Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     */
    "pulls/get"(accept?: Header<string>, owner: string, repo: string, pull_number: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            additions?: double;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            changed_files?: double;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            commits?: double;
            commits_url?: string;
            created_at?: string;
            deletions?: double;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            maintainer_can_modify?: boolean;
            merge_commit_sha?: string;
            mergeable?: boolean;
            mergeable_state?: string;
            merged?: boolean;
            merged_at?: string;
            merged_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            rebaseable?: boolean;
            requested_reviewers?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments?: double;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Update a pull request
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Pro, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/pulls/{pull_number}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 200 - response
     */
    "pulls/update"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        base?: string;
        body?: string;
        maintainer_can_modify?: boolean;
        state?: "open" | "closed";
        title?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            additions?: double;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            changed_files?: double;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            commits?: double;
            commits_url?: string;
            created_at?: string;
            deletions?: double;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            maintainer_can_modify?: boolean;
            merge_commit_sha?: string;
            mergeable?: boolean;
            mergeable_state?: string;
            merged?: boolean;
            merged_at?: string;
            merged_by?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            rebaseable?: boolean;
            requested_reviewers?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments?: double;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List comments on a pull request
     * @description **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Lists review comments for a pull request. By default, review comments are in ascending order by ID.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     *
     *
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/comments
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param sort - Can be either `created` or `updated` comments.
     * @param direction - Can be either `asc` or `desc`. Ignored without `sort` parameter.
     * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list-comments"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, sort?: Query<"created" | "updated">, direction?: Query<"asc" | "desc">, since?: Query<string>, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            line?: double;
            node_id?: string;
            original_commit_id?: string;
            original_line?: double;
            original_position?: double;
            original_start_line?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            side?: string;
            start_line?: double;
            start_side?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a comment
     * @description **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Comments](https://developer.github.com/v3/issues/comments/#create-a-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
     *
     * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see [Multi-line comment summary](https://developer.github.com/v3/pulls/comments/#multi-line-comment-summary-3).
     *
     * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/{pull_number}/comments
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 201 - response
     */
    "pulls/create-comment"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        body: string;
        commit_id: string;
        line?: int64;
        path: string;
        position?: int64;
        side?: "LEFT" | "RIGHT";
        start_line?: int64;
        start_side?: "LEFT" | "RIGHT" | "side";
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            line?: double;
            node_id?: string;
            original_commit_id?: string;
            original_line?: double;
            original_position?: double;
            original_start_line?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            side?: string;
            start_line?: double;
            start_side?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Create a review comment reply
     * @description Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param comment_id - comment_id parameter
     * @return 201 - response
     */
    "pulls/create-review-comment-reply"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, comment_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            original_commit_id?: string;
            original_position?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * List commits on a pull request
     * @description Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/commits
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list-commits"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            comments_url?: string;
            commit?: {
                author?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                comment_count?: double;
                committer?: {
                    date?: string;
                    email?: string;
                    name?: string;
                };
                message?: string;
                tree?: {
                    sha?: string;
                    url?: string;
                };
                url?: string;
                verification?: {
                    payload?: string;
                    reason?: string;
                    signature?: string;
                    verified?: boolean;
                };
            };
            committer?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            node_id?: string;
            parents?: Array<{
                sha?: string;
                url?: string;
            }>;
            sha?: string;
            url?: string;
        }>;
    }];
    /**
     * List pull requests files
     * @description **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/files
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list-files"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            additions?: double;
            blob_url?: string;
            changes?: double;
            contents_url?: string;
            deletions?: double;
            filename?: string;
            patch?: string;
            raw_url?: string;
            sha?: string;
            status?: string;
        }>;
    }];
    /**
     * Get if a pull request has been merged
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/merge
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 204 - Response if pull request has been merged
     * @return 404 - Response if pull request has not been merged
     */
    "pulls/check-if-merged"(accept?: Header<string>, owner: string, repo: string, pull_number: int64): [(code: 204) => {}, (code: 404) => {
        isException: true;
    }];
    /**
     * Merge a pull request (Merge Button)
     * @description This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 200 - Response if merge was successful
     * @return 405 - Response if merge cannot be performed
     * @return 409 - Response if sha was provided and pull request head did not match
     */
    "pulls/merge"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        commit_message?: string;
        commit_title?: string;
        merge_method?: "merge" | "squash" | "rebase";
        sha?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            merged?: boolean;
            message?: string;
            sha?: string;
        };
    }, (code: 405, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }, (code: 409, mediaType: "application/json") => {
        body: {
            documentation_url?: string;
            message?: string;
        };
        isException: true;
    }];
    /**
     * List review requests
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/list-review-requests"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: {
            teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            users?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
        };
    }];
    /**
     * Create a review request
     * @description This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 201 - response
     * @return 422 - Response if user is not a collaborator
     */
    "pulls/create-review-request"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        reviewers?: Array<string>;
        team_reviewers?: Array<string>;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            _links?: {
                comments?: {
                    href?: string;
                };
                commits?: {
                    href?: string;
                };
                html?: {
                    href?: string;
                };
                issue?: {
                    href?: string;
                };
                review_comment?: {
                    href?: string;
                };
                review_comments?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
                statuses?: {
                    href?: string;
                };
            };
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            author_association?: string;
            base?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            body?: string;
            closed_at?: string;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            diff_url?: string;
            draft?: boolean;
            head?: {
                label?: string;
                ref?: string;
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                sha?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            html_url?: string;
            id?: double;
            issue_url?: string;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            locked?: boolean;
            merge_commit_sha?: string;
            merged_at?: string;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            patch_url?: string;
            requested_reviewers?: Array<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: double;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
            }>;
            requested_teams?: Array<{
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                parent?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            }>;
            review_comment_url?: string;
            review_comments_url?: string;
            state?: string;
            statuses_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }, (code: 422) => {
        isException: true;
    }];
    /**
     * Delete a review request
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 200 - response
     */
    "pulls/delete-review-request"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        reviewers?: Array<string>;
        team_reviewers?: Array<string>;
    }, "application/json">): [(code: 200) => {}];
    /**
     * List reviews on a pull request
     * @description The list of reviews returns in chronological order.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - The list of reviews returns in chronological order.
     */
    "pulls/list-reviews"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            submitted_at?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Create a pull request review
     * @description This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.
     *
     * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 200 - response
     */
    "pulls/create-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        body?: string;
        comments?: Array<{
            body: string;
            path: string;
            position: int64;
        }>;
        commit_id?: string;
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Get a single review
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @return 200 - response
     */
    "pulls/get-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            submitted_at?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Update a pull request review
     * @description Update the review summary comment with new text.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @return 200 - response
     */
    "pulls/update-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64, body?: Body<{
        body: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Delete a pending review
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @return 200 - response
     */
    "pulls/delete-pending-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Get comments for a single review
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "pulls/get-comments-for-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
                self?: {
                    href?: string;
                };
            };
            author_association?: string;
            body?: string;
            commit_id?: string;
            created_at?: string;
            diff_hunk?: string;
            html_url?: string;
            id?: double;
            in_reply_to_id?: double;
            node_id?: string;
            original_commit_id?: string;
            original_position?: double;
            path?: string;
            position?: double;
            pull_request_review_id?: double;
            pull_request_url?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>;
    }];
    /**
     * Dismiss a pull request review
     * @description **Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @return 200 - response
     */
    "pulls/dismiss-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64, body?: Body<{
        message: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Submit a pull request review
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
     * @tag pulls
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @param review_id - review_id parameter
     * @return 200 - response
     */
    "pulls/submit-review"(accept?: Header<string>, owner: string, repo: string, pull_number: int64, review_id: int64, body?: Body<{
        body?: string;
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                html?: {
                    href?: string;
                };
                pull_request?: {
                    href?: string;
                };
            };
            body?: string;
            commit_id?: string;
            html_url?: string;
            id?: double;
            node_id?: string;
            pull_request_url?: string;
            state?: string;
            submitted_at?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        };
    }];
    /**
     * Update a pull request branch
     * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     * @since 9.0.0
     * @http PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch
     * @tag pulls
     * @param accept - This API is under preview and subject to change.
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param pull_number - pull_number parameter
     * @return 202 - response
     */
    "pulls/update-branch"(accept: Header<string>, owner: string, repo: string, pull_number: int64, body?: Body<{
        expected_head_sha?: string;
    }, "application/json">): [(code: 202, mediaType: "application/json") => {
        body: {
            message?: string;
            url?: string;
        };
    }];
    /**
     * Get the README
     * @description Gets the preferred README for a repository.
     *
     * READMEs support [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw content or rendered HTML.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/readme
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param ref - The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
     * @return 200 - response
     */
    "repos/get-readme"(accept?: Header<string>, owner: string, repo: string, ref?: Query<string>): [(code: 200, mediaType: "application/json") => {
        body: {
            _links?: {
                git?: string;
                html?: string;
                self?: string;
            };
            content?: string;
            download_url?: string;
            encoding?: string;
            git_url?: string;
            html_url?: string;
            name?: string;
            path?: string;
            sha?: string;
            size?: double;
            type?: string;
            url?: string;
        };
    }];
    /**
     * List releases for a repository
     * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-tags).
     *
     * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-releases"(accept?: Header<string>, owner: string, repo: string, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            assets?: Array<{
                browser_download_url?: string;
                content_type?: string;
                created_at?: string;
                download_count?: double;
                id?: double;
                label?: string;
                name?: string;
                node_id?: string;
                size?: double;
                state?: string;
                updated_at?: string;
                uploader?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                url?: string;
            }>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        }>;
    }];
    /**
     * Create a release
     * @description Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/releases
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 201 - response
     */
    "repos/create-release"(accept?: Header<string>, owner: string, repo: string, body?: Body<{
        body?: string;
        draft?: boolean;
        name?: string;
        prerelease?: boolean;
        tag_name: string;
        target_commitish?: string;
    }, "application/json">): [(code: 201, mediaType: "application/json") => {
        body: {
            assets?: Array<any>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        };
    }];
    /**
     * Get a single release asset
     * @description To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases/assets/{asset_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param asset_id - asset_id parameter
     * @return 200 - To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
     */
    "repos/get-release-asset"(accept?: Header<string>, owner: string, repo: string, asset_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            browser_download_url?: string;
            content_type?: string;
            created_at?: string;
            download_count?: double;
            id?: double;
            label?: string;
            name?: string;
            node_id?: string;
            size?: double;
            state?: string;
            updated_at?: string;
            uploader?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            url?: string;
        };
    }];
    /**
     * Delete a release asset
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param asset_id - asset_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-release-asset"(accept?: Header<string>, owner: string, repo: string, asset_id: int64): [(code: 204) => {}];
    /**
     * Edit a release asset
     * @description Users with push access to the repository can edit a release asset.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param asset_id - asset_id parameter
     * @return 200 - response
     */
    "repos/update-release-asset"(accept?: Header<string>, owner: string, repo: string, asset_id: int64, body?: Body<{
        label?: string;
        name?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            browser_download_url?: string;
            content_type?: string;
            created_at?: string;
            download_count?: double;
            id?: double;
            label?: string;
            name?: string;
            node_id?: string;
            size?: double;
            state?: string;
            updated_at?: string;
            uploader?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            url?: string;
        };
    }];
    /**
     * Get the latest release
     * @description View the latest published full release for the repository.
     *
     * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases/latest
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @return 200 - response
     */
    "repos/get-latest-release"(accept?: Header<string>, owner: string, repo: string): [(code: 200, mediaType: "application/json") => {
        body: {
            assets?: Array<{
                browser_download_url?: string;
                content_type?: string;
                created_at?: string;
                download_count?: double;
                id?: double;
                label?: string;
                name?: string;
                node_id?: string;
                size?: double;
                state?: string;
                updated_at?: string;
                uploader?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                url?: string;
            }>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        };
    }];
    /**
     * Get a release by tag name
     * @description Get a published release with the specified tag.
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases/tags/{tag}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param tag - tag parameter
     * @return 200 - response
     */
    "repos/get-release-by-tag"(accept?: Header<string>, owner: string, repo: string, tag: string): [(code: 200, mediaType: "application/json") => {
        body: {
            assets?: Array<{
                browser_download_url?: string;
                content_type?: string;
                created_at?: string;
                download_count?: double;
                id?: double;
                label?: string;
                name?: string;
                node_id?: string;
                size?: double;
                state?: string;
                updated_at?: string;
                uploader?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                url?: string;
            }>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        };
    }];
    /**
     * Get a single release
     * @description **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases/{release_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param release_id - release_id parameter
     * @return 200 - **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).
     */
    "repos/get-release"(accept?: Header<string>, owner: string, repo: string, release_id: int64): [(code: 200, mediaType: "application/json") => {
        body: {
            assets?: Array<{
                browser_download_url?: string;
                content_type?: string;
                created_at?: string;
                download_count?: double;
                id?: double;
                label?: string;
                name?: string;
                node_id?: string;
                size?: double;
                state?: string;
                updated_at?: string;
                uploader?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                url?: string;
            }>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        };
    }];
    /**
     * Delete a release
     * @description Users with push access to the repository can delete a release.
     * @since 9.0.0
     * @http DELETE /repos/{owner}/{repo}/releases/{release_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param release_id - release_id parameter
     * @return 204 - Empty response
     */
    "repos/delete-release"(accept?: Header<string>, owner: string, repo: string, release_id: int64): [(code: 204) => {}];
    /**
     * Edit a release
     * @description Users with push access to the repository can edit a release.
     * @since 9.0.0
     * @http PATCH /repos/{owner}/{repo}/releases/{release_id}
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param release_id - release_id parameter
     * @return 200 - response
     */
    "repos/update-release"(accept?: Header<string>, owner: string, repo: string, release_id: int64, body?: Body<{
        body?: string;
        draft?: boolean;
        name?: string;
        prerelease?: boolean;
        tag_name?: string;
        target_commitish?: string;
    }, "application/json">): [(code: 200, mediaType: "application/json") => {
        body: {
            assets?: Array<{
                browser_download_url?: string;
                content_type?: string;
                created_at?: string;
                download_count?: double;
                id?: double;
                label?: string;
                name?: string;
                node_id?: string;
                size?: double;
                state?: string;
                updated_at?: string;
                uploader?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                url?: string;
            }>;
            assets_url?: string;
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            created_at?: string;
            draft?: boolean;
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            prerelease?: boolean;
            published_at?: string;
            tag_name?: string;
            tarball_url?: string;
            target_commitish?: string;
            upload_url?: string;
            url?: string;
            zipball_url?: string;
        };
    }];
    /**
     * List assets for a release
     * @since 9.0.0
     * @http GET /repos/{owner}/{repo}/releases/{release_id}/assets
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param release_id - release_id parameter
     * @param per_page - Results per page (max 100)
     * @param page - Page number of the results to fetch.
     * @return 200 - response
     */
    "repos/list-assets-for-release"(accept?: Header<string>, owner: string, repo: string, release_id: int64, per_page?: Query<int64>, page?: Query<int64>): [(code: 200, mediaType: "application/json") => {
        body: Array<{
            browser_download_url?: string;
            content_type?: string;
            created_at?: string;
            download_count?: double;
            id?: double;
            label?: string;
            name?: string;
            node_id?: string;
            size?: double;
            state?: string;
            updated_at?: string;
            uploader?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            url?: string;
        }>;
    }];
    /**
     * Upload a release asset
     * @description This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in the response of the [Create a release endpoint](https://developer.github.com/v3/repos/releases/#create-a-release) to upload a release asset.
     *
     * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
     *
     * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
     *
     * `application/zip`
     *
     * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.
     *
     * **Notes:**
     *
     * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)" endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://github.com/contact).
     * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     *
     * This may leave an empty asset with a state of `starter`. It can be safely deleted.
     * @since 9.0.0
     * @http POST /repos/{owner}/{repo}/releases/{release_id}/assets
     * @tag repos
     * @param accept - Setting to `application/vnd.github.v3+json` is recommended
     * @param content_length - Size of the asset in bytes. Most libraries will calculate the header automatically
     * @param content_type - Media Type of the asset. For a list of media types, see https://www.iana.org/assignments/media-types/media-types.xhtml
     * @param owner - owner parameter
     * @param repo - repo parameter
     * @param release_id - release_id parameter
     * @param name - name parameter
     * @param label - label parameter
     * @return 201 - Response for successful upload
     */
    "repos/upload-release-asset"(accept?: Header<string>, content_length: Header<string, "content-length">, content_type: Header<string, "content-type">, owner: string, repo: string, release_id: int64, name?: Query<string>, label?: Query<string>, body?: Body<string, "*/*">): [(code: 201, mediaType: "application/json") => {
        body: {
            browser_download_url?: string;
            content_type?: string;
            created_at?: string;
            download_count?: double;
            id?: double;
            label?: string;
            name?: string;
            node_id?: string;
            size?: double;
            state?: string;
            updated_at?: string;
            uploader?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            url?: string;
        };
    }];
}
    *
//**
    * List;
Stargazers
    * ;
You;
can;
also;
find;
out;
_when_;
stars;
were;
created;
by;
passing;
the;
following;
custom[media];
type;
(https: *, 
@since
, , , , 
@http
GET) => ;
/repos/;
{
    owner;
}
/{repo}/stargazers
    * ;
activity
    * ;
accept - Setting;
to `application/vnd.github.v3+json`;
is;
recommended
    * ;
owner - owner;
parameter
    * ;
repo - repo;
parameter
    * ;
per_page - Results;
per;
page(max, 100)
    * ;
page - Page;
number;
of;
the;
results;
to;
fetch.
    * ;
return 200 - response
    * /;
"activity/list-stargazers-for-repo"(accept ?  : Header < string > , owner, string, repo, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [[(code: 200, mediaType: "application/json") => {
            body: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>();
        }, (code: 200, mediaType: "application/vnd.github.v3.star+json") => {
            body: Array<{
                starred_at?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>();
        }]]);
/**
 * Get the number of additions and deletions per week
 * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 *
 *
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/stats/code_frequency
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
"repos/get-code-frequency-stats"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<Array<double>>();
    }];
/**
 * Get the last year of commit activity data
 * @description Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 *
 *
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/stats/commit_activity
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"repos/get-commit-activity-stats"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<{
            days?: Array<double>;
            total?: double;
            week?: double;
        }>();
    }];
/**
 * Get contributors list with additions, deletions, and commit counts
 * @description *   `total` - The Total number of commits authored by the contributor.
 *
 * Weekly Hash (`weeks` array):
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 *
 *
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/stats/contributors
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
"repos/get-contributors-stats"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            total?: double;
            weeks?: Array<{
                a?: double;
                c?: double;
                d?: double;
                w?: string;
            }>;
        }>();
    }];
/**
 * Get the weekly commit count for the repository owner and everyone else
 * @description Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 *
 *
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/stats/participation
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - The array order is oldest week (index 0) to most recent week.
 */
"repos/get-participation-stats"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            all ?  : Array<double>();
            owner ?  : Array<double>();
        }
        ;
    }];
/**
 * Get the number of commits per hour in each day
 * @description Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/stats/punch_card
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
"repos/get-punch-card-stats"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<Array<double>>();
    }];
/**
 * Create a status
 * @description Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 * @since 9.0.0
 * @http POST /repos/{owner}/{repo}/statuses/{sha}
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param sha - sha parameter
 * @return 201 - response
 */
"repos/create-status"(accept ?  : Header < string > , owner, string, repo, string, sha, string, body ?  : Body<{
    context?: string;
    description?: string;
    state: "error" | "failure" | "pending" | "success";
    target_url?: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            avatar_url ?  : string;
            context ?  : string;
            created_at ?  : string;
            creator ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            description ?  : string;
            id ?  : double;
            node_id ?  : string;
            state ?  : string;
            target_url ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List watchers
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/subscribers
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"activity/list-watchers-for-repo"(accept ?  : Header < string > , owner, string, repo, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Get a Repository Subscription
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/subscription
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - Response if you are subscribed to the repository
 * @return 404 - Response if you are not subscribed to the repository
 */
"activity/get-repo-subscription"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            ignored ?  : boolean;
            reason ?  : string;
            repository_url ?  : string;
            subscribed ?  : boolean;
            url ?  : string;
        }
        ;
    }, (code: 404) => {
        isException: true;
    }];
/**
 * Set a Repository Subscription
 * @description If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription) completely.
 * @since 9.0.0
 * @http PUT /repos/{owner}/{repo}/subscription
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"activity/set-repo-subscription"(accept ?  : Header < string > , owner, string, repo, string, body ?  : Body<{
    ignored?: boolean;
    subscribed?: boolean;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            ignored ?  : boolean;
            reason ?  : string;
            repository_url ?  : string;
            subscribed ?  : boolean;
            url ?  : string;
        }
        ;
    }]);
/**
 * Delete a Repository Subscription
 * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://developer.github.com/v3/activity/watching/#set-a-repository-subscription).
 * @since 9.0.0
 * @http DELETE /repos/{owner}/{repo}/subscription
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"activity/delete-repo-subscription"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * List tags
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/tags
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"repos/list-tags"(accept ?  : Header < string > , owner, string, repo, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            commit?: {
                sha?: string;
                url?: string;
            };
            name?: string;
            tarball_url?: string;
            zipball_url?: string;
        }>();
    }]);
/**
 * List teams
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/teams
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"repos/list-teams"(accept ?  : Header < string > , owner, string, repo, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            html_url?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: string;
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>();
    }]);
/**
 * List all topics for a repository
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/topics
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"repos/list-topics"(accept, Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            names ?  : Array<string>();
        }
        ;
    }];
/**
 * Replace all topics for a repository
 * @since 9.0.0
 * @http PUT /repos/{owner}/{repo}/topics
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"repos/replace-topics"(accept, Header < string > , owner, string, repo, string, body ?  : Body<{
    names: Array<string>;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            names ?  : Array<string>();
        }
        ;
    }]);
/**
 * Clones
 * @description Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/traffic/clones
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param per - Must be one of: `day`, `week`.
 * @return 200 - response
 */
"repos/get-clones"(accept ?  : Header < string > , owner, string, repo, string, per ?  : Query<"day" | "week">(), [(code: 200, mediaType: "application/json") => {
        body: {
            clones ?  : Array<{
                count: double;
                timestamp: string;
                uniques: double;
            }>();
            count ?  : double;
            uniques ?  : double;
        }
        ;
    }]);
/**
 * List paths
 * @description Get the top 10 popular contents over the last 14 days.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/traffic/popular/paths
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"repos/get-top-paths"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<{
            count?: double;
            path?: string;
            title?: string;
            uniques?: double;
        }>();
    }];
/**
 * List referrers
 * @description Get the top 10 referrers over the last 14 days.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/traffic/popular/referrers
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - response
 */
"repos/get-top-referrers"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 200, mediaType: "application/json") => {
        body: Array<{
            count?: double;
            referrer?: string;
            uniques?: double;
        }>();
    }];
/**
 * Views
 * @description Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/traffic/views
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param per - Must be one of: `day`, `week`.
 * @return 200 - response
 */
"repos/get-views"(accept ?  : Header < string > , owner, string, repo, string, per ?  : Query<"day" | "week">(), [(code: 200, mediaType: "application/json") => {
        body: {
            count ?  : double;
            uniques ?  : double;
            views ?  : Array<{
                count: double;
                timestamp: string;
                uniques: double;
            }>();
        }
        ;
    }]);
/**
 * Transfer a repository
 * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
 * @since 9.0.0
 * @http POST /repos/{owner}/{repo}/transfer
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 202 - response
 */
"repos/transfer"(accept ?  : Header < string > , owner, string, repo, string, body ?  : Body<{
    new_owner?: string;
    team_ids?: Array<int64>;
}, "application/json">(), [(code: 202, mediaType: "application/json") => {
        body: {
            allow_merge_commit ?  : boolean;
            allow_rebase_merge ?  : boolean;
            allow_squash_merge ?  : boolean;
            archive_url ?  : string;
            archived ?  : boolean;
            assignees_url ?  : string;
            blobs_url ?  : string;
            branches_url ?  : string;
            clone_url ?  : string;
            collaborators_url ?  : string;
            comments_url ?  : string;
            commits_url ?  : string;
            compare_url ?  : string;
            contents_url ?  : string;
            contributors_url ?  : string;
            created_at ?  : string;
            default_branch ?  : string;
            deployments_url ?  : string;
            description ?  : string;
            disabled ?  : boolean;
            downloads_url ?  : string;
            events_url ?  : string;
            fork ?  : boolean;
            forks_count ?  : double;
            forks_url ?  : string;
            full_name ?  : string;
            git_commits_url ?  : string;
            git_refs_url ?  : string;
            git_tags_url ?  : string;
            git_url ?  : string;
            has_downloads ?  : boolean;
            has_issues ?  : boolean;
            has_pages ?  : boolean;
            has_projects ?  : boolean;
            has_wiki ?  : boolean;
            homepage ?  : string;
            hooks_url ?  : string;
            html_url ?  : string;
            id ?  : double;
            is_template ?  : boolean;
            issue_comment_url ?  : string;
            issue_events_url ?  : string;
            issues_url ?  : string;
            keys_url ?  : string;
            labels_url ?  : string;
            language ?  : string;
            languages_url ?  : string;
            merges_url ?  : string;
            milestones_url ?  : string;
            mirror_url ?  : string;
            name ?  : string;
            network_count ?  : double;
            node_id ?  : string;
            notifications_url ?  : string;
            open_issues_count ?  : double;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            permissions ?  : {
                admin: boolean,
                pull: boolean,
                push: boolean
            };
            private ?  : boolean;
            pulls_url ?  : string;
            pushed_at ?  : string;
            releases_url ?  : string;
            size ?  : double;
            ssh_url ?  : string;
            stargazers_count ?  : double;
            stargazers_url ?  : string;
            statuses_url ?  : string;
            subscribers_count ?  : double;
            subscribers_url ?  : string;
            subscription_url ?  : string;
            svn_url ?  : string;
            tags_url ?  : string;
            teams_url ?  : string;
            temp_clone_token ?  : string;
            template_repository ?  : string;
            topics ?  : Array<string>();
            trees_url ?  : string;
            updated_at ?  : string;
            url ?  : string;
            visibility ?  : string;
            watchers_count ?  : double;
        }
        ;
    }]);
/**
 * Check if vulnerability alerts are enabled for a repository
 * @description Shows whether vulnerability alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)" in the GitHub Help documentation.
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/vulnerability-alerts
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Response if repository is enabled with vulnerability alerts
 * @return 404 - Response if repository is not enabled with vulnerability alerts
 */
"repos/check-vulnerability-alerts"(accept, Header < string > , owner, string, repo, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Enable vulnerability alerts
 * @description Enables vulnerability alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)" in the GitHub Help documentation.
 * @since 9.0.0
 * @http PUT /repos/{owner}/{repo}/vulnerability-alerts
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"repos/enable-vulnerability-alerts"(accept, Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * Disable vulnerability alerts
 * @description Disables vulnerability alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)" in the GitHub Help documentation.
 * @since 9.0.0
 * @http DELETE /repos/{owner}/{repo}/vulnerability-alerts
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"repos/disable-vulnerability-alerts"(accept, Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * Get archive link
 * @description Gets a redirect URL to download an archive for a repository. The `:archive_format` can be either `tarball` or `zipball`. The `:ref` must be a valid Git reference. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request.
 *
 * _Note_: For private repositories, these links are temporary and expire after five minutes.
 *
 * To follow redirects with curl, use the `-L` switch:
 *
 *
 * @since 9.0.0
 * @http GET /repos/{owner}/{repo}/{archive_format}/{ref}
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @param archive_format - archive_format parameter
 * @param ref - ref parameter
 * @return 302 - response
 */
"repos/get-archive-link"(accept ?  : Header < string > , owner, string, repo, string, archive_format, string, ref, string);
[(code: 302) => { }];
/**
 * Create repository using a repository template
 * @description Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [`GET /repos/:owner/:repo`](https://developer.github.com/v3/repos/#get) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository
 * *   `repo` scope to create a private repository
 *
 * \`
 * @since 9.0.0
 * @http POST /repos/{template_owner}/{template_repo}/generate
 * @tag repos
 * @param accept - This API is under preview and subject to change.
 * @param template_owner - template_owner parameter
 * @param template_repo - template_repo parameter
 * @return 201 - response
 */
"repos/create-using-template"(accept, Header < string > , template_owner, string, template_repo, string, body ?  : Body<{
    description?: string;
    name: string;
    owner?: string;
    private?: boolean;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            allow_merge_commit ?  : boolean;
            allow_rebase_merge ?  : boolean;
            allow_squash_merge ?  : boolean;
            archive_url ?  : string;
            archived ?  : boolean;
            assignees_url ?  : string;
            blobs_url ?  : string;
            branches_url ?  : string;
            clone_url ?  : string;
            collaborators_url ?  : string;
            comments_url ?  : string;
            commits_url ?  : string;
            compare_url ?  : string;
            contents_url ?  : string;
            contributors_url ?  : string;
            created_at ?  : string;
            default_branch ?  : string;
            deployments_url ?  : string;
            description ?  : string;
            disabled ?  : boolean;
            downloads_url ?  : string;
            events_url ?  : string;
            fork ?  : boolean;
            forks_count ?  : double;
            forks_url ?  : string;
            full_name ?  : string;
            git_commits_url ?  : string;
            git_refs_url ?  : string;
            git_tags_url ?  : string;
            git_url ?  : string;
            has_downloads ?  : boolean;
            has_issues ?  : boolean;
            has_pages ?  : boolean;
            has_projects ?  : boolean;
            has_wiki ?  : boolean;
            homepage ?  : string;
            hooks_url ?  : string;
            html_url ?  : string;
            id ?  : double;
            is_template ?  : boolean;
            issue_comment_url ?  : string;
            issue_events_url ?  : string;
            issues_url ?  : string;
            keys_url ?  : string;
            labels_url ?  : string;
            language ?  : string;
            languages_url ?  : string;
            merges_url ?  : string;
            milestones_url ?  : string;
            mirror_url ?  : string;
            name ?  : string;
            network_count ?  : double;
            node_id ?  : string;
            notifications_url ?  : string;
            open_issues_count ?  : double;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            permissions ?  : {
                admin: boolean,
                pull: boolean,
                push: boolean
            };
            private ?  : boolean;
            pulls_url ?  : string;
            pushed_at ?  : string;
            releases_url ?  : string;
            size ?  : double;
            ssh_url ?  : string;
            stargazers_count ?  : double;
            stargazers_url ?  : string;
            statuses_url ?  : string;
            subscribers_count ?  : double;
            subscribers_url ?  : string;
            subscription_url ?  : string;
            svn_url ?  : string;
            tags_url ?  : string;
            teams_url ?  : string;
            temp_clone_token ?  : string;
            template_repository ?  : {
                allow_merge_commit: boolean,
                allow_rebase_merge: boolean,
                allow_squash_merge: boolean,
                archive_url: string,
                archived: boolean,
                assignees_url: string,
                blobs_url: string,
                branches_url: string,
                clone_url: string,
                collaborators_url: string,
                comments_url: string,
                commits_url: string,
                compare_url: string,
                contents_url: string,
                contributors_url: string,
                created_at: string,
                default_branch: string,
                deployments_url: string,
                description: string,
                disabled: boolean,
                downloads_url: string,
                events_url: string,
                fork: boolean,
                forks_count: double,
                forks_url: string,
                full_name: string,
                git_commits_url: string,
                git_refs_url: string,
                git_tags_url: string,
                git_url: string,
                has_downloads: boolean,
                has_issues: boolean,
                has_pages: boolean,
                has_projects: boolean,
                has_wiki: boolean,
                homepage: string,
                hooks_url: string,
                html_url: string,
                id: double,
                is_template: boolean,
                issue_comment_url: string,
                issue_events_url: string,
                issues_url: string,
                keys_url: string,
                labels_url: string,
                language: string,
                languages_url: string,
                merges_url: string,
                milestones_url: string,
                mirror_url: string,
                name: string,
                network_count: double,
                node_id: string,
                notifications_url: string,
                open_issues_count: double,
                owner: {
                    avatar_url: string,
                    events_url: string,
                    followers_url: string,
                    following_url: string,
                    gists_url: string,
                    gravatar_id: string,
                    html_url: string,
                    id: double,
                    login: string,
                    node_id: string,
                    organizations_url: string,
                    received_events_url: string,
                    repos_url: string,
                    site_admin: boolean,
                    starred_url: string,
                    subscriptions_url: string,
                    type: string,
                    url: string
                },
                permissions: {
                    admin: boolean,
                    pull: boolean,
                    push: boolean
                },
                private: boolean,
                pulls_url: string,
                pushed_at: string,
                releases_url: string,
                size: double,
                ssh_url: string,
                stargazers_count: double,
                stargazers_url: string,
                statuses_url: string,
                subscribers_count: double,
                subscribers_url: string,
                subscription_url: string,
                svn_url: string,
                tags_url: string,
                teams_url: string,
                temp_clone_token: string,
                template_repository: string,
                topics: Array<string>(),
                trees_url: string,
                updated_at: string,
                url: string,
                visibility: string,
                watchers_count: double
            };
            topics ?  : Array<string>();
            trees_url ?  : string;
            updated_at ?  : string;
            url ?  : string;
            visibility ?  : string;
            watchers_count ?  : double;
        }
        ;
    }]);
/**
 * List all public repositories
 * @description Lists all public repositories in the order that they were created.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.
 * @since 9.0.0
 * @http GET /repositories
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param since - The integer ID of the last repository that you've seen.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"repos/list-public"(accept ?  : Header < string > , since ?  : Query < int64 > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            deployments_url?: string;
            description?: string;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            html_url?: string;
            id?: double;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            name?: string;
            node_id?: string;
            notifications_url?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            private?: boolean;
            pulls_url?: string;
            releases_url?: string;
            ssh_url?: string;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_url?: string;
            subscription_url?: string;
            tags_url?: string;
            teams_url?: string;
            trees_url?: string;
            url?: string;
        }>();
    }]);
/**
 * Get a list of provisioned identities
 * @description To filter for a specific email address, use the `email` query parameter and the `eq` operator:
 *
 * Your filter would look like this cURL command:
 *
 * Retrieves users that match the filter. In the example, we searched only for [octocat@github.com](mailto:octocat@github.com).
 *
 * Retrieves a paginated list of all provisioned organization members, including pending invitations.
 * @since 9.0.0
 * @http GET /scim/v2/organizations/{org}/Users
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @param startIndex - Used for pagination: the index of the first result to return.
 * @param count - Used for pagination: the number of results to return.
 * @param filter - Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query: `?filter=userName%20eq%20\"Octocat\"`.
 * @return 200 - response
 */
"scim/list-provisioned-identities"(accept ?  : Header < string > , org, string, startIndex ?  : Query < int64 > , count ?  : Query < int64 > , filter ?  : Query<string>(), [(code: 200, mediaType: "application/json") => {
        body: {
            Resources ?  : Array<{
                active?: boolean;
                emails?: Array<{
                    primary?: boolean;
                    type?: string;
                    value?: string;
                }>;
                externalId?: string;
                id?: string;
                meta?: {
                    created?: string;
                    lastModified?: string;
                    location?: string;
                    resourceType?: string;
                };
                name?: {
                    familyName?: string;
                    givenName?: string;
                };
                schemas?: Array<string>;
                userName?: string;
            }>();
            itemsPerPage ?  : double;
            schemas ?  : Array<string>();
            startIndex ?  : double;
            totalResults ?  : double;
        }
        ;
    }]);
/**
 * Provision and invite users
 * @description Provision organization membership for a user, and send an activation email to the email address.
 *
 * As shown in the following example, you must at least provide the required values for the user: `userName`, `name`, and `emails`.
 * @since 9.0.0
 * @http POST /scim/v2/organizations/{org}/Users
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @return 201 - response
 */
"scim/provision-and-invite-users"(accept ?  : Header < string > , org, string);
[(code: 201, mediaType: "application/json") => {
        body: {
            active ?  : boolean;
            emails ?  : Array<{
                primary?: boolean;
                type?: string;
                value?: string;
            }>();
            externalId ?  : string;
            id ?  : string;
            meta ?  : {
                created: string,
                lastModified: string,
                location: string,
                resourceType: string
            };
            name ?  : {
                familyName: string,
                givenName: string
            };
            schemas ?  : Array<string>();
            userName ?  : string;
        }
        ;
    }];
/**
 * Get provisioning details for a single user
 * @since 9.0.0
 * @http GET /scim/v2/organizations/{org}/Users/{scim_user_id}
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @param scim_user_id - scim_user_id parameter
 * @return 200 - response
 */
"scim/get-provisioning-details-for-user"(accept ?  : Header < string > , org, string, scim_user_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            active ?  : boolean;
            emails ?  : Array<{
                primary?: boolean;
                type?: string;
                value?: string;
            }>();
            externalId ?  : string;
            id ?  : string;
            meta ?  : {
                created: string,
                lastModified: string,
                location: string,
                resourceType: string
            };
            name ?  : {
                familyName: string,
                givenName: string
            };
            schemas ?  : Array<string>();
            userName ?  : string;
        }
        ;
    }];
/**
 * Replace a provisioned user's information
 * @description Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update a user attribute](https://developer.github.com/v3/scim/#update-a-user-attribute) endpoint instead.
 *
 * As shown in the following example, you must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 * @since 9.0.0
 * @http PUT /scim/v2/organizations/{org}/Users/{scim_user_id}
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @param scim_user_id - scim_user_id parameter
 * @return 200 - response
 */
"scim/replace-provisioned-user-information"(accept ?  : Header < string > , org, string, scim_user_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            active ?  : boolean;
            emails ?  : Array<{
                primary?: boolean;
                type?: string;
                value?: string;
            }>();
            externalId ?  : string;
            id ?  : string;
            meta ?  : {
                created: string,
                lastModified: string,
                location: string,
                resourceType: string
            };
            name ?  : {
                familyName: string,
                givenName: string
            };
            schemas ?  : Array<string>();
            userName ?  : string;
        }
        ;
    }];
/**
 * Remove a user from the organization
 * @since 9.0.0
 * @http DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @param scim_user_id - scim_user_id parameter
 * @return 204 - Empty response
 */
"scim/remove-user-from-org"(accept ?  : Header < string > , org, string, scim_user_id, int64);
[(code: 204) => { }];
/**
 * Update a user attribute
 * @description Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations.
 *
 * The following example shows adding a new email address and updating the user's given name. For other examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 *
 * ```
 * @since 9.0.0
 * @http PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}
 * @tag scim
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @param scim_user_id - scim_user_id parameter
 * @return 200 - response
 */
"scim/update-user-attribute"(accept ?  : Header < string > , org, string, scim_user_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            active ?  : boolean;
            emails ?  : Array<{
                primary?: boolean;
                type: string;
                value: string;
            }>();
            externalId ?  : string;
            id ?  : string;
            meta ?  : {
                created: string,
                lastModified: string,
                location: string,
                resourceType: string
            };
            name ?  : {
                familyName: string,
                givenName: string
            };
            schemas ?  : Array<string>();
            userName ?  : string;
        }
        ;
    }];
/**
 * Search code
 * @description Find file contents via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * **Note:** You must [authenticate](https://developer.github.com/v3/#authentication) to search for code across all public repositories.
 *
 * **Considerations for code search**
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 *
 * Suppose you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery). Your query would look something like this:
 *
 * Here, we're searching for the keyword `addClass` within a file's contents. We're making sure that we're only looking in files where the language is JavaScript. And we're scoping the search to the `repo:jquery/jquery` repository.
 * @since 9.0.0
 * @http GET /search/code
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
 * @param sort - Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"search/code"(accept ?  : Header < string > , q, Query < string > , sort ?  : Query < "indexed" > , order ?  : Query < "desc" | "asc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                git_url?: string;
                html_url?: string;
                name?: string;
                path?: string;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                score?: double;
                sha?: string;
                url?: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search commits
 * @description Find commits via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * **Considerations for commit search**
 *
 * Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 *
 * Suppose you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 * @since 9.0.0
 * @http GET /search/commits
 * @tag search
 * @param accept - This API is under preview and subject to change.
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
 * @param sort - Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"search/commits"(accept, Header < string > , q, Query < string > , sort ?  : Query < "author-date" | "committer-date" > , order ?  : Query < "desc" | "asc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                author?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                comments_url?: string;
                commit?: {
                    author?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    comment_count?: double;
                    committer?: {
                        date?: string;
                        email?: string;
                        name?: string;
                    };
                    message?: string;
                    tree?: {
                        sha?: string;
                        url?: string;
                    };
                    url?: string;
                };
                committer?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                html_url?: string;
                parents?: Array<{
                    html_url?: string;
                    sha?: string;
                    url?: string;
                }>;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                score?: double;
                sha?: string;
                url?: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search issues and pull requests
 * @description Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * Let's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * In this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.
 * @since 9.0.0
 * @http GET /search/issues
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
 * @param sort - Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"search/issues-and-pull-requests"(accept ?  : Header < string > , q, Query < string > , sort ?  : Query < "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "interactions" | "created" | "updated" > , order ?  : Query < "desc" | "asc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                assignee?: string;
                body?: string;
                closed_at?: string;
                comments?: double;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: double;
                labels?: Array<{
                    color?: string;
                    id?: double;
                    name?: string;
                    node_id?: string;
                    url?: string;
                }>;
                labels_url?: string;
                milestone?: string;
                node_id?: string;
                number?: double;
                pull_request?: {
                    diff_url?: string;
                    html_url?: string;
                    patch_url?: string;
                };
                repository_url?: string;
                score?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search labels
 * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * Suppose you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * The labels that best match for the query appear first in the search results.
 * @since 9.0.0
 * @http GET /search/labels
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param repository_id - The id of the repository.
 * @param q - The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
 * @param sort - Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @return 200 - response
 */
"search/labels"(accept ?  : Header < string > , repository_id, Query < int64 > , q, Query < string > , sort ?  : Query < "created" | "updated" > , order ?  : Query<"desc" | "asc">(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                color: string;
                default: boolean;
                description: string;
                id: double;
                name: string;
                node_id: string;
                score: double;
                url: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search repositories
 * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * Suppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this.
 *
 * You can search for multiple topics by adding more `topic:` instances, and including the `mercy-preview` header. For example:
 *
 * In this request, we're searching for repositories with the word `tetris` in the name, the description, or the README. We're limiting the results to only find repositories where the primary language is Assembly. We're sorting by stars in descending order, so that the most popular repositories appear first in the search results.
 * @since 9.0.0
 * @http GET /search/repositories
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
 * @param sort - Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"search/repos"(accept ?  : Header < string > , q, Query < string > , sort ?  : Query < "stars" | "forks" | "help-wanted-issues" | "updated" > , order ?  : Query < "desc" | "asc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                created_at?: string;
                default_branch?: string;
                description?: string;
                fork?: boolean;
                forks_count?: double;
                full_name?: string;
                homepage?: string;
                html_url?: string;
                id?: double;
                language?: string;
                master_branch?: string;
                name?: string;
                node_id?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    gravatar_id?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    received_events_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pushed_at?: string;
                score?: double;
                size?: double;
                stargazers_count?: double;
                updated_at?: string;
                url?: string;
                watchers_count?: double;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search topics
 * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * Suppose you want to search for topics related to Ruby that are featured on [https://github.com/topics](https://github.com/topics). Your query might look like this:
 *
 * In this request, we're searching for topics with the keyword `ruby`, and we're limiting the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 *
 * **Note:** A search for featured Ruby topics only has 6 total results, so a [Link header](https://developer.github.com/v3/#link-header) indicating pagination is not included in the response.
 * @since 9.0.0
 * @http GET /search/topics
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
 * @return 200 - response
 */
"search/topics"(accept ?  : Header < string > , q, Query<string>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                created_at: string;
                created_by: string;
                curated: boolean;
                description: string;
                display_name: string;
                featured: boolean;
                name: string;
                released: string;
                score: double;
                short_description: string;
                updated_at: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Search users
 * @description Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
 *
 * Imagine you're looking for a list of popular users. You might try out this query:
 *
 * Here, we're looking at users with the name Tom. We're only interested in those with more than 42 repositories, and only if they have over 1,000 followers.
 * @since 9.0.0
 * @http GET /search/users
 * @tag search
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param q - The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
 * @param sort - Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
 * @param order - Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"search/users"(accept ?  : Header < string > , q, Query < string > , sort ?  : Query < "followers" | "repositories" | "joined" > , order ?  : Query < "desc" | "asc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            incomplete_results ?  : boolean;
            items ?  : Array<{
                avatar_url?: string;
                followers_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                score?: double;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Get team (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [`Get team by name`](https://developer.github.com/v3/teams/#get-team-by-name) endpoint.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 200 - response
 */
"teams/get-legacy"(accept ?  : Header < string > , team_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            description ?  : string;
            html_url ?  : string;
            id ?  : double;
            members_count ?  : double;
            members_url ?  : string;
            name ?  : string;
            node_id ?  : string;
            organization ?  : {
                avatar_url: string,
                blog: string,
                company: string,
                created_at: string,
                description: string,
                email: string,
                events_url: string,
                followers: double,
                following: double,
                has_organization_projects: boolean,
                has_repository_projects: boolean,
                hooks_url: string,
                html_url: string,
                id: double,
                is_verified: boolean,
                issues_url: string,
                location: string,
                login: string,
                members_url: string,
                name: string,
                node_id: string,
                public_gists: double,
                public_members_url: string,
                public_repos: double,
                repos_url: string,
                type: string,
                url: string
            };
            parent ?  : string;
            permission ?  : string;
            privacy ?  : string;
            repos_count ?  : double;
            repositories_url ?  : string;
            slug ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * Delete team (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete team`](https://developer.github.com/v3/teams/#delete-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 204 - Empty response
 */
"teams/delete-legacy"(accept ?  : Header < string > , team_id, int64);
[(code: 204) => { }];
/**
 * Edit team (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Edit team`](https://developer.github.com/v3/teams/#edit-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PATCH /teams/{team_id}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 201 - response
 */
"teams/update-legacy"(accept ?  : Header < string > , team_id, int64, body ?  : Body<{
    description?: string;
    name: string;
    parent_team_id?: int64;
    permission?: "pull" | "push" | "admin";
    privacy?: "secret" | "closed";
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            description ?  : string;
            html_url ?  : string;
            id ?  : double;
            members_count ?  : double;
            members_url ?  : string;
            name ?  : string;
            node_id ?  : string;
            organization ?  : {
                avatar_url: string,
                blog: string,
                company: string,
                created_at: string,
                description: string,
                email: string,
                events_url: string,
                followers: double,
                following: double,
                has_organization_projects: boolean,
                has_repository_projects: boolean,
                hooks_url: string,
                html_url: string,
                id: double,
                is_verified: boolean,
                issues_url: string,
                location: string,
                login: string,
                members_url: string,
                name: string,
                node_id: string,
                public_gists: double,
                public_members_url: string,
                public_repos: double,
                repos_url: string,
                type: string,
                url: string
            };
            parent ?  : string;
            permission ?  : string;
            privacy ?  : string;
            repos_count ?  : double;
            repositories_url ?  : string;
            slug ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List discussions (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://developer.github.com/v3/teams/discussions/#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param direction - Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-discussions-legacy"(accept ?  : Header < string > , team_id, int64, direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            comments_count?: double;
            comments_url?: string;
            created_at?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            pinned?: boolean;
            private?: boolean;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            team_url?: string;
            title?: string;
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * Create a discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://developer.github.com/v3/teams/discussions/#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http POST /teams/{team_id}/discussions
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 201 - response
 */
"teams/create-discussion-legacy"(accept ?  : Header < string > , team_id, int64, body ?  : Body<{
    body: string;
    private?: boolean;
    title: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            comments_count ?  : double;
            comments_url ?  : string;
            created_at ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            pinned ?  : boolean;
            private ?  : boolean;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            team_url ?  : string;
            title ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * Get a single discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Get a single discussion`](https://developer.github.com/v3/teams/discussions/#get-a-single-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions/{discussion_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @return 200 - response
 */
"teams/get-discussion-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            comments_count ?  : double;
            comments_url ?  : string;
            created_at ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            pinned ?  : boolean;
            private ?  : boolean;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            team_url ?  : string;
            title ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * Delete a discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://developer.github.com/v3/teams/discussions/#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/discussions/{discussion_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @return 204 - Empty response
 */
"teams/delete-discussion-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64);
[(code: 204) => { }];
/**
 * Edit a discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Edit a discussion`](https://developer.github.com/v3/teams/discussions/#edit-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PATCH /teams/{team_id}/discussions/{discussion_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @return 200 - response
 */
"teams/update-discussion-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, body ?  : Body<{
    body?: string;
    title?: string;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            comments_count ?  : double;
            comments_url ?  : string;
            created_at ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            pinned ?  : boolean;
            private ?  : boolean;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            team_url ?  : string;
            title ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List comments (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List comments`](https://developer.github.com/v3/teams/discussion_comments/#list-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions/{discussion_number}/comments
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param direction - Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-discussion-comments-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            author?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            body?: string;
            body_html?: string;
            body_version?: string;
            created_at?: string;
            discussion_url?: string;
            html_url?: string;
            last_edited_at?: string;
            node_id?: string;
            number?: double;
            reactions?: {
                "+1"?: double;
                "-1"?: double;
                confused?: double;
                heart?: double;
                hooray?: double;
                laugh?: double;
                total_count?: double;
                url?: string;
            };
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * Create a comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a comment`](https://developer.github.com/v3/teams/discussion_comments/#create-a-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http POST /teams/{team_id}/discussions/{discussion_number}/comments
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @return 201 - response
 */
"teams/create-discussion-comment-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, body ?  : Body<{
    body: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            created_at ?  : string;
            discussion_url ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * Get a single comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Get a single comment`](https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param comment_number - comment_number parameter
 * @return 200 - response
 */
"teams/get-discussion-comment-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, comment_number, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            created_at ?  : string;
            discussion_url ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * Delete a comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a comment`](https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param comment_number - comment_number parameter
 * @return 204 - Empty response
 */
"teams/delete-discussion-comment-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, comment_number, int64);
[(code: 204) => { }];
/**
 * Edit a comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Edit a comment`](https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param comment_number - comment_number parameter
 * @return 200 - response
 */
"teams/update-discussion-comment-legacy"(accept ?  : Header < string > , team_id, int64, discussion_number, int64, comment_number, int64, body ?  : Body<{
    body: string;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            author ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            body ?  : string;
            body_html ?  : string;
            body_version ?  : string;
            created_at ?  : string;
            discussion_url ?  : string;
            html_url ?  : string;
            last_edited_at ?  : string;
            node_id ?  : string;
            number ?  : double;
            reactions ?  : {
                "+1": double,
                "-1": double,
                confused: double,
                heart: double,
                hooray: double,
                laugh: double,
                total_count: double,
                url: string
            };
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List reactions for a team discussion comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @tag reactions
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param comment_number - comment_number parameter
 * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"reactions/list-for-team-discussion-comment-legacy"(accept, Header < string > , team_id, int64, discussion_number, int64, comment_number, int64, content ?  : Query < "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>();
    }]);
/**
 * Create reaction for a team discussion comment (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion comment`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment) endpoint.
 *
 * Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @tag reactions
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param comment_number - comment_number parameter
 * @return 201 - response
 */
"reactions/create-for-team-discussion-comment-legacy"(accept, Header < string > , team_id, int64, discussion_number, int64, comment_number, int64, body ?  : Body<{
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            content ?  : string;
            created_at ?  : string;
            id ?  : double;
            node_id ?  : string;
            user ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
        }
        ;
    }]);
/**
 * List reactions for a team discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/discussions/{discussion_number}/reactions
 * @tag reactions
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @param content - Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"reactions/list-for-team-discussion-legacy"(accept, Header < string > , team_id, int64, discussion_number, int64, content ?  : Query < "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            content?: string;
            created_at?: string;
            id?: double;
            node_id?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>();
    }]);
/**
 * Create reaction for a team discussion (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http POST /teams/{team_id}/discussions/{discussion_number}/reactions
 * @tag reactions
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param discussion_number - discussion_number parameter
 * @return 201 - response
 */
"reactions/create-for-team-discussion-legacy"(accept, Header < string > , team_id, int64, discussion_number, int64, body ?  : Body<{
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            content ?  : string;
            created_at ?  : string;
            id ?  : double;
            node_id ?  : string;
            user ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
        }
        ;
    }]);
/**
 * List pending team invitations (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://developer.github.com/v3/teams/members/#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/invitations
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-pending-invitations-legacy"(accept ?  : Header < string > , team_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            email?: string;
            id?: double;
            invitation_team_url?: string;
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            login?: string;
            role?: string;
            team_count?: double;
        }>();
    }]);
/**
 * List team members (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://developer.github.com/v3/teams/members/#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/members
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param role - Filters members returned by their role in the team. Can be one of:
 * \* `member` - normal members of the team.
 * \* `maintainer` - team maintainers.
 * \* `all` - all members of the team.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-members-legacy"(accept ?  : Header < string > , team_id, int64, role ?  : Query < "member" | "maintainer" | "all" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Get team member (Legacy)
 * @description The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership](https://developer.github.com/v3/teams/members/#get-team-membership) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/members/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 204 - Response if user is a member
 * @return 404 - Response if user is not a member
 */
"teams/get-member-legacy"(accept ?  : Header < string > , team_id, int64, username, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Add team member (Legacy)
 * @description The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add team membership](https://developer.github.com/v3/teams/members/#add-or-update-team-membership) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PUT /teams/{team_id}/members/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 204 - Empty response
 * @return 404 - Response if team synchronization is set up
 * @return 422 - response
 */
"teams/add-member-legacy"(accept ?  : Header < string > , team_id, int64, username, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }, (code: 422, mediaType: "application/json") => {
        body: {
            errors ?  : Array<{
                code?: string;
                field?: string;
                resource?: string;
            }>();
            message ?  : string;
        }
        ;
        isException: true;
    }];
/**
 * Remove team member (Legacy)
 * @description The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership](https://developer.github.com/v3/teams/members/#remove-team-membership) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/members/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 204 - Empty response
 * @return 404 - Response if team synchronization is setup
 */
"teams/remove-member-legacy"(accept ?  : Header < string > , team_id, int64, username, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Get team membership (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Get team membership`](https://developer.github.com/v3/teams/members/#get-team-membership) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create team](https://developer.github.com/v3/teams#create-team).
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/memberships/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 200 - response
 */
"teams/get-membership-legacy"(accept ?  : Header < string > , team_id, int64, username, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            role ?  : string;
            state ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * Add or update team membership (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Add or update team membership`](https://developer.github.com/v3/teams/members/#add-or-update-team-membership) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PUT /teams/{team_id}/memberships/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 200 - response
 * @return 403 - Response if team synchronization is set up
 * @return 422 - Response if you attempt to add an organization to a team
 */
"teams/add-or-update-membership-legacy"(accept ?  : Header < string > , team_id, int64, username, string, body ?  : Body<{
    role?: "member" | "maintainer";
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            role ?  : string;
            state ?  : string;
            url ?  : string;
        }
        ;
    }, (code: 403) => {
        isException: true;
    }, (code: 422, mediaType: "application/json") => {
        body: {
            errors ?  : Array<{
                code?: string;
                field?: string;
                resource?: string;
            }>();
            message ?  : string;
        }
        ;
        isException: true;
    }]);
/**
 * Remove team membership (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Remove team membership`](https://developer.github.com/v3/teams/members/#remove-team-membership) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/memberships/{username}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param username - username parameter
 * @return 204 - Empty response
 * @return 403 - Response if team synchronization is set up
 */
"teams/remove-membership-legacy"(accept ?  : Header < string > , team_id, int64, username, string);
[(code: 204) => { }, (code: 403) => {
        isException: true;
    }];
/**
 * List team projects (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://developer.github.com/v3/teams/#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/projects
 * @tag teams
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-projects-legacy"(accept, Header < string > , team_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            organization_permission?: string;
            owner_url?: string;
            permissions?: {
                admin?: boolean;
                read?: boolean;
                write?: boolean;
            };
            private?: boolean;
            state?: string;
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * Review a team project (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Review a team project`](https://developer.github.com/v3/teams/#review-a-team-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/projects/{project_id}
 * @tag teams
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param project_id - project_id parameter
 * @return 200 - response
 * @return 404 - Response if project is not managed by this team
 */
"teams/review-project-legacy"(accept, Header < string > , team_id, int64, project_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            body ?  : string;
            columns_url ?  : string;
            created_at ?  : string;
            creator ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            html_url ?  : string;
            id ?  : double;
            name ?  : string;
            node_id ?  : string;
            number ?  : double;
            organization_permission ?  : string;
            owner_url ?  : string;
            permissions ?  : {
                admin: boolean,
                read: boolean,
                write: boolean
            };
            private ?  : boolean;
            state ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }, (code: 404) => {
        isException: true;
    }];
/**
 * Add or update team project (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Add or update team project`](https://developer.github.com/v3/teams/#add-or-update-team-project) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PUT /teams/{team_id}/projects/{project_id}
 * @tag teams
 * @param accept - This API is under preview and subject to change.
 * @param team_id - team_id parameter
 * @param project_id - project_id parameter
 * @return 204 - Empty response
 * @return 403 - Response if the project is not owned by the organization
 */
"teams/add-or-update-project-legacy"(accept, Header < string > , team_id, int64, project_id, int64, body ?  : Body<{
    permission?: "read" | "write" | "admin";
}, "application/json">(), [(code: 204) => { }, (code: 403, mediaType: "application/json") => {
        body: {
            documentation_url ?  : string;
            message ?  : string;
        }
        ;
        isException: true;
    }]);
/**
 * Remove team project (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Remove team project`](https://developer.github.com/v3/teams/#remove-team-project) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/projects/{project_id}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param project_id - project_id parameter
 * @return 204 - Empty response
 */
"teams/remove-project-legacy"(accept ?  : Header < string > , team_id, int64, project_id, int64);
[(code: 204) => { }];
/**
 * List team repos (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team repos`](https://developer.github.com/v3/teams/#list-team-repos) endpoint.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/repos
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-repos-legacy"(accept ?  : Header < string > , team_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>();
    }]);
/**
 * Check if a team manages a repository (Legacy)
 * @description **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Check if a team manages a repository`](https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/repos/{owner}/{repo}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 200 - Alternative response with extra repository information
 * @return 204 - Response if repository is managed by this team
 * @return 404 - Response if repository is not managed by this team
 */
"teams/check-manages-repo-legacy"(accept ?  : Header < string > , team_id, int64, owner, string, repo, string);
[(code: 200, mediaType: "application/vnd.github.v3.repository+json") => {
        body: {
            allow_merge_commit ?  : boolean;
            allow_rebase_merge ?  : boolean;
            allow_squash_merge ?  : boolean;
            archive_url ?  : string;
            archived ?  : boolean;
            assignees_url ?  : string;
            blobs_url ?  : string;
            branches_url ?  : string;
            clone_url ?  : string;
            collaborators_url ?  : string;
            comments_url ?  : string;
            commits_url ?  : string;
            compare_url ?  : string;
            contents_url ?  : string;
            contributors_url ?  : string;
            created_at ?  : string;
            default_branch ?  : string;
            deployments_url ?  : string;
            description ?  : string;
            disabled ?  : boolean;
            downloads_url ?  : string;
            events_url ?  : string;
            fork ?  : boolean;
            forks_count ?  : double;
            forks_url ?  : string;
            full_name ?  : string;
            git_commits_url ?  : string;
            git_refs_url ?  : string;
            git_tags_url ?  : string;
            git_url ?  : string;
            has_downloads ?  : boolean;
            has_issues ?  : boolean;
            has_pages ?  : boolean;
            has_projects ?  : boolean;
            has_wiki ?  : boolean;
            homepage ?  : string;
            hooks_url ?  : string;
            html_url ?  : string;
            id ?  : double;
            is_template ?  : boolean;
            issue_comment_url ?  : string;
            issue_events_url ?  : string;
            issues_url ?  : string;
            keys_url ?  : string;
            labels_url ?  : string;
            language ?  : string;
            languages_url ?  : string;
            merges_url ?  : string;
            milestones_url ?  : string;
            mirror_url ?  : string;
            name ?  : string;
            network_count ?  : double;
            node_id ?  : string;
            notifications_url ?  : string;
            open_issues_count ?  : double;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            permissions ?  : {
                admin: boolean,
                pull: boolean,
                push: boolean
            };
            private ?  : boolean;
            pulls_url ?  : string;
            pushed_at ?  : string;
            releases_url ?  : string;
            size ?  : double;
            ssh_url ?  : string;
            stargazers_count ?  : double;
            stargazers_url ?  : string;
            statuses_url ?  : string;
            subscribers_count ?  : double;
            subscribers_url ?  : string;
            subscription_url ?  : string;
            svn_url ?  : string;
            tags_url ?  : string;
            teams_url ?  : string;
            temp_clone_token ?  : string;
            template_repository ?  : string;
            topics ?  : Array<string>();
            trees_url ?  : string;
            updated_at ?  : string;
            url ?  : string;
            visibility ?  : string;
            watchers_count ?  : double;
        }
        ;
    }, (code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Add or update team repository (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Add or update team repository`](https://developer.github.com/v3/teams/#add-or-update-team-repository) endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PUT /teams/{team_id}/repos/{owner}/{repo}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"teams/add-or-update-repo-legacy"(accept ?  : Header < string > , team_id, int64, owner, string, repo, string, body ?  : Body<{
    permission?: "pull" | "push" | "admin";
}, "application/json">(), [(code: 204) => { }]);
/**
 * Remove team repository (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Remove team repository`](https://developer.github.com/v3/teams/#remove-team-repository) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http DELETE /teams/{team_id}/repos/{owner}/{repo}
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"teams/remove-repo-legacy"(accept ?  : Header < string > , team_id, int64, owner, string, repo, string);
[(code: 204) => { }];
/**
 * List IdP groups for a team (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/team-sync/group-mappings
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 200 - response
 */
"teams/list-id-p-groups-for-legacy"(accept ?  : Header < string > , team_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            groups ?  : Array<{
                group_description: string;
                group_id: string;
                group_name: string;
            }>();
        }
        ;
    }];
/**
 * Create or update IdP group connections (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http PATCH /teams/{team_id}/team-sync/group-mappings
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @return 200 - response
 */
"teams/create-or-update-id-p-group-connections-legacy"(accept ?  : Header < string > , team_id, int64, body ?  : Body<{
    groups: Array<{
        group_description: string;
        group_id: string;
        group_name: string;
    }>;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            groups ?  : Array<{
                group_description?: string;
                group_id?: string;
                group_name?: string;
            }>();
        }
        ;
    }]);
/**
 * List child teams (Legacy)
 * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://developer.github.com/v3/teams/#list-child-teams) endpoint.
 *
 *
 * @since 9.0.0
 * @deprecated 9.0.0
 * @http GET /teams/{team_id}/teams
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param team_id - team_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - Response if child teams exist
 */
"teams/list-child-legacy"(accept ?  : Header < string > , team_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            description?: string;
            id?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            parent?: {
                description?: string;
                html_url?: string;
                id?: double;
                members_url?: string;
                name?: string;
                node_id?: string;
                permission?: string;
                privacy?: string;
                repositories_url?: string;
                slug?: string;
                url?: string;
            };
            permission?: string;
            privacy?: string;
            repositories_url?: string;
            slug?: string;
            url?: string;
        }>();
    }]);
/**
 * Get the authenticated user
 * @description Lists public and private profile information when authenticated through basic auth or OAuth with the `user` scope.
 *
 * Lists public profile information when authenticated through OAuth without the `user` scope.
 * @since 9.0.0
 * @http GET /user
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 200 - response
 */
"users/get-authenticated"(accept ?  : Header<string>(), [(code: 200, mediaType: "application/json") => {
        body: {
            avatar_url ?  : string;
            bio ?  : string;
            blog ?  : string;
            collaborators ?  : double;
            company ?  : string;
            created_at ?  : string;
            disk_usage ?  : double;
            email ?  : string;
            events_url ?  : string;
            followers ?  : double;
            followers_url ?  : string;
            following ?  : double;
            following_url ?  : string;
            gists_url ?  : string;
            gravatar_id ?  : string;
            hireable ?  : boolean;
            html_url ?  : string;
            id ?  : double;
            location ?  : string;
            login ?  : string;
            name ?  : string;
            node_id ?  : string;
            organizations_url ?  : string;
            owned_private_repos ?  : double;
            plan ?  : {
                collaborators: double,
                name: string,
                private_repos: double,
                space: double
            };
            private_gists ?  : double;
            public_gists ?  : double;
            public_repos ?  : double;
            received_events_url ?  : string;
            repos_url ?  : string;
            site_admin ?  : boolean;
            starred_url ?  : string;
            subscriptions_url ?  : string;
            total_private_repos ?  : double;
            two_factor_authentication ?  : boolean;
            type ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * Update the authenticated user
 * @description **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 * @since 9.0.0
 * @http PATCH /user
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 200 - response
 */
"users/update-authenticated"(accept ?  : Header < string > , body ?  : Body<{
    bio?: string;
    blog?: string;
    company?: string;
    email?: string;
    hireable?: boolean;
    location?: string;
    name?: string;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            avatar_url ?  : string;
            bio ?  : string;
            blog ?  : string;
            collaborators ?  : double;
            company ?  : string;
            created_at ?  : string;
            disk_usage ?  : double;
            email ?  : string;
            events_url ?  : string;
            followers ?  : double;
            followers_url ?  : string;
            following ?  : double;
            following_url ?  : string;
            gists_url ?  : string;
            gravatar_id ?  : string;
            hireable ?  : boolean;
            html_url ?  : string;
            id ?  : double;
            location ?  : string;
            login ?  : string;
            name ?  : string;
            node_id ?  : string;
            organizations_url ?  : string;
            owned_private_repos ?  : double;
            plan ?  : {
                collaborators: double,
                name: string,
                private_repos: double,
                space: double
            };
            private_gists ?  : double;
            public_gists ?  : double;
            public_repos ?  : double;
            received_events_url ?  : string;
            repos_url ?  : string;
            site_admin ?  : boolean;
            starred_url ?  : string;
            subscriptions_url ?  : string;
            total_private_repos ?  : double;
            two_factor_authentication ?  : boolean;
            type ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List blocked users
 * @description List the users you've blocked on your personal account.
 * @since 9.0.0
 * @http GET /user/blocks
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 200 - response
 */
"users/list-blocked"(accept ?  : Header<string>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Check whether you've blocked a user
 * @description If the user is blocked:
 *
 * If the user is not blocked:
 * @since 9.0.0
 * @http GET /user/blocks/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - If the user is blocked:
 * @return 404 - If the user is not blocked:
 */
"users/check-blocked"(accept ?  : Header < string > , username, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Block a user
 * @since 9.0.0
 * @http PUT /user/blocks/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - Empty response
 */
"users/block"(accept ?  : Header < string > , username, string);
[(code: 204) => { }];
/**
 * Unblock a user
 * @since 9.0.0
 * @http DELETE /user/blocks/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - Empty response
 */
"users/unblock"(accept ?  : Header < string > , username, string);
[(code: 204) => { }];
/**
 * Toggle primary email visibility
 * @description Sets the visibility for your primary email addresses.
 * @since 9.0.0
 * @http PATCH /user/email/visibility
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 200 - response
 */
"users/toggle-primary-email-visibility"(accept ?  : Header < string > , body ?  : Body<{
    email: string;
    visibility: string;
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            primary?: boolean;
            verified?: boolean;
            visibility?: string;
        }>();
    }]);
/**
 * List email addresses for a user
 * @description Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 * @since 9.0.0
 * @http GET /user/emails
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-emails"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            primary?: boolean;
            verified?: boolean;
            visibility?: string;
        }>();
    }]);
/**
 * Add email address(es)
 * @description This endpoint is accessible with the `user` scope.
 * @since 9.0.0
 * @http POST /user/emails
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 201 - response
 */
"users/add-emails"(accept ?  : Header < string > , body ?  : Body<{
    emails: Array<string>;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            primary?: boolean;
            verified?: boolean;
            visibility?: string;
        }>();
    }]);
/**
 * Delete email address(es)
 * @description This endpoint is accessible with the `user` scope.
 * @since 9.0.0
 * @http DELETE /user/emails
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 204 - Empty response
 */
"users/delete-emails"(accept ?  : Header < string > , body ?  : Body<{
    emails: Array<string>;
}, "application/json">(), [(code: 204) => { }]);
/**
 * List the authenticated user's followers
 * @since 9.0.0
 * @http GET /user/followers
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-followers-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * List who the authenticated user is following
 * @since 9.0.0
 * @http GET /user/following
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-following-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Check if you are following a user
 * @since 9.0.0
 * @http GET /user/following/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - Response if you are following this user
 * @return 404 - Response if you are not following this user
 */
"users/check-following"(accept ?  : Header < string > , username, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Follow a user
 * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 * @since 9.0.0
 * @http PUT /user/following/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - Empty response
 */
"users/follow"(accept ?  : Header < string > , username, string);
[(code: 204) => { }];
/**
 * Unfollow a user
 * @description Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 * @since 9.0.0
 * @http DELETE /user/following/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 204 - Empty response
 */
"users/unfollow"(accept ?  : Header < string > , username, string);
[(code: 204) => { }];
/**
 * List your GPG keys
 * @description Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http GET /user/gpg_keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-gpg-keys"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            can_certify?: boolean;
            can_encrypt_comms?: boolean;
            can_encrypt_storage?: boolean;
            can_sign?: boolean;
            created_at?: string;
            emails?: Array<{
                email?: string;
                verified?: boolean;
            }>;
            expires_at?: string;
            id?: double;
            key_id?: string;
            primary_key_id?: string;
            public_key?: string;
            subkeys?: Array<{
                can_certify?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_sign?: boolean;
                created_at?: string;
                emails?: Array<any>;
                expires_at?: string;
                id?: double;
                key_id?: string;
                primary_key_id?: double;
                public_key?: string;
                subkeys?: Array<any>;
            }>;
        }>();
    }]);
/**
 * Create a GPG key
 * @description Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http POST /user/gpg_keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 201 - response
 */
"users/create-gpg-key"(accept ?  : Header < string > , body ?  : Body<{
    armored_public_key?: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            can_certify ?  : boolean;
            can_encrypt_comms ?  : boolean;
            can_encrypt_storage ?  : boolean;
            can_sign ?  : boolean;
            created_at ?  : string;
            emails ?  : Array<{
                email?: string;
                verified?: boolean;
            }>();
            expires_at ?  : string;
            id ?  : double;
            key_id ?  : string;
            primary_key_id ?  : string;
            public_key ?  : string;
            subkeys ?  : Array<{
                can_certify?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_sign?: boolean;
                created_at?: string;
                emails?: Array<any>;
                expires_at?: string;
                id?: double;
                key_id?: string;
                primary_key_id?: double;
                public_key?: string;
                subkeys?: Array<any>;
            }>();
        }
        ;
    }]);
/**
 * Get a single GPG key
 * @description View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http GET /user/gpg_keys/{gpg_key_id}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param gpg_key_id - gpg_key_id parameter
 * @return 200 - response
 */
"users/get-gpg-key"(accept ?  : Header < string > , gpg_key_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            can_certify ?  : boolean;
            can_encrypt_comms ?  : boolean;
            can_encrypt_storage ?  : boolean;
            can_sign ?  : boolean;
            created_at ?  : string;
            emails ?  : Array<{
                email?: string;
                verified?: boolean;
            }>();
            expires_at ?  : string;
            id ?  : double;
            key_id ?  : string;
            primary_key_id ?  : string;
            public_key ?  : string;
            subkeys ?  : Array<{
                can_certify?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_sign?: boolean;
                created_at?: string;
                emails?: Array<any>;
                expires_at?: string;
                id?: double;
                key_id?: string;
                primary_key_id?: double;
                public_key?: string;
                subkeys?: Array<any>;
            }>();
        }
        ;
    }];
/**
 * Delete a GPG key
 * @description Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http DELETE /user/gpg_keys/{gpg_key_id}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param gpg_key_id - gpg_key_id parameter
 * @return 204 - Empty response
 */
"users/delete-gpg-key"(accept ?  : Header < string > , gpg_key_id, int64);
[(code: 204) => { }];
/**
 * List installations for a user
 * @description Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 * @since 9.0.0
 * @http GET /user/installations
 * @tag apps
 * @param accept - This API is under preview and subject to change.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - You can find the permissions for the installation under the `permissions` key.
 */
"apps/list-installations-for-authenticated-user"(accept, Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            installations ?  : Array<{
                access_tokens_url: string;
                account: {
                    avatar_url?: string;
                    description?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    issues_url?: string;
                    login?: string;
                    members_url?: string;
                    node_id?: string;
                    organizations_url?: string;
                    public_members_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                app_id: double;
                events: Array<string>;
                html_url: string;
                id: double;
                permissions: {
                    contents?: string;
                    issues?: string;
                    metadata?: string;
                    single_file?: string;
                };
                repositories_url: string;
                single_file_name: string;
                target_id: double;
                target_type: string;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * List repositories accessible to the user for an installation
 * @description List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 * @since 9.0.0
 * @http GET /user/installations/{installation_id}/repositories
 * @tag apps
 * @param accept - This API is under preview and subject to change.
 * @param installation_id - installation_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - The access the user has to each repository is included in the hash under the `permissions` key.
 */
"apps/list-installation-repos-for-authenticated-user"(accept, Header < string > , installation_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: {
            repositories ?  : Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>();
            total_count ?  : double;
        }
        ;
    }]);
/**
 * Add repository to installation
 * @description Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.
 * @since 9.0.0
 * @http PUT /user/installations/{installation_id}/repositories/{repository_id}
 * @tag apps
 * @param accept - This API is under preview and subject to change.
 * @param installation_id - installation_id parameter
 * @param repository_id - repository_id parameter
 * @return 204 - Empty response
 */
"apps/add-repo-to-installation"(accept, Header < string > , installation_id, int64, repository_id, int64);
[(code: 204) => { }];
/**
 * Remove repository from installation
 * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.
 * @since 9.0.0
 * @http DELETE /user/installations/{installation_id}/repositories/{repository_id}
 * @tag apps
 * @param accept - This API is under preview and subject to change.
 * @param installation_id - installation_id parameter
 * @param repository_id - repository_id parameter
 * @return 204 - Empty response
 */
"apps/remove-repo-from-installation"(accept, Header < string > , installation_id, int64, repository_id, int64);
[(code: 204) => { }];
/**
 * List all issues across owned and member repositories assigned to the authenticated user
 * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
 *
 * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
 *
 *
 * @since 9.0.0
 * @http GET /user/issues
 * @tag issues
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param filter - Indicates which sorts of issues to return. Can be one of:
 * \* `assigned`: Issues assigned to you
 * \* `created`: Issues created by you
 * \* `mentioned`: Issues mentioning you
 * \* `subscribed`: Issues you're subscribed to updates for
 * \* `all`: All issues the authenticated user can see, regardless of participation or creation
 * @param state - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
 * @param labels - A list of comma separated label names. Example: `bug,ui,@high`
 * @param sort - What to sort results by. Can be either `created`, `updated`, `comments`.
 * @param direction - The direction of the sort. Can be either `asc` or `desc`.
 * @param since - Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"issues/list-for-authenticated-user"(accept ?  : Header < string > , filter ?  : Query < "assigned" | "created" | "mentioned" | "subscribed" | "all" > , state ?  : Query < "open" | "closed" | "all" > , labels ?  : Query < string > , sort ?  : Query < "created" | "updated" | "comments" > , direction ?  : Query < "asc" | "desc" > , since ?  : Query < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            active_lock_reason?: string;
            assignee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            assignees?: Array<{
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            }>;
            body?: string;
            closed_at?: string;
            comments?: double;
            comments_url?: string;
            created_at?: string;
            events_url?: string;
            html_url?: string;
            id?: double;
            labels?: Array<{
                color?: string;
                default?: boolean;
                description?: string;
                id?: double;
                name?: string;
                node_id?: string;
                url?: string;
            }>;
            labels_url?: string;
            locked?: boolean;
            milestone?: {
                closed_at?: string;
                closed_issues?: double;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                description?: string;
                due_on?: string;
                html_url?: string;
                id?: double;
                labels_url?: string;
                node_id?: string;
                number?: double;
                open_issues?: double;
                state?: string;
                title?: string;
                updated_at?: string;
                url?: string;
            };
            node_id?: string;
            number?: double;
            pull_request?: {
                diff_url?: string;
                html_url?: string;
                patch_url?: string;
                url?: string;
            };
            repository?: {
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            };
            repository_url?: string;
            state?: string;
            title?: string;
            updated_at?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>();
    }]);
/**
 * List your public keys
 * @description Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http GET /user/keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-public-keys"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            key?: string;
            key_id?: string;
        }>();
    }]);
/**
 * Create a public key
 * @description Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http POST /user/keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 201 - response
 */
"users/create-public-key"(accept ?  : Header < string > , body ?  : Body<{
    key?: string;
    title?: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            key ?  : string;
            key_id ?  : string;
        }
        ;
    }]);
/**
 * Get a single public key
 * @description View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http GET /user/keys/{key_id}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param key_id - key_id parameter
 * @return 200 - response
 */
"users/get-public-key"(accept ?  : Header < string > , key_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            key ?  : string;
            key_id ?  : string;
        }
        ;
    }];
/**
 * Delete a public key
 * @description Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 * @since 9.0.0
 * @http DELETE /user/keys/{key_id}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param key_id - key_id parameter
 * @return 204 - Empty response
 */
"users/delete-public-key"(accept ?  : Header < string > , key_id, int64);
[(code: 204) => { }];
/**
 * Get a user's Marketplace purchases
 * @description Returns only active subscriptions. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 * @since 9.0.0
 * @http GET /user/marketplace_purchases
 * @tag apps
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"apps/list-marketplace-purchases-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            account?: {
                email?: string;
                id?: double;
                login?: string;
                organization_billing_email?: string;
                type?: string;
                url?: string;
            };
            billing_cycle?: string;
            free_trial_ends_on?: string;
            next_billing_date?: string;
            on_free_trial?: boolean;
            plan?: {
                accounts_url?: string;
                bullets?: Array<string>;
                description?: string;
                has_free_trial?: boolean;
                id?: double;
                monthly_price_in_cents?: double;
                name?: string;
                number?: double;
                price_model?: string;
                state?: string;
                unit_name?: string;
                url?: string;
                yearly_price_in_cents?: double;
            };
            unit_count?: string;
            updated_at?: string;
        }>();
    }]);
/**
 * Get a user's Marketplace purchases (stubbed)
 * @description Returns only active subscriptions. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 * @since 9.0.0
 * @http GET /user/marketplace_purchases/stubbed
 * @tag apps
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"apps/list-marketplace-purchases-for-authenticated-user-stubbed"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            account?: {
                email?: string;
                id?: double;
                login?: string;
                organization_billing_email?: string;
                type?: string;
                url?: string;
            };
            billing_cycle?: string;
            free_trial_ends_on?: string;
            next_billing_date?: string;
            on_free_trial?: boolean;
            plan?: {
                accounts_url?: string;
                bullets?: Array<string>;
                description?: string;
                has_free_trial?: boolean;
                id?: double;
                monthly_price_in_cents?: double;
                name?: string;
                number?: double;
                price_model?: string;
                state?: string;
                unit_name?: string;
                url?: string;
                yearly_price_in_cents?: double;
            };
            unit_count?: string;
            updated_at?: string;
        }>();
    }]);
/**
 * List your organization memberships
 * @since 9.0.0
 * @http GET /user/memberships/orgs
 * @tag orgs
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param state - Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"orgs/list-memberships"(accept ?  : Header < string > , state ?  : Query < "active" | "pending" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            organization?: {
                avatar_url?: string;
                description?: string;
                events_url?: string;
                hooks_url?: string;
                id?: double;
                issues_url?: string;
                login?: string;
                members_url?: string;
                node_id?: string;
                public_members_url?: string;
                repos_url?: string;
                url?: string;
            };
            organization_url?: string;
            role?: string;
            state?: string;
            url?: string;
            user?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
        }>();
    }]);
/**
 * Get your organization membership
 * @since 9.0.0
 * @http GET /user/memberships/orgs/{org}
 * @tag orgs
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @return 200 - response
 */
"orgs/get-membership-for-authenticated-user"(accept ?  : Header < string > , org, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            organization ?  : {
                avatar_url: string,
                description: string,
                events_url: string,
                hooks_url: string,
                id: double,
                issues_url: string,
                login: string,
                members_url: string,
                node_id: string,
                public_members_url: string,
                repos_url: string,
                url: string
            };
            organization_url ?  : string;
            role ?  : string;
            state ?  : string;
            url ?  : string;
            user ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
        }
        ;
    }];
/**
 * Edit your organization membership
 * @since 9.0.0
 * @http PATCH /user/memberships/orgs/{org}
 * @tag orgs
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param org - org parameter
 * @return 200 - response
 */
"orgs/update-membership"(accept ?  : Header < string > , org, string, body ?  : Body<{
    state: "active";
}, "application/json">(), [(code: 200, mediaType: "application/json") => {
        body: {
            organization ?  : {
                avatar_url: string,
                description: string,
                events_url: string,
                hooks_url: string,
                id: double,
                issues_url: string,
                login: string,
                members_url: string,
                node_id: string,
                public_members_url: string,
                repos_url: string,
                url: string
            };
            organization_url ?  : string;
            role ?  : string;
            state ?  : string;
            url ?  : string;
            user ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
        }
        ;
    }]);
/**
 * List user migrations
 * @description Lists all migrations a user has started.
 * @since 9.0.0
 * @http GET /user/migrations
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"migrations/list-for-authenticated-user"(accept, Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            exclude_attachments?: boolean;
            guid?: string;
            id?: double;
            lock_repositories?: boolean;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            repositories?: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>;
            state?: string;
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * Start a user migration
 * @description Initiates the generation of a user migration archive.
 * @since 9.0.0
 * @http POST /user/migrations
 * @tag migrations
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 201 - response
 */
"migrations/start-for-authenticated-user"(accept ?  : Header < string > , body ?  : Body<{
    exclude_attachments?: boolean;
    lock_repositories?: boolean;
    repositories: Array<string>;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            exclude_attachments ?  : boolean;
            guid ?  : string;
            id ?  : double;
            lock_repositories ?  : boolean;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            repositories ?  : Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>();
            state ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * Get the status of a user migration
 * @description Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive).
 * @since 9.0.0
 * @http GET /user/migrations/{migration_id}
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param migration_id - migration_id parameter
 * @return 200 - response
 */
"migrations/get-status-for-authenticated-user"(accept, Header < string > , migration_id, int64);
[(code: 200, mediaType: "application/json") => {
        body: {
            created_at ?  : string;
            exclude_attachments ?  : boolean;
            guid ?  : string;
            id ?  : double;
            lock_repositories ?  : boolean;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            repositories ?  : Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>();
            state ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * Download a user migration archive
 * @description Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 *
 *
 * @since 9.0.0
 * @http GET /user/migrations/{migration_id}/archive
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param migration_id - migration_id parameter
 * @return 302 - response
 */
"migrations/get-archive-for-authenticated-user"(accept, Header < string > , migration_id, int64);
[(code: 302) => { }];
/**
 * Delete a user migration archive
 * @description Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://developer.github.com/v3/migrations/users/#list-user-migrations) and [Get the status of a user migration](https://developer.github.com/v3/migrations/users/#get-the-status-of-a-user-migration) endpoints, will continue to be available even after an archive is deleted.
 * @since 9.0.0
 * @http DELETE /user/migrations/{migration_id}/archive
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param migration_id - migration_id parameter
 * @return 204 - Empty response
 */
"migrations/delete-archive-for-authenticated-user"(accept, Header < string > , migration_id, int64);
[(code: 204) => { }];
/**
 * Unlock a user repository
 * @description Unlocks a repository. You can lock repositories when you [start a user migration](https://developer.github.com/v3/migrations/users/#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 * @since 9.0.0
 * @http DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param migration_id - migration_id parameter
 * @param repo_name - repo_name parameter
 * @return 204 - Empty response
 */
"migrations/unlock-repo-for-authenticated-user"(accept, Header < string > , migration_id, int64, repo_name, string);
[(code: 204) => { }];
/**
 * List your organizations
 * @description List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 * @since 9.0.0
 * @http GET /user/orgs
 * @tag orgs
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"orgs/list-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            description?: string;
            events_url?: string;
            hooks_url?: string;
            id?: double;
            issues_url?: string;
            login?: string;
            members_url?: string;
            node_id?: string;
            public_members_url?: string;
            repos_url?: string;
            url?: string;
        }>();
    }]);
/**
 * Create a user project
 * @since 9.0.0
 * @http POST /user/projects
 * @tag projects
 * @param accept - This API is under preview and subject to change.
 * @return 201 - response
 */
"projects/create-for-authenticated-user"(accept, Header < string > , body ?  : Body<{
    body?: string;
    name: string;
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            body ?  : string;
            columns_url ?  : string;
            created_at ?  : string;
            creator ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            html_url ?  : string;
            id ?  : double;
            name ?  : string;
            node_id ?  : string;
            number ?  : double;
            owner_url ?  : string;
            state ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }]);
/**
 * List public email addresses for a user
 * @description Lists your publicly visible email address, which you can set with the [Toggle primary email visibility](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) endpoint. This endpoint is accessible with the `user:email` scope.
 * @since 9.0.0
 * @http GET /user/public_emails
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-public-emails"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            email?: string;
            primary?: boolean;
            verified?: boolean;
            visibility?: string;
        }>();
    }]);
/**
 * List your repositories
 * @description Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 * @since 9.0.0
 * @http GET /user/repos
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param visibility - Can be one of `all`, `public`, or `private`.
 * @param affiliation - Comma-separated list of values. Can include:
 * \* `owner`: Repositories that are owned by the authenticated user.
 * \* `collaborator`: Repositories that the user has been added to as a collaborator.
 * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
 * @param type - Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`
 *
 * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
 * @param sort - Can be one of `created`, `updated`, `pushed`, `full_name`.
 * @param direction - Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"repos/list"(accept ?  : Header < string > , visibility ?  : Query < "all" | "public" | "private" > , affiliation ?  : Query < string > , type ?  : Query < "all" | "owner" | "public" | "private" | "member" > , sort ?  : Query < "created" | "updated" | "pushed" | "full_name" > , direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * Creates a new repository for the authenticated user
 * @description Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository
 * *   `repo` scope to create a private repository
 * @since 9.0.0
 * @http POST /user/repos
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @return 201 - response
 */
"repos/create-for-authenticated-user"(accept ?  : Header < string > , body ?  : Body<{
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    auto_init?: boolean;
    delete_branch_on_merge?: boolean;
    description?: string;
    gitignore_template?: string;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    is_template?: boolean;
    license_template?: string;
    name: string;
    private?: boolean;
    team_id?: int64;
    visibility?: "public" | "private" | "visibility" | "internal";
}, "application/json">(), [(code: 201, mediaType: "application/json") => {
        body: {
            allow_merge_commit ?  : boolean;
            allow_rebase_merge ?  : boolean;
            allow_squash_merge ?  : boolean;
            archive_url ?  : string;
            archived ?  : boolean;
            assignees_url ?  : string;
            blobs_url ?  : string;
            branches_url ?  : string;
            clone_url ?  : string;
            collaborators_url ?  : string;
            comments_url ?  : string;
            commits_url ?  : string;
            compare_url ?  : string;
            contents_url ?  : string;
            contributors_url ?  : string;
            created_at ?  : string;
            default_branch ?  : string;
            deployments_url ?  : string;
            description ?  : string;
            disabled ?  : boolean;
            downloads_url ?  : string;
            events_url ?  : string;
            fork ?  : boolean;
            forks_count ?  : double;
            forks_url ?  : string;
            full_name ?  : string;
            git_commits_url ?  : string;
            git_refs_url ?  : string;
            git_tags_url ?  : string;
            git_url ?  : string;
            has_downloads ?  : boolean;
            has_issues ?  : boolean;
            has_pages ?  : boolean;
            has_projects ?  : boolean;
            has_wiki ?  : boolean;
            homepage ?  : string;
            hooks_url ?  : string;
            html_url ?  : string;
            id ?  : double;
            is_template ?  : boolean;
            issue_comment_url ?  : string;
            issue_events_url ?  : string;
            issues_url ?  : string;
            keys_url ?  : string;
            labels_url ?  : string;
            language ?  : string;
            languages_url ?  : string;
            merges_url ?  : string;
            milestones_url ?  : string;
            mirror_url ?  : string;
            name ?  : string;
            network_count ?  : double;
            node_id ?  : string;
            notifications_url ?  : string;
            open_issues_count ?  : double;
            owner ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            permissions ?  : {
                admin: boolean,
                pull: boolean,
                push: boolean
            };
            private ?  : boolean;
            pulls_url ?  : string;
            pushed_at ?  : string;
            releases_url ?  : string;
            size ?  : double;
            ssh_url ?  : string;
            stargazers_count ?  : double;
            stargazers_url ?  : string;
            statuses_url ?  : string;
            subscribers_count ?  : double;
            subscribers_url ?  : string;
            subscription_url ?  : string;
            svn_url ?  : string;
            tags_url ?  : string;
            teams_url ?  : string;
            temp_clone_token ?  : string;
            template_repository ?  : string;
            topics ?  : Array<string>();
            trees_url ?  : string;
            updated_at ?  : string;
            url ?  : string;
            visibility ?  : string;
            watchers_count ?  : double;
        }
        ;
    }]);
/**
 * List a user's repository invitations
 * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 *
 *
 * @since 9.0.0
 * @http GET /user/repository_invitations
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"repos/list-invitations-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            html_url?: string;
            id?: double;
            invitee?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            inviter?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: string;
            repository?: {
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                description?: string;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                html_url?: string;
                id?: double;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                url?: string;
            };
            url?: string;
        }>();
    }]);
/**
 * Decline a repository invitation
 * @since 9.0.0
 * @http DELETE /user/repository_invitations/{invitation_id}
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param invitation_id - invitation_id parameter
 * @return 204 - Empty response
 */
"repos/decline-invitation"(accept ?  : Header < string > , invitation_id, int64);
[(code: 204) => { }];
/**
 * Accept a repository invitation
 * @since 9.0.0
 * @http PATCH /user/repository_invitations/{invitation_id}
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param invitation_id - invitation_id parameter
 * @return 204 - Empty response
 */
"repos/accept-invitation"(accept ?  : Header < string > , invitation_id, int64);
[(code: 204) => { }];
/**
 * List repositories being starred by the authenticated user
 * @description You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
 * @since 9.0.0
 * @http GET /user/starred
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param sort - One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
 * @param direction - One of `asc` (ascending) or `desc` (descending).
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"activity/list-repos-starred-by-authenticated-user"(accept ?  : Header < string > , sort ?  : Query < "created" | "updated" > , direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [[(code: 200, mediaType: "application/json") => {
            body: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>();
        }, (code: 200, mediaType: "application/vnd.github.v3.star+json") => {
            body: Array<{
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                starred_at?: string;
            }>();
        }]]);
/**
 * Check if you are starring a repository
 * @description Requires for the user to be authenticated.
 * @since 9.0.0
 * @http GET /user/starred/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Response if this repository is starred by you
 * @return 404 - Response if this repository is not starred by you
 */
"activity/check-starring-repo"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Star a repository
 * @description Requires for the user to be authenticated.
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
 * @since 9.0.0
 * @http PUT /user/starred/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"activity/star-repo"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * Unstar a repository
 * @description Requires for the user to be authenticated.
 * @since 9.0.0
 * @http DELETE /user/starred/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"activity/unstar-repo"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * List repositories being watched by the authenticated user
 * @since 9.0.0
 * @http GET /user/subscriptions
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"activity/list-watched-repos-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>();
    }]);
/**
 * Check if you are watching a repository (LEGACY)
 * @description Requires for the user to be authenticated.
 * @since 9.0.0
 * @http GET /user/subscriptions/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Response if this repository is watched by you
 * @return 404 - Response if this repository is not watched by you
 */
"activity/check-watching-repo-legacy"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * Watch a repository (LEGACY)
 * @description Requires the user to be authenticated.
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
 * @since 9.0.0
 * @http PUT /user/subscriptions/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"activity/watch-repo-legacy"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * Stop watching a repository (LEGACY)
 * @description Requires for the user to be authenticated.
 * @since 9.0.0
 * @http DELETE /user/subscriptions/{owner}/{repo}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param owner - owner parameter
 * @param repo - repo parameter
 * @return 204 - Empty response
 */
"activity/stop-watching-repo-legacy"(accept ?  : Header < string > , owner, string, repo, string);
[(code: 204) => { }];
/**
 * List user teams
 * @description List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).
 * @since 9.0.0
 * @http GET /user/teams
 * @tag teams
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"teams/list-for-authenticated-user"(accept ?  : Header < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            created_at?: string;
            description?: string;
            html_url?: string;
            id?: double;
            members_count?: double;
            members_url?: string;
            name?: string;
            node_id?: string;
            organization?: {
                avatar_url?: string;
                blog?: string;
                company?: string;
                created_at?: string;
                description?: string;
                email?: string;
                events_url?: string;
                followers?: double;
                following?: double;
                has_organization_projects?: boolean;
                has_repository_projects?: boolean;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_verified?: boolean;
                issues_url?: string;
                location?: string;
                login?: string;
                members_url?: string;
                name?: string;
                node_id?: string;
                public_gists?: double;
                public_members_url?: string;
                public_repos?: double;
                repos_url?: string;
                type?: string;
                url?: string;
            };
            parent?: string;
            permission?: string;
            privacy?: string;
            repos_count?: double;
            repositories_url?: string;
            slug?: string;
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * List repositories for a user migration
 * @description Lists all the repositories for this user migration.
 * @since 9.0.0
 * @http GET /user/{migration_id}/repositories
 * @tag migrations
 * @param accept - This API is under preview and subject to change.
 * @param migration_id - migration_id parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"migrations/list-repos-for-user"(accept, Header < string > , migration_id, int64, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>();
    }]);
/**
 * Get all users
 * @description Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.
 * @since 9.0.0
 * @http GET /users
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param since - The integer ID of the last User that you've seen.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list"(accept ?  : Header < string > , since ?  : Query < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Get a single user
 * @description Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see "[Response with GitHub plan information](https://developer.github.com/v3/users/#response-with-github-plan-information)."
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://developer.github.com/v3/users/emails/)".
 * @since 9.0.0
 * @http GET /users/{username}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @return 200 - response
 */
"users/get-by-username"(accept ?  : Header < string > , username, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            avatar_url ?  : string;
            bio ?  : string;
            blog ?  : string;
            company ?  : string;
            created_at ?  : string;
            email ?  : string;
            events_url ?  : string;
            followers ?  : double;
            followers_url ?  : string;
            following ?  : double;
            following_url ?  : string;
            gists_url ?  : string;
            gravatar_id ?  : string;
            hireable ?  : boolean;
            html_url ?  : string;
            id ?  : double;
            location ?  : string;
            login ?  : string;
            name ?  : string;
            node_id ?  : string;
            organizations_url ?  : string;
            public_gists ?  : double;
            public_repos ?  : double;
            received_events_url ?  : string;
            repos_url ?  : string;
            site_admin ?  : boolean;
            starred_url ?  : string;
            subscriptions_url ?  : string;
            type ?  : string;
            updated_at ?  : string;
            url ?  : string;
        }
        ;
    }];
/**
 * List events performed by a user
 * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 * @since 9.0.0
 * @http GET /users/{username}/events
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"activity/list-events-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List events for an organization
 * @description This is the user's organization dashboard. You must be authenticated as the user to view this.
 * @since 9.0.0
 * @http GET /users/{username}/events/orgs/{org}
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param org - org parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"activity/list-events-for-org"(accept ?  : Header < string > , username, string, org, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List public events performed by a user
 * @since 9.0.0
 * @http GET /users/{username}/events/public
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"activity/list-public-events-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List a user's followers
 * @since 9.0.0
 * @http GET /users/{username}/followers
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-followers-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * List who a user is following
 * @since 9.0.0
 * @http GET /users/{username}/following
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-following-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: double;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
        }>();
    }]);
/**
 * Check if one user follows another
 * @since 9.0.0
 * @http GET /users/{username}/following/{target_user}
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param target_user - target_user parameter
 * @return 204 - Response if user follows target user
 * @return 404 - Response if user does not follow target user
 */
"users/check-following-for-user"(accept ?  : Header < string > , username, string, target_user, string);
[(code: 204) => { }, (code: 404) => {
        isException: true;
    }];
/**
 * List public gists for the specified user
 * @since 9.0.0
 * @http GET /users/{username}/gists
 * @tag gists
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param since - This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"gists/list-public-for-user"(accept ?  : Header < string > , username, string, since ?  : Query < string > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            comments?: double;
            comments_url?: string;
            commits_url?: string;
            created_at?: string;
            description?: string;
            files?: {
                "hello_world.rb"?: {
                    filename?: string;
                    language?: string;
                    raw_url?: string;
                    size?: double;
                    type?: string;
                };
            };
            forks_url?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            id?: string;
            node_id?: string;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            public?: boolean;
            truncated?: boolean;
            updated_at?: string;
            url?: string;
            user?: string;
        }>();
    }]);
/**
 * List GPG keys for a user
 * @description Lists the GPG keys for a user. This information is accessible by anyone.
 * @since 9.0.0
 * @http GET /users/{username}/gpg_keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-gpg-keys-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            can_certify?: boolean;
            can_encrypt_comms?: boolean;
            can_encrypt_storage?: boolean;
            can_sign?: boolean;
            created_at?: string;
            emails?: Array<{
                email?: string;
                verified?: boolean;
            }>;
            expires_at?: string;
            id?: double;
            key_id?: string;
            primary_key_id?: string;
            public_key?: string;
            subkeys?: Array<{
                can_certify?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_sign?: boolean;
                created_at?: string;
                emails?: Array<any>;
                expires_at?: string;
                id?: double;
                key_id?: string;
                primary_key_id?: double;
                public_key?: string;
                subkeys?: Array<any>;
            }>;
        }>();
    }]);
/**
 * Get contextual information about a user
 * @description Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 * @since 9.0.0
 * @http GET /users/{username}/hovercard
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param subject_type - Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
 * @param subject_id - Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
 * @return 200 - response
 */
"users/get-context-for-user"(accept ?  : Header < string > , username, string, subject_type ?  : Query < "organization" | "repository" | "issue" | "pull_request" > , subject_id ?  : Query<string>(), [(code: 200, mediaType: "application/json") => {
        body: {
            contexts ?  : Array<{
                message?: string;
                octicon?: string;
            }>();
        }
        ;
    }]);
/**
 * Get a user installation
 * @description Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 * @since 9.0.0
 * @http GET /users/{username}/installation
 * @tag apps
 * @param accept - This API is under preview and subject to change.
 * @param username - username parameter
 * @return 200 - response
 */
"apps/get-user-installation"(accept, Header < string > , username, string);
[(code: 200, mediaType: "application/json") => {
        body: {
            access_tokens_url ?  : string;
            account ?  : {
                avatar_url: string,
                events_url: string,
                followers_url: string,
                following_url: string,
                gists_url: string,
                gravatar_id: string,
                html_url: string,
                id: double,
                login: string,
                node_id: string,
                organizations_url: string,
                received_events_url: string,
                repos_url: string,
                site_admin: boolean,
                starred_url: string,
                subscriptions_url: string,
                type: string,
                url: string
            };
            app_id ?  : double;
            created_at ?  : string;
            events ?  : Array<string>();
            html_url ?  : string;
            id ?  : double;
            permissions ?  : {
                checks: string,
                contents: string,
                metadata: string
            };
            repositories_url ?  : string;
            repository_selection ?  : string;
            single_file_name ?  : string;
            target_id ?  : double;
            target_type ?  : string;
            updated_at ?  : string;
        }
        ;
    }];
/**
 * List public keys for a user
 * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 * @since 9.0.0
 * @http GET /users/{username}/keys
 * @tag users
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"users/list-public-keys-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            id?: double;
            key?: string;
        }>();
    }]);
/**
 * List user organizations
 * @description List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List your organizations](https://developer.github.com/v3/orgs/#list-your-organizations) API instead.
 * @since 9.0.0
 * @http GET /users/{username}/orgs
 * @tag orgs
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"orgs/list-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            avatar_url?: string;
            description?: string;
            events_url?: string;
            hooks_url?: string;
            id?: double;
            issues_url?: string;
            login?: string;
            members_url?: string;
            node_id?: string;
            public_members_url?: string;
            repos_url?: string;
            url?: string;
        }>();
    }]);
/**
 * List user projects
 * @since 9.0.0
 * @http GET /users/{username}/projects
 * @tag projects
 * @param accept - This API is under preview and subject to change.
 * @param username - username parameter
 * @param state - Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"projects/list-for-user"(accept, Header < string > , username, string, state ?  : Query < "open" | "closed" | "all" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            body?: string;
            columns_url?: string;
            created_at?: string;
            creator?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            html_url?: string;
            id?: double;
            name?: string;
            node_id?: string;
            number?: double;
            owner_url?: string;
            state?: string;
            updated_at?: string;
            url?: string;
        }>();
    }]);
/**
 * List events that a user has received
 * @description These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 * @since 9.0.0
 * @http GET /users/{username}/received_events
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"activity/list-received-events-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List public events that a user has received
 * @since 9.0.0
 * @http GET /users/{username}/received_events/public
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"activity/list-received-public-events-for-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List user repositories
 * @description Lists public repositories for the specified user.
 * @since 9.0.0
 * @http GET /users/{username}/repos
 * @tag repos
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param type - Can be one of `all`, `owner`, `member`.
 * @param sort - Can be one of `created`, `updated`, `pushed`, `full_name`.
 * @param direction - Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 418 - Response definition missing
 */
"repos/list-for-user"(accept ?  : Header < string > , username, string, type ?  : Query < "all" | "owner" | "member" > , sort ?  : Query < "created" | "updated" | "pushed" | "full_name" > , direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 418) => {
        isException: true;
    }]);
/**
 * List repositories being starred by a user
 * @description You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
 * @since 9.0.0
 * @http GET /users/{username}/starred
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param sort - One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
 * @param direction - One of `asc` (ascending) or `desc` (descending).
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"activity/list-repos-starred-by-user"(accept ?  : Header < string > , username, string, sort ?  : Query < "created" | "updated" > , direction ?  : Query < "asc" | "desc" > , per_page ?  : Query < int64 > , page ?  : Query<int64>(), [[(code: 200, mediaType: "application/json") => {
            body: Array<{
                allow_merge_commit?: boolean;
                allow_rebase_merge?: boolean;
                allow_squash_merge?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                fork?: boolean;
                forks_count?: double;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string;
                hooks_url?: string;
                html_url?: string;
                id?: double;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: string;
                name?: string;
                network_count?: double;
                node_id?: string;
                notifications_url?: string;
                open_issues_count?: double;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: double;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                permissions?: {
                    admin?: boolean;
                    pull?: boolean;
                    push?: boolean;
                };
                private?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: double;
                ssh_url?: string;
                stargazers_count?: double;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_count?: double;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                temp_clone_token?: string;
                template_repository?: string;
                topics?: Array<string>;
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers_count?: double;
            }>();
        }, (code: 200, mediaType: "application/vnd.github.v3.star+json") => {
            body: Array<{
                repo?: {
                    allow_merge_commit?: boolean;
                    allow_rebase_merge?: boolean;
                    allow_squash_merge?: boolean;
                    archive_url?: string;
                    archived?: boolean;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    clone_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    created_at?: string;
                    default_branch?: string;
                    deployments_url?: string;
                    description?: string;
                    disabled?: boolean;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_count?: double;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    git_url?: string;
                    has_downloads?: boolean;
                    has_issues?: boolean;
                    has_pages?: boolean;
                    has_projects?: boolean;
                    has_wiki?: boolean;
                    homepage?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: double;
                    is_template?: boolean;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    language?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    mirror_url?: string;
                    name?: string;
                    network_count?: double;
                    node_id?: string;
                    notifications_url?: string;
                    open_issues_count?: double;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: double;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    permissions?: {
                        admin?: boolean;
                        pull?: boolean;
                        push?: boolean;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    pushed_at?: string;
                    releases_url?: string;
                    size?: double;
                    ssh_url?: string;
                    stargazers_count?: double;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_count?: double;
                    subscribers_url?: string;
                    subscription_url?: string;
                    svn_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    temp_clone_token?: string;
                    template_repository?: string;
                    topics?: Array<string>;
                    trees_url?: string;
                    updated_at?: string;
                    url?: string;
                    visibility?: string;
                    watchers_count?: double;
                };
                starred_at?: string;
            }>();
        }]]);
/**
 * List repositories being watched by a user
 * @since 9.0.0
 * @http GET /users/{username}/subscriptions
 * @tag activity
 * @param accept - Setting to `application/vnd.github.v3+json` is recommended
 * @param username - username parameter
 * @param per_page - Results per page (max 100)
 * @param page - Page number of the results to fetch.
 * @return 200 - response
 */
"activity/list-repos-watched-by-user"(accept ?  : Header < string > , username, string, per_page ?  : Query < int64 > , page ?  : Query<int64>(), [(code: 200, mediaType: "application/json") => {
        body: Array<{
            archive_url?: string;
            archived?: boolean;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            clone_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            created_at?: string;
            default_branch?: string;
            deployments_url?: string;
            description?: string;
            disabled?: boolean;
            downloads_url?: string;
            events_url?: string;
            fork?: boolean;
            forks_count?: double;
            forks_url?: string;
            full_name?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            has_downloads?: boolean;
            has_issues?: boolean;
            has_pages?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            homepage?: string;
            hooks_url?: string;
            html_url?: string;
            id?: double;
            is_template?: boolean;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            language?: string;
            languages_url?: string;
            license?: {
                key?: string;
                name?: string;
                node_id?: string;
                spdx_id?: string;
                url?: string;
            };
            merges_url?: string;
            milestones_url?: string;
            mirror_url?: string;
            name?: string;
            network_count?: double;
            node_id?: string;
            notifications_url?: string;
            open_issues_count?: double;
            owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: double;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
            };
            permissions?: {
                admin?: boolean;
                pull?: boolean;
                push?: boolean;
            };
            private?: boolean;
            pulls_url?: string;
            pushed_at?: string;
            releases_url?: string;
            size?: double;
            ssh_url?: string;
            stargazers_count?: double;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_count?: double;
            subscribers_url?: string;
            subscription_url?: string;
            svn_url?: string;
            tags_url?: string;
            teams_url?: string;
            temp_clone_token?: string;
            template_repository?: string;
            topics?: Array<string>;
            trees_url?: string;
            updated_at?: string;
            url?: string;
            visibility?: string;
            watchers_count?: double;
        }>();
    }]);
