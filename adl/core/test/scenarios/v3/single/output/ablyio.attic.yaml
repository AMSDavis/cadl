paths:
  /channels:
    get:
      description: Enumerate all active channels of the application
      operationId: getMetadataOfAllChannels
      parameters:
        - in: query
          name: limit
          schema:
            default: 100
            type: integer
        - description: Optionally limits the query to only those channels whose name
            starts with the given prefix
          in: query
          name: prefix
          schema:
            type: string
        - description: optionally specifies whether to return just channel names (by=id)
            or ChannelDetails (by=value)
          in: query
          name: by
          schema:
            enum:
              - value
              - id
            type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                oneOf:
                  - items:
                      $ref: "#/components/schemas/ChannelDetails"
                    type: array
                  - items:
                      type: string
                    type: array
            application/x-msgpack:
              schema:
                oneOf:
                  - items:
                      $ref: "#/components/schemas/ChannelDetails"
                    type: array
                  - items:
                      type: string
                    type: array
            text/html:
              schema:
                type: string
          description: OK
          headers:
            link:
              $ref: "#/components/headers/Link"
        default:
          $ref: "#/components/responses/Error"
      summary: Enumerate all active channels of the application
      tags:
        - Status
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  "/channels/{channel_id}":
    get:
      description: Get metadata of a channel
      operationId: getMetadataOfChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelDetails"
          description: OK
          headers:
            x-ably-serverid:
              $ref: "#/components/headers/ServerId"
        default:
          $ref: "#/components/responses/Error"
      summary: Get metadata of a channel
      tags:
        - Status
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  "/channels/{channel_id}/messages":
    get:
      description: Get message history for a channel
      operationId: getMessagesByChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
        - $ref: "#/components/parameters/filterStart"
        - $ref: "#/components/parameters/filterLimit"
        - $ref: "#/components/parameters/filterEnd"
        - $ref: "#/components/parameters/filterDirection"
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Message"
                type: array
            application/x-msgpack:
              schema:
                items:
                  $ref: "#/components/schemas/Message"
                type: array
            text/html:
              schema:
                type: string
          description: OK
          headers:
            link:
              $ref: "#/components/headers/Link"
            x-ably-serverid:
              $ref: "#/components/headers/ServerId"
        default:
          description: Error
          headers:
            x-ably-errorcode:
              $ref: "#/components/headers/ErrorCode"
            x-ably-errormessage:
              $ref: "#/components/headers/ErrorMessage"
            x-ably-serverid:
              $ref: "#/components/headers/ServerId"
      summary: Get message history for a channel
      tags:
        - History
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    post:
      description: Publish a message to the specified channel
      operationId: publishMessagesToChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
          application/x-msgpack:
            schema:
              $ref: "#/components/schemas/Message"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        2XX:
          content:
            application/json:
              schema:
                properties:
                  channel:
                    type: string
                  messageId:
                    type: string
                type: object
            application/x-msgpack:
              schema:
                properties:
                  channel:
                    type: string
                  messageId:
                    type: string
                type: object
            text/html:
              schema:
                properties:
                  channel:
                    type: string
                  messageId:
                    type: string
                type: object
          description: OK
          headers:
            x-ably-serverid:
              $ref: "#/components/headers/ServerId"
        default:
          $ref: "#/components/responses/Error"
      summary: Publish a message to a channel
      tags:
        - Publishing
  "/channels/{channel_id}/presence":
    get:
      description: Get presence on a channel
      operationId: getPresenceOfChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
        - in: query
          name: clientId
          schema:
            type: string
        - in: query
          name: connectionId
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 100
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PresenceMessage"
                type: array
            application/x-msgpack:
              schema:
                items:
                  $ref: "#/components/schemas/PresenceMessage"
                type: array
            text/html:
              schema:
                type: string
          description: OK
          headers:
            link:
              $ref: "#/components/headers/Link"
            x-ably-serverid:
              $ref: "#/components/headers/ServerId"
        default:
          $ref: "#/components/responses/Error"
      summary: Get presence of a channel
      tags:
        - Status
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  "/channels/{channel_id}/presence/history":
    get:
      description: Get presence on a channel
      operationId: getPresenceHistoryOfChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
        - $ref: "#/components/parameters/filterStart"
        - $ref: "#/components/parameters/filterLimit"
        - $ref: "#/components/parameters/filterEnd"
        - $ref: "#/components/parameters/filterDirection"
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PresenceMessage"
                type: array
            application/x-msgpack:
              schema:
                items:
                  $ref: "#/components/schemas/PresenceMessage"
                type: array
            text/html:
              schema:
                type: string
          description: OK
          headers:
            link:
              $ref: "#/components/headers/Link"
        default:
          $ref: "#/components/responses/Error"
      summary: Get presence history of a channel
      tags:
        - History
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  "/keys/{keyName}/requestToken":
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    post:
      description: This is the means by which clients obtain access tokens to use the
        service. You can see how to construct an Ably TokenRequest in the [Ably
        TokenRequest
        spec](https://www.ably.io/documentation/rest-api/token-request-spec)
        documentation, although we recommend you use an Ably SDK rather to
        create a TokenRequest, as the construction of a TokenRequest is complex.
        The resulting token response object contains the token properties as
        defined in Ably TokenRequest spec. Authentication is not required if
        using a Signed TokenRequest.
      operationId: requestAccessToken
      parameters:
        - $ref: "#/components/parameters/key_name"
      requestBody:
        content:
          application/json:
            example:
              capability:
                channel1:
                  - publish
                  - subscribe
                wildcard:channels:*:
                  - publish
              keyName: YourKey.Name
              timestamp: "1559124196551"
            schema:
              oneOf:
                - $ref: "#/components/schemas/TokenRequest"
                - $ref: "#/components/schemas/SignedTokenRequest"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/TokenDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Request an access token
      tags:
        - Authentication
  /push/channelSubscriptions:
    delete:
      description: Delete a device details object.
      operationId: deletePushDeviceDetails
      parameters:
        - description: Filter to restrict to subscriptions associated with that channel.
          in: query
          name: channel
          schema:
            type: string
        - description: Must be set when clientId is empty, cannot be used with clientId.
          in: query
          name: deviceId
          schema:
            type: string
        - description: Must be set when deviceId is empty, cannot be used with deviceId.
          in: query
          name: clientId
          schema:
            type: string
      responses:
        2XX:
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Delete a registered device's update token
      tags:
        - Push
    get:
      description: Get a list of push notification subscriptions to channels.
      operationId: getPushSubscriptionsOnChannels
      parameters:
        - description: Filter to restrict to subscriptions associated with that channel.
          in: query
          name: channel
          schema:
            type: string
        - description: Optional filter to restrict to devices associated with that
            deviceId. Cannot be used with clientId.
          in: query
          name: deviceId
          schema:
            type: string
        - description: Optional filter to restrict to devices associated with that
            clientId. Cannot be used with deviceId.
          in: query
          name: clientId
          schema:
            type: string
        - description: The maximum number of records to return.
          in: query
          name: limit
          schema:
            default: 100
            maximum: 1000
            type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: List channel subscriptions
      tags:
        - Push
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    post:
      description: Subscribe either a single device or all devices associated with a
        client ID to receive push notifications from messages sent to a channel.
      operationId: subscribePushDeviceToChannel
      requestBody:
        content:
          application/json:
            example:
              channel: my:channel
              clientId: myClientId
            schema:
              oneOf:
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    deviceId:
                      description: Must be set when clientId is empty, cannot be used with clientId.
                      type: string
                  type: object
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    clientId:
                      description: Must be set when deviceId is empty, cannot be used with deviceId.
                      type: string
                  type: object
          application/x-msgpack:
            example:
              channel: my:channel
              clientId: myClientId
            schema:
              oneOf:
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    deviceId:
                      description: Must be set when clientId is empty, cannot be used with clientId.
                      type: string
                  type: object
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    clientId:
                      description: Must be set when deviceId is empty, cannot be used with deviceId.
                      type: string
                  type: object
          application/x-www-form-urlencoded:
            example:
              channel: my:channel
              clientId: myClientId
            schema:
              oneOf:
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    deviceId:
                      description: Must be set when clientId is empty, cannot be used with clientId.
                      type: string
                  type: object
                - properties:
                    channel:
                      description: Channel name.
                      type: string
                    clientId:
                      description: Must be set when deviceId is empty, cannot be used with deviceId.
                      type: string
                  type: object
      responses:
        2XX:
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Subscribe a device to a channel
      tags:
        - Push
  /push/channels:
    get:
      description: Returns a paginated response of channel names.
      operationId: getChannelsWithPushSubscribers
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
            application/x-msgpack:
              schema:
                items:
                  type: string
                type: array
            text/html:
              schema:
                items:
                  type: string
                type: array
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: List all channels with at least one subscribed device
      tags:
        - Push
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  /push/deviceRegistrations:
    delete:
      description: Unregisters devices. All their subscriptions for receiving push
        notifications through channels will also be deleted.
      operationId: unregisterAllPushDevices
      parameters:
        - description: Optional filter to restrict to devices associated with that
            deviceId. Cannot be used with clientId.
          in: query
          name: deviceId
          schema:
            type: string
        - description: Optional filter to restrict to devices associated with that
            clientId. Cannot be used with deviceId.
          in: query
          name: clientId
          schema:
            type: string
      responses:
        2XX:
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Unregister matching devices for push notifications
      tags:
        - Push
    get:
      description: List of device details of devices registed for push notifications.
      operationId: getRegisteredPushDevices
      parameters:
        - description: Optional filter to restrict to devices associated with that deviceId.
          in: query
          name: deviceId
          schema:
            type: string
        - description: Optional filter to restrict to devices associated with that clientId.
          in: query
          name: clientId
          schema:
            type: string
        - description: The maximum number of records to return.
          in: query
          name: limit
          schema:
            default: 100
            maximum: 1000
            type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: List devices registered for receiving push notifications
      tags:
        - Push
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    post:
      description: Register a device’s details, including the information necessary to
        deliver push notifications to it. Requires "push-admin" capability.
      operationId: registerPushDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
          application/x-msgpack:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Register a device for receiving push notifications
      tags:
        - Push
  "/push/deviceRegistrations/{device_id}":
    delete:
      description: Unregisters a single device by its device ID. All its subscriptions
        for receiving push notifications through channels will also be deleted.
      operationId: unregisterPushDevice
      parameters:
        - $ref: "#/components/parameters/deviceId"
      responses:
        2XX:
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Unregister a single device for push notifications
      tags:
        - Push
    get:
      description: Get the full details of a device.
      operationId: getPushDeviceDetails
      parameters:
        - $ref: "#/components/parameters/deviceId"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Get a device registration
      tags:
        - Push
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    patch:
      description: Specific attributes of an existing registration can be updated.
        Only clientId, metadata and push.recipient are mutable.
      operationId: patchPushDeviceDetails
      parameters:
        - $ref: "#/components/parameters/deviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
          application/x-msgpack:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Update a device registration
      tags:
        - Push
    put:
      description: Device registrations can be upserted (the existing registration is
        replaced entirely) with a PUT operation. Only clientId, metadata and
        push.recipient are mutable.
      operationId: putPushDeviceDetails
      parameters:
        - $ref: "#/components/parameters/deviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
          application/x-msgpack:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DeviceDetails"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Update a device registration
      tags:
        - Push
  "/push/deviceRegistrations/{device_id}/resetUpdateToken":
    get:
      description: Gets an updated device details object.
      operationId: updatePushDeviceDetails
      parameters:
        - $ref: "#/components/parameters/deviceId"
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            application/x-msgpack:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
            text/html:
              schema:
                $ref: "#/components/schemas/DeviceDetails"
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Reset a registered device's update token
      tags:
        - Push
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  /push/publish:
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
    post:
      description: A convenience endpoint to deliver a push notification payload to a
        single device or set of devices identified by their client identifier.
      operationId: publishPushNotificationToDevices
      requestBody:
        content:
          application/json:
            schema:
              properties:
                push:
                  $ref: "#/components/schemas/Push"
                recipient:
                  $ref: "#/components/schemas/Recipient"
              required:
                - recipient
              type: object
          application/x-msgpack:
            schema:
              properties:
                push:
                  $ref: "#/components/schemas/Push"
                recipient:
                  $ref: "#/components/schemas/Recipient"
              required:
                - recipient
              type: object
          application/x-www-form-urlencoded:
            schema:
              properties:
                push:
                  $ref: "#/components/schemas/Push"
                recipient:
                  $ref: "#/components/schemas/Recipient"
              required:
                - recipient
              type: object
      responses:
        2XX:
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Publish a push notification to device(s)
      tags:
        - Push
  /stats:
    get:
      description: The Ably system can be queried to obtain usage statistics for a
        given application, and results are provided aggregated across all
        channels in use in the application in the specified period. Stats may be
        used to track usage against account quotas.
      operationId: getStats
      parameters:
        - $ref: "#/components/parameters/filterStart"
        - $ref: "#/components/parameters/filterLimit"
        - $ref: "#/components/parameters/filterEnd"
        - $ref: "#/components/parameters/filterDirection"
        - description: Specifies the unit of aggregation in the returned results.
          in: query
          name: unit
          schema:
            default: minute
            enum:
              - minute
              - hour
              - day
              - month
            type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                type: object
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Retrieve usage statistics for an application
      tags:
        - Stats
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
  /time:
    get:
      description: This returns the service time in milliseconds since the epoch.
      operationId: getTime
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  type: integer
                type: array
            application/x-msgpack:
              schema:
                items:
                  type: integer
                type: array
            text/html:
              schema:
                type: string
          description: OK
        default:
          $ref: "#/components/responses/Error"
      summary: Get the service time
      tags:
        - Stats
    parameters:
      - $ref: "#/components/parameters/versionHeader"
      - $ref: "#/components/parameters/responseFormat"
components:
  parameters:
    channelId:
      description: The [Channel's ID](https://www.ably.io/documentation/rest/channels).
      in: path
      name: channel_id
      required: true
    deviceId:
      description: Device's ID.
      in: path
      name: device_id
      required: true
    filterDirection:
      in: query
      name: direction
      schema:
        default: backwards
    filterEnd:
      in: query
      name: end
      schema:
        default: now
    filterLimit:
      in: query
      name: limit
      schema:
        default: "100"
    filterStart:
      in: query
      name: start
    key_name:
      description: The [key
        name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format)
        comprises of the app ID and key ID of an API key.
      in: path
      name: keyName
      required: true
    responseFormat:
      description: The response format you would like
      in: query
      name: format
    versionHeader:
      description: The version of the API you wish to use.
      in: header
      name: X-Ably-Version
  responses:
    Error:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
        application/x-msgpack:
          schema:
            $ref: "#/components/schemas/Error"
        text/html:
          schema:
            $ref: "#/components/schemas/Error"
      description: Error
      headers:
        x-ably-errorcode:
          $ref: "#/components/headers/ErrorCode"
        x-ably-errormessage:
          $ref: "#/components/headers/ErrorMessage"
        x-ably-serverid:
          $ref: "#/components/headers/ServerId"
  securitySchemes:
    basicAuth:
      description: Basic Authentication using an [API
        key](https://www.ably.io/documentation/core-features/authentication#basic-authentication).
      scheme: basic
      type: http
    bearerAuth:
      description: Token Authentication using an [Ably
        Token](https://www.ably.io/documentation/core-features/authentication#basic-authentication),
        or optionally an [Ably
        JWT](https://www.ably.io/documentation/core-features/authentication#ably-jwt-process).
      scheme: bearer
      type: http
