import "@cadl-lang/rest";

using Cadl.Http;

@doc("The error object")
model SearchError {
  @statusCode statusCode: "default";

  @doc("One of a server-defined set of error codes")
  @visibility("read")
  code: string;

  @doc("A human-readable representation of the error")
  @visibility("read")
  message: string;

  @doc("An array of details about specific errors that led to this reported error.")
  @visibility("read")
  details?: SearchError[];
}

model ApiVersionParameter {
  @doc("Client API version")
  @Cadl.Http.query
  "api-version": string;
}

// ISSUE: Can't set x-ms-parameter-grouping: https://github.com/Azure/cadl-azure/issues/1000
// ISSUE: @extension on parameter doesn't work: https://github.com/Azure/cadl-azure/issues/1121
model ClientRequestIdParameter {
  @doc("The tracking ID sent with the request to help with debugging.")
  @Cadl.Http.header
  "x-ms-client-request-id": string;
}

model PreferHeaderParameter {
  @doc("The tracking ID sent with the request to help with debugging.")
  @Cadl.Http.header
  Prefer: "return=representation"; // BUGBUG. format needed, also missing few other custom x-ms flags
}

model IfMatchParameter {
  @doc("The tracking ID sent with the request to help with debugging.")
  @Cadl.Http.header
  "If-Match"?: string; // BUGBUG. format needed, also missing few other custom x-ms flags
}

model IfNoneMatchParameter {
  @doc("Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.")
  @Cadl.Http.header
  "If-None-Match"?: string;
}

model SelectParameter {
  @doc("Selects which top-level properties of the resource to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.")
  @Cadl.Http.query
  "$select"?: string;
}

model CollectionResult<T, N> {
  @extension("x-ms-client-name", N)
  value: T;
}

model SearchCreatedResponse<T> {
  ...CreatedResponse;
  @body body: T;
}

model ETag {
  @extension("x-ms-client-name", "eTag")
  @doc("The ETag of the resource.")
  "@odata.etag": string;
}

model IgnoreResetRequirementsParameter {
  @extension("x-ms-client-name", "skipIndexerResetRequirementForCache")
  @doc("Ignores cache reset requirements.")
  @query
  ignoreResetRequirements?: boolean;
}

model DisableCacheReprocessingChangeDetectionParameter {
  @extension("x-ms-client-name", "skipIndexerResetRequirementForCache")
  @doc("Disables cache reprocessing change detection.")
  @query
  disableCacheReprocessingChangeDetection?: boolean;
}
