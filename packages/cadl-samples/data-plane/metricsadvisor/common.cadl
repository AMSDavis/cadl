import "@cadl-lang/rest";
import "@cadl-lang/openapi";

using Cadl.Http;

@doc("Error response")
@error
model ErrorResponse {
  @doc("The error object")
  error: Error;
}

@doc("The error object")
model Error {
  @doc("One of a server-defined set of error codes")
  code: ErrorCode;

  @doc("A human-readable representation of the error")
  message: string;

  @doc("Error target")
  target?: string;
}

@doc("Collection of error types")
model Errors {
  errors: Error[];
}

enum ErrorCode {
  InvalidRequest,
  InvalidArgument,
  Unauthorized,
  Forbidden,
  NotFound,
  ProjectNotFound,
  OperationNotFound,
  AzureCognitiveSearchNotFound,
  AzureCognitiveSearchIndexNotFound,
  TooManyRequests,
  AzureCognitiveSearchThrottling,
  AzureCognitiveSearchIndexLimitReached,
  InternalServerError,
  ServiceUnavailable,
}

model ApiVersionParameter {
  @doc("Client API version")
  @query
  "api-version": string;
}

model TopParameter {
  @extension("x-ms-parameter-location", "method")
  @doc("The maximum number of resources to return from the collection")
  @query
  top?: int32;
}

model SkipParameter {
  @extension("x-ms-parameter-location", "method")
  @doc("An offset into the collection of the first resource to be returned")
  @query
  skip?: int32;
}

model MaxPageSizeParameter {
  @extension("x-ms-parameter-location", "method")
  @doc("The maximum number of resources to include in a single response")
  @query
  mazpagesize?: int32;
}

alias ListParameters = TopParameter & SkipParameter & MaxPageSizeParameter;

alias LROResponse = AcceptedResponse & {
  @header "Operation-Location": string;
} | ErrorResponse;

alias OkWithError<T> = OkResponse<T> | ErrorResponse;

alias OkStatusCode<T, U> = {
  @statusCode statusCode: T;
  @body body: U;
};
