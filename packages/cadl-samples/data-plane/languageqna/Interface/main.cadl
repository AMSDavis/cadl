import "@cadl-lang/rest";

import "./questionanswering-authoring_models.cadl";

@serviceTitle("Hello world")
@serviceVersion("0.1.0")
namespace Azure.Language.QnA; //@route("")  // TODO

using Cadl.Http;
using Cadl.Rest;
using Cadl.Rest.Resource;

@doc("")
@route("/projects/{projectName}")
namespace Hello {
  @post
  op CreateExport(...ProjectNamePathParameter): Cadl.Http.OkResponse<JobState>;
}

interface Projects
  mixes ResourceList<ProjectMetadata, ODataError>,
    ResourceRead<ProjectMetadata, ODataError>,
    ResourceDelete<ProjectMetadata, ODataError>,
    ResourceUpdate<ProjectMetadata, ODataError> {
  @extension("x-ms-long-running-operation", true)
  @post
  CreateExport(
    ...ResourceParameters<ProjectMetadata>,
    ...AssetKindParameter
  ): Cadl.Http.OkResponse<""> | ODataError; // TODO: capture LRO status

  @route("feedback")
  @post
  feedback(
    ...ResourceParameters<ProjectMetadata>,
    @body feedback: ActiveLearningFeedback
  ): Cadl.Http.OkResponse<ActiveLearningFeedback> | ODataError;
}

// TODO: Switch to CreateOrUpdate
interface Deployments
  mixes ResourceCreate<ProjectDeployment, ODataError>,
    ResourceList<ProjectDeployment, ODataError> {
  // TODO extension resource for multi-parents
  @get
  @route("{projectName}/jobs/{jobId}")
  GetJob(...ResourceParameters<QnaSourceRecord>, ...JobIdParameter): JobState | ODataError;
}

interface Synonyms
  mixes ResourceCreate<SynonymAsset, ODataError>,
    ResourceList<SynonymAsset, ODataError> {}

interface Sources
  mixes ResourceUpdate<QnaSourceRecord, ODataError>,
    ResourceList<QnaSourceRecord, ODataError> {
  // TODO: Singlton Resource not represented correctly
  @get
  @route("{projectName}/sources/jobs/{jobId}")
  GetJob(...ResourceParameters<QnaSourceRecord>, ...JobIdParameter): JobState | ODataError;
}

interface Qnas mixes ResourceCreate<QnaRecord, ODataError>, ResourceList<QnaRecord, ODataError> {
  @get
  @route("{projectName}/qnas/jobs/{jobId}")
  GetJob(...ResourceParameters<QnaRecord>, ...JobIdParameter): JobState | ODataError;
}
