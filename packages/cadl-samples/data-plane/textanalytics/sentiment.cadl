namespace TextAnalytics;

using Cadl.Http;

@route("/sentiment")
@doc("Analyze sentiment.")
@post
op analyzeSentiment(
  ...SentimentParameters,
  ...ShowStatsParameter,
  ...MultiLanguageInputParameter
): Response<SentimentResult>;

model SentimentParameters {
  ...CommonParameters;
  ...StringIndexTypeParameter;

  @doc("""
    If set to true, response will contain not only sentiment prediction but also opinion 
    mining (aspect-based sentiment analysis) results.
    """)
  @query
  opinionMining?: boolean = false;
}

model SentimentResult is Result<DocumentSentiment> {}

model DocumentSentiment is DocumentInfo {
  @doc("Predicted sentiment for document.")
  sentiment: DocumentSentimentValue;

  @doc("Sentence level sentiment analysis.")
  sentences: SentenceSentiment[];

  @doc("Document level sentiment confidence scores between 0 and 1 for each sentiment class.")
  confidenceScores: SentimentConfidenceScorePerLabel;
}

model SentenceSentiment {
  @doc("The sentence text.")
  text: string;

  @doc("The predicted sentiment for the sentence.")
  sentiment: SentenceSentimentValue;

  @doc("The sentiment confidence score between 0 and 1 for the sentence for all classes.")
  confidenceScores: SentimentConfidenceScorePerLabel;

  @doc("The sentence offset from the start of the document.")
  offset: int32;

  @doc("The length of the sentence.")
  length: int32;

  @doc("The array of sentence targets for the sentence.")
  targets?: SentenceTarget[];
}

model SentenceTarget {
  @doc("Targeted sentiment in the sentence.")
  sentiment: TokenSentimentValue;

  @doc("Target sentiment confidence scores for the target in the sentence.")
  confidenceScores: TargetConfidenceScorePerLabel;

  @doc("The target offset from the start of the sentence.")
  offset: int32;

  @doc("The length of the target.")
  length: int32;

  @doc("The target text detected.")
  text: string;

  @doc("The array of either assessment or target objects which is related to the target.")
  relations: TargetRelation[];
}

model TargetRelation {
  @doc("The type related to the target.")
  relationType: TargetRelationType;

  @doc("The JSON pointer indicating the linked object.")
  ref: string;
}

model TargetConfidenceScorePerLabel {
  positive: float64;
  negative: float64;
}

model SentimentConfidenceScorePerLabel {
  ...TargetConfidenceScorePerLabel;
  neutral: float64;
}

// ISSUE: Can't get modelAsString=false for named enum: https://github.com/Azure/cadl-azure/issues/1036
enum TargetRelationType {
  assessment,
  target,
}

// ISSUE: Can't get modelAsString=false for named enum: https://github.com/Azure/cadl-azure/issues/1036
enum DocumentSentimentValue {
  positive,
  neutral,
  negative,
  mixed,
}

// ISSUE: Can't get modelAsString=false for named enum: https://github.com/Azure/cadl-azure/issues/1036
enum SentenceSentimentValue {
  positive,
  neutral,
  negative,
}

// ISSUE: Can't get modelAsString=false for named enum: https://github.com/Azure/cadl-azure/issues/1036
enum TokenSentimentValue {
  positive,
  neutral,
  mixed,
}
