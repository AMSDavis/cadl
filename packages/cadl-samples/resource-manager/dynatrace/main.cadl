import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "./models.cadl";

@armNamespace
@serviceTitle("Dynatrace.Observability")
@serviceVersion("2021-06-13-preview")
namespace Dynatrace.Observability;

using Cadl.Http;
using Cadl.Rest;
using Azure.ResourceManager;

@doc("Dynatrace Monitor Resource")
model MonitorResource is TrackedResource<MonitorProperties> {
  @doc("Monitor resource name")
  @key("monitorName")
  @segment("monitors")
  name: string;
  ...ManagedServiceIdentity; // change here to use the standard definition
}

@armResourceOperations
interface Monitors mixes ResourceOperations<MonitorResource, MonitorProperties> {
  @post
  @segment("getAccountCredentials")
  @doc("Gets the user account credentials for a Monitor")
  @armResourceAction(MonitorResource)
  getAccountCredentials(
    ...ResourceInstanceParameters<MonitorResource>
  ): AccountInfoSecure | ErrorResponse;

  @post
  @segment("listMonitoredResources")
  @doc("List the resources currently being monitored by the Dynatrace monitor resource.")
  @pageable("nextLink")
  @armResourceAction(MonitorResource)
  listMonitoredResources(
    ...ResourceInstanceParameters<MonitorResource>
  ): ArmResponse<MonitoredResourceListResponse> | ErrorResponse;

  @post
  @segment("vmHostPayload")
  @doc("Returns the payload that needs to be passed in the request body for installing Dynatrace agent on a VM.")
  @armResourceAction(MonitorResource)
  getVMHostPayload(
    ...ResourceInstanceParameters<MonitorResource>
  ): ArmResponse<VMExtensionPayload> | ErrorResponse;

  @post
  @segment("vmHostUpdate")
  @doc("Sending request to update the collection when Dynatrace agent has been installed on a VM for a given monitor.")
  @pageable("nextLink")
  @armResourceAction(MonitorResource)
  listVMHostUpdate(
    ...ResourceInstanceParameters<MonitorResource>,
    ...VMHostUpdateParameter // change here
  ): ArmResponse<VMResourcesListResponse> | ErrorResponse;

  @post
  @segment("listVMHosts")
  @doc("List the compute resources currently being monitored by the Dynatrace resource.")
  @pageable("nextLink")
  @armResourceAction(MonitorResource)
  listVMHosts(
    ...ResourceInstanceParameters<MonitorResource>
  ): ArmResponse<VMResourcesListResponse> | ErrorResponse;

  @post
  @segment("singleSignOnConfigurations")
  @doc("List the single sign-on configurations for a given monitor resource.")
  @pageable("nextLink")
  @armResourceAction(MonitorResource)
  listSingleSignOnConfigurations(
    ...ResourceInstanceParameters<MonitorResource>
  ): ArmResponse<VMResourcesListResponse> | ErrorResponse;
}

@doc("Tag rules for a monitor resource")
@parentResource(MonitorResource)
model TagRule is ProxyResource<MonitoringTagRulesProperties> {
  @doc("Monitor RuleSet resource name")
  @key("ruleSetName")
  @segment("tagRules")
  name: string;
}

@armResourceOperations
interface TagRules
  mixes ProxyResourceOperations<TagRule>,
    ProxyResourceUpdate<TagRule, MonitoringTagRulesProperties> {}

// note: I think you only need get.  It is odd to have PUT without DELETE, though.

@doc("Single sign-on configurations for a given monitor resource.")
@parentResource(MonitorResource)
model DynatraceSingleSignOnResource is ProxyResource<DynatraceSingleSignOnProperties> {
  @doc("Single Sign On Configuration Name")
  @key("configurationName")
  @segment("singleSignOnConfigurations")
  name: string;
}

// check if this is correct. We only need these 2 operations
@armResourceOperations
interface SingleSignOn
  mixes ResourceCreate<DynatraceSingleSignOnResource>,
    ResourceRead<DynatraceSingleSignOnResource>,
    ResourceListByResourceGroup<DynatraceSingleSignOnResource> {}
