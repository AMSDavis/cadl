import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-rpaas";

@armNamespace
@serviceTitle("CodeSigningManagementClient")
@serviceVersion("2020-12-14-preview")
@doc("Code Sign Resource Provider Account and Certificate Profile management API.")
namespace Microsoft.CodeSigning;

@doc("A CodeSignAccount resource")
@armResource({
  path: "codeSignAccounts",
  parameterType: AccountNameParameter,
  collectionName: "CodeSignAccounts",
})
model CodeSignAccount extends TrackedResource<CodeSignAccountProperties> {};

@doc("Properties of the code sign account")
model CodeSignAccountProperties {
  @visibility("read")
  @doc("The URI of the code sign account for performing operations on certificate profiles. This property is readonly")
  accountUri?: string;

  @visibility("read")
  verificationStatus?: VerificationStatus;

  @visibility("read")
  provisioningState?: ProvisioningState;
}

@doc("Object containing updates for patch operations")
model CodeSignAccountPatch {
  @doc("Resource tags.")
  tags: {};
}

model AccountNameParameter {
  @doc("Code Signing account name")
  @format("^[a-zA-Z0-9-]{3,24}$")
  @path accountName: string;
}

enum VerificationStatus { Completed, InProgress, NotCompleted }

enum RotationPolicy { Monthly }

enum ProfileType { Test, Trial, PrivateTrust, PublicTrust }

enum ProvisioningState {
  Succeeded, Failed, Cancelled, Provisioning, Updating, Deleting, Accepted
}

@armResource({
  path: "certificateProfiles",
  parameterType: ProfileNameParameter,
  parentResourceType: CodeSignAccount,
  collectionName: "CertificateProfiles",
  standardOperations: ["read", "update"],
})
@armListBy(AccountNameParameter, "ListByCodeSignAccounts")
model CertificateProfile extends ProxyResource<CertificateProfileProperties> {}

model ProfileNameParameter {
  @doc("Certificate profile name")
  @format("^[a-zA-Z0-9-]{3,24}$")
  @path profileName: string;
}

@doc("Properties of the certificate profile")
model CertificateProfileProperties {
  profileType: ProfileType;

  rotationPolicy: RotationPolicy;

  @doc("Name of the certificate")
  commonName: string;

  @visibility("read")
  @doc("Certificate authority of the certificate")
  authority?: string;

  @doc("Subject Alternative Name of the certificate")
  subjectAlternativeName: string;

  @visibility("read")
  organization?: string;

  @visibility("read")
  streetAddress?: string;

  @visibility("read")
  city?: string;

  @visibility("read")
  state?: string;

  @visibility("read")
  country?: string;

  // TODO: Flatten?
  @visibility("read")
  certificates?: Certificate[];

  @visibility("read")
  provisioningState?: ProvisioningState;
}

@doc("Properties of the certificate")
model Certificate {
  @doc("Id of the certificate")
  @visibility("read")
  id: string;

  @doc("Subject name of the certificate")
  @visibility("read")
  subjectName: string;

  @doc("Subject alternative name of the certificate")
  @visibility("read")
  subjectAlternativeName: string;

  @doc("Thumbprint of the certificate")
  @visibility("read")
  thumbprint: string;

  @doc("Certificate created date")
  @visibility("read")
  createdDate: string;

  @doc("Certificate expiry date")
  @visibility("read")
  expiryDate: string;
}
