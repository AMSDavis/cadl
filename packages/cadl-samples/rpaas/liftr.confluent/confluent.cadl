import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-rpaas";
import "@azure-tools/cadl-rpaas-controller";

@armNamespace
@serviceTitle("Microsoft.Confluent")
@serviceVersion("2021-03-01-preview")
namespace Microsoft.Confluent;

@doc("A string that represents a URI.")
model Uri extends string { };

@doc("Reusable representation of an email address")
@format("\\w+@\\w+\\.\\w+")
model email extends string { };

@doc("Shorthand for setting length limit.")
@minLength(5)
@maxLength(50)
model MediumString extends string { };

@doc("Shorthand for setting length limit.")
@maxLength(25)
model ShortString extends string { };

@armResource({
  path: "organizations",
  collectionName: "Organizations",
  parameterType: OrganizationNameParameter,
})
@doc("Details of the Confluent organization.")
model Organization is TrackedResource<OrganizationProperties> { };

model OrganizationNameParameter {
  @doc("Organization resource name")
  @path organizationName: string;
}

@doc("Details of the Confluent organization.")
model OrganizationProperties {
  @doc("UTC Time when Organization resource was created.")
  @visibility("read")
  createdTime?: zonedDateTime;

  @doc("Id of the Confluent organization.")
  @visibility("read", "create")
  organizationId: string;

  @doc("Single sign-on url for the Confluent organization.")
  @visibility("read", "create")
  ssoUrl: Uri;

  @doc("Details of the product offering.")
  offerDetail: OfferDetail;

  @doc("Subscriber details.")
  userDetail: UserDetail;

  ...DefaultProvisioningStateProperty;
}

@doc("SaaS offer status.")
enum OfferStatus {
  Started, PendingFulfillmentStart, InProgress,
  Subscribed, Suspended, Reinstated, Succeeded,
  Failed, Unsubscribed, Updating
}

@doc("Details of the product offering.")
model OfferDetail {
  @doc("Id of the product publisher.")
  publisherId: MediumString;

  @doc("Id of the product offering.")
  id: MediumString;

  @doc("Id of the product offer plan.")
  planId: MediumString;

  @doc("Name of the product offer plan.")
  planName: MediumString;

  @doc("Offer plan term unit.")
  termUnit: ShortString;

  @doc("SaaS offer status.")
  status: OfferStatus;
}

@doc("Details of the subscriber")
model UserDetail {
  @doc("Subscriber first name.")
  firstName: MediumString;

  @doc("Subscriber last name.")
  lastName: MediumString;

  @doc("Subscriber email address.")
  emailAddress: email;
}

@armResource({
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements",
  collectionName: "MarketplaceAgreements",
  parameterType: null,
  pathParameters: [SubscriptionIdParameter],
  standardOperations: ["read"]
})
@armListBy(SubscriptionIdParameter, "List")
@doc("The details of a marketplace agreement.")
model ConfluentAgreementResource is ProxyResource<ConfluentAgreementResourceProperties> {}

@doc("The details of the agreement.")
model ConfluentAgreementResourceProperties {
}

@armResourceOperations(ConfluentAgreementResource)
namespace MarketplaceAgreements {
  @put("default")
  @doc("Create a new marketplace agreement.")
  op Create(
    ...ApiVersionParameter,
    ...SubscriptionIdParameter,
    @doc("The agreement details.")
    @body agreement: ConfluentAgreementResource
  ): ArmResponse<ConfluentAgreementResource> | ErrorResponse;
}
