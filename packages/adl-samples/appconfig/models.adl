model ETagHeader {
  @header eTag: string;
}

model ETagHeaders {
  @header ifMatch: string;
  @header ifNoneMatch: string;
}

model LastModifiedHeader {
  @header lastModified: plainDate;
}

model AcceptDatetimeHeader {
  @header acceptDatetime: plainDate;
}

model SyncTokenHeader {
  @doc "Used to guarantee real-time consistency between requests."
  @header syncToken?: string;
}

model ServiceParams {
  @query apiVersion: string;
}

@doc "Azure App Configuration error object."
model Error {
  @doc "The type of the error"
  type: string;

  @doc "A brief summary of the error."
  title: string;

  @doc "The name of the parameter that resulted in the error."
  name: string;

  @doc "A detailed description of the error."
  detail: string;

  @doc "The HTTP status code that the error maps to." 
  statusCode: int32;
}

model Page<T> {
  items: T[];
  nextLink: string;
}

alias KeyValuePage = Page<KeyValue>;
alias KeyPage = Page<Key>;

model Label {
  name: string;
}
alias LabelPage = Page<Label>;


alias KeyValueHeaders =
  & SyncTokenHeader
  & LastModifiedHeader
  & ETagHeader;

alias KeyValue = Key & Value;

model Key {
  key: string;
}

model Value {
  label?: string;
  tags: Map<string, string>;
  locked: boolean;
}

enum KeyField {
  key, label, content_type, value, last_modified, tags
}

enum LabelField {
  name
}
