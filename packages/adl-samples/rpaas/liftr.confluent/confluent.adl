import "@azure-tools/adl-rest";
import "@azure-tools/adl-openapi";
import "@azure-tools/adl-rpaas";
import "@azure-tools/adl-rpaas-controller";

@armNamespace
@serviceTitle("Microsoft.Confluent")
@serviceVersion("2021-03-01-preview")
namespace Microsoft.Confluent;

@doc("A string that represents a URI.")
model Uri = string;

@doc("Reusable representation of an email address")
@format("\\w+@\\w+\\.\\w+")
model email = string;

@doc("Shorthand for setting length limit.")
@minLength(5)
@maxLength(50)
model MediumString = string;

@doc("Shorthand for setting length limit.")
@maxLength(25)
model ShortString = string;

@armResource({
  path: "organizations",
  collectionName: "Organizations",
  parameterType: OrganizationNameParameter,
})
model Organization = TrackedResource<OrganizationProperties>;

model OrganizationNameParameter {
  @doc("Organization resource name")
  @path organizationName: string;
}

@doc("Details of the Confluent organization.")
model OrganizationProperties {
  @doc("UTC Time when Organization resource was created.")
  @visibility("read")
  createdTime: zonedDateTime;

  @doc("Id of the Confluent organization.")
  @visibility("read")
  organizationId: string;

  @doc("Single sign-on url for the Confluent organization.")
  @visibility("read")
  ssoUrl: Uri;

  @doc("Details of the product offering.")
  offerDetail: OfferDetail;

  @doc("Subscriber details.")
  userDetail: UserDetail;
}

@doc("SaaS offer status.")
model OfferStatus =
    "Started" | "PendingFulfillmentStart" | "InProgress" |
    "Subscribed" | "Suspended" | "Reinstated" | "Succeeded" |
    "Failed" | "Unsubscribed" | "Updating";

@doc("Details of the product offering.")
model OfferDetail {
  @doc("Id of the product publisher.")
  publisherId: MediumString;

  @doc("Id of the product offering.")
  id: MediumString;

  @doc("Id of the product offer plan.")
  planId: MediumString;

  @doc("Name of the product offer plan.")
  planName: MediumString;

  @doc("Offer plan term unit.")
  termUnit: ShortString;

  @doc("SaaS offer status.")
  status: OfferStatus;
}

@doc("Details of the subscriber")
model UserDetail {
  @doc("Subscriber first name.")
  firstName: MediumString;

  @doc("Subscriber last name.")
  lastName: MediumString;

  @doc("Subscriber email address.")
  emailAddress: email;
}

@armResource({
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements",
  collectionName: "MarketplaceAgreements",
  parameterType: null,
  pathParameters: [SubscriptionIdParameter]
})
@armListBy(SubscriptionIdParameter, "List")
model ConfluentAgreementResource {
  ...ArmResource;
  properties: ConfluentAgreementResourceProperties;
}

model ConfluentAgreementResourceProperties {
}

@armResourceOperations(ConfluentAgreementResource)
namespace MarketplaceAgreements {
  @put("default")
  op Create(
    ...ApiVersionParameter,
    ...SubscriptionIdParameter,
    @body agreement: ConfluentAgreementResource
  ): ArmResponse<ConfluentAgreementResource> | ErrorResponse;
}
