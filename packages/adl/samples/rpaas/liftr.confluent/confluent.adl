@ArmTrackedResource("Microsft.Confluent/organizations", OrganizationProperties)
namespace Organization
{
  @post getKeys() : ArmResponse<OrganizationKeys>;
}

""" Details of the Confluent organization. """
model OrganizationProperties 
{
  
  """ UTC Time when Organization resource was created. """
  @visibility("read") 
  createdTime: DateTime;

  """ Id of the Confluent organization."""
  @visibility("read") 
  organizationId: string;

  """ Single sign-on url for the Confluent organization."""
  @visibility("read") 
  ssoUrl: Uri;

  """ Details of the product offering."""
  offerDetail: OfferDetail;

  """ Subscriber details."""
  userDetail: UserDetail;
}

""" Details of the product offering."""
model OfferDetail
{
  """ Id of the product publisher. """
  publisherId: string50;

  """ Id of the product offering. """
  id: string50;

  """ Id of the product offer plan. """
  planId: string50;

  """ Name of the product offer plan. """
  planName: string50;

  """ Offer plan term unit. """
  termUnit: string25;
  
  """ SaaS offer status. """
  status: "Started" | "PendingFulfillmentStart" | "InProgress" |
          "Subscribed" | "Suspended" | "Reinstated" | "Succeeded" |
          "Failed" | "Unsubscribed" | "Updating";
}

""" Details of the subscriber """
model UserDetail
{
  """ Subscriber first name."""
  firstName: string50;

  """ Subscriber last name."""
  lastName: string50;

  """ Subscriber email address."""
  emailAddress: email
}

model OrganizationKeys
{
  """ The primary key. """
  primary: SecureString;

  """ The secondary Key. """
  secondary: SecureString;
}

@doc("Reusable representation of an email address")
@format("\w+@\w+\.\w+)
model email: string;

@doc("Shorthand for setting length limit.")
@length(50)
model string50: string;

""" Shorthand for setting length limit. """
@length(25)
model string25: string;
