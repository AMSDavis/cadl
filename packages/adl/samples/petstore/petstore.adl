// Model types

model Pet {
  name: string;
  tag?: string;
}

model Toy {
  id: int64;
  petId: int64;
  name: string;
}

// Response types

@doc "Success"
model Ok<T> {
  @header statusCode: 200;
  ... T;
}

@doc "Error"
model Error {
  code: int32;
  message: string;
}

@doc "Not modified"
model NotModified<T> {
  @header statusCode: 304;
  ... T;
}

model ResponsePage<T> {
  items: T[];
  nextLink: string;
}

model PetId {
  @path petId: int32;
}

@doc "Manage your pets."
@resource "/pets"
interface Pets {
  @doc "Delete a pet."
  delete(... PetId): Ok<{}> | Error;

  @fancyDoc "List pets."
  @pageable
  list(@query nextLink?: string): Ok<ResponsePage<Pet>> | Error;

  @doc "Returns a pet. Supports eTags."
  read(... PetId): Ok<Pet> | NotModified<Pet> | Error;

  create(@body pet: Pet): Ok<Pet> | Error;
}

@resource "/pets/{petId}/toys"
interface ListPetToysResponse {
  @pageable
  list(@path petId: string, @query nameFilter: string): Ok<ResponsePage<Toy>> | Error;
}