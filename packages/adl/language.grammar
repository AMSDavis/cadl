///////////////////////////////////////////////////////////////////////////
// Lexical Grammar

SourceCharacter :
    > any Unicode code point

InputElement :
    Token
    Trivia

Token:
    Keyword
    Identifier
    NumericLiteral
    StringLiteral
    Punctuator

Trivia :
    Comment
    WhiteSpace
    LineTerminator

Keyword :
    BooleanLiteral
    `import`
    `model`
    `interface`

Identifier :
    IdentifierName but not Keyword

IdentifierName :
    IdentifierStart
    IdentifierName IdentifierContinue

IdentifierStart :
    > any Unicode code point with the Unicode property "ID_Start" or "Other_ID_Start"
    `$`
    `_`

IdentifierContinue :
    > any Unicode code point with the Unicode property "ID_Continue" or "Other_ID_Continue", or "Other_ID_Start"
    `$`
    `_`
    <ZWNJ>
    <ZWJ>

BooleanLiteral :
    `true`
    `false`

NumericLiteral :
    DecimalLiteral
    HexIntegerLiteral

DecimalLiteral :
    DecimalIntegerLiteral `.` DecimalDigits? ExponentPart?
    DecimalIntegerLiteral ExponentPart?

DecimalIntegerLiteral :
    DecimalDigits

DecimalDigits :
    DecimalDigit
    DecimalDigits DecimalDigit

DecimalDigit :
    one of `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

ExponentPart :
    `e` SignedInteger

SignedInteger :
    DecimalDigits
    `+` DecimalDigits
    `-` DecimalDigits

HexIntegerLiteral :
    `0x` HexDigits

HexDigits :
    HexDigit
    HexDigits HexDigit

HexDigit : 
    one of `0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

BinaryIntegerLiteral :
    `0b` BinaryDigits

BinaryDigits :
    BinaryDigit
    BinaryDigits BinaryDigit

BinaryDigit :
    one of `0` `1`

// TODO: triple-quoted strings not specified yet, tricky to express.

StringLiteral :
    `"` StringCharacters? `"`

StringCharacters :
   StringCharacter StringCharacters?

StringCharacter :
    SourceCharacter but not one of `"` or `\`
    `\` EscapeCharacter

EscapeCharacter :
    one of `"` `r` `n` `t` `\`

Punctuator : 
    one of  `|` `:` `,` `;` `.` `<` `>` `(` `)` `{` `}` `[` `]` `@` `...`

WhiteSpace :
    <TAB>
    <VT>
    <FF>
    <SP>
    <NBSP>
    <ZWNBSP>
    <USP>

LineTerminator :
    <LF>
    <CR>
    <LS>
    <PS>

Comment :
    MultiLineComment
    SingleLineComment

MultiLineComment :
    `/*` MultiLineCommentChars? `*/`

MultiLineCommentChars :
    MultiLineNotAsteriskChar MultiLineCommentChars?
    `*` PostAsteriskCommentChars?

PostAsteriskCommentChars :
    MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
    `*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar :
    SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar :
    SourceCharacter but not one of `/` or `*`

SingleLineComment :
    `//` SingleLineCommentChars?

SingleLineCommentChars :
    SingleLineCommentChar SingleLineCommentChars?

SingleLineCommentChar :
    SourceCharacter but not LineTerminator


///////////////////////////////////////////////////////////////////////////
// Syntactic Grammar

ADLScript :
    StatementList?

StatementList :
    StatementList? Statement

Statement :
    ImportStatement
    ModelStatement
    InterfaceStatement

ImportStatement :
    `import` Identifier `;`
    `import` Identifier `as` `{` NamedImports? `}` `;`

NamedImports : 
    Identifier
    NamedImports `,` Identifier

ModelStatement :
    DecoratorList? `model` Identifier `{` ModelBody? `}`
    DecoratorList? `model` Identifier `=` Expression `;`

ModelBody :
    ModelPropertyList `,`?
    ModelPropertyList `;`?

ModelPropertyList :
    ModelProperty
    ModelPropertyList `,` ModelProperty
    ModelPropertyList `;` ModelProperty

ModelProperty:
    ModelSpreadProperty
    DecoratorList? Identifier `:` Expression
    DecoratorList? StringLiteral `:` Expression

ModelSpreadProperty :
    `...` Identifier

InterfaceStatement : 
    DecoratorList? `interface` Identifier `{` InterfaceBody? `}`

InterfaceBody :
    InterfacePropertyList `,`?
    InterfacePropertyList `;`?

InterfacePropertyList :
    InterfaceProperty
    InterfacePropertyList `,` InterfaceProperty
    InterfacePropertyList `;` InterfaceProperty

InterfaceProperty :
    DecoratorList? Identifier `(` ModelPropertyList? `)` `:` Expression

Expression :
    UnionExpression

UnionExpression :
    IntersectionExpression
    UnionExpression `|` IntersectionExpression

IntersectionExpression :
    ArrayExpression
    IntersectionExpression `&` ArrayExpression

ArrayExpression :
    TemplateApplication
    TemplateApplication `[` `]`

TemplateApplication :
    MemberExpression
    MemberExpression `<` ExpressionList `>`

MemberExpression :
    PrimaryExpression
    MemberExpression `.` Identifier

PrimaryExpression :
    Identifier
    Literal
    ModelExpression
    TupleExpression

Literal :
    StringLiteral
    BooleanLiteral
    NumericLiteral

ModelExpression :
    `{` ModelBody? `}`

TupleExpression :
    `[` ExpressionList `]`

ExpressionList :
    Expression
    ExpressionList `,` Expression

DecoratorList :
    DecoratorList? Decorator

Decorator :
    `@` MemberExpression DecoratorArguments?

DecoratorArguments :
   Literal
   `(` ExpressionList? `)`
